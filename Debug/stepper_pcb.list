
stepper_pcb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006608  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  080067a8  080067a8  000167a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069e8  080069e8  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  080069e8  080069e8  000169e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069f0  080069f0  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069f0  080069f0  000169f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069f4  080069f4  000169f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080069f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c4  20000088  08006a80  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000054c  08006a80  0002054c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e18c  00000000  00000000  000200fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fdb  00000000  00000000  0002e287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e08  00000000  00000000  00030268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b09  00000000  00000000  00031070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001714a  00000000  00000000  00031b79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f69d  00000000  00000000  00048cc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f9db  00000000  00000000  00058360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004350  00000000  00000000  000e7d3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000ec08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006790 	.word	0x08006790

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	08006790 	.word	0x08006790

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <HAL_GPIO_EXTI_Callback>:
int SLOW_WHEEL_CCR = 199;

#define FIX_TIMER_TRIGGER(handle_ptr) (__HAL_TIM_CLEAR_FLAG(handle_ptr, TIM_SR_UIF))


void HAL_GPIO_EXTI_Callback(uint16_t pin){
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	80fb      	strh	r3, [r7, #6]
	if(pin == GPIO_PIN_12 || pin == GPIO_PIN_13 || pin == GPIO_PIN_14 || pin == GPIO_PIN_15){
 8000586:	88fb      	ldrh	r3, [r7, #6]
 8000588:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800058c:	d00b      	beq.n	80005a6 <HAL_GPIO_EXTI_Callback+0x2a>
 800058e:	88fb      	ldrh	r3, [r7, #6]
 8000590:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000594:	d007      	beq.n	80005a6 <HAL_GPIO_EXTI_Callback+0x2a>
 8000596:	88fb      	ldrh	r3, [r7, #6]
 8000598:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800059c:	d003      	beq.n	80005a6 <HAL_GPIO_EXTI_Callback+0x2a>
 800059e:	88fb      	ldrh	r3, [r7, #6]
 80005a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80005a4:	d102      	bne.n	80005ac <HAL_GPIO_EXTI_Callback+0x30>
		HAL_TIM_Base_Start_IT(&htim5);
 80005a6:	4803      	ldr	r0, [pc, #12]	; (80005b4 <HAL_GPIO_EXTI_Callback+0x38>)
 80005a8:	f003 f810 	bl	80035cc <HAL_TIM_Base_Start_IT>
	}
}
 80005ac:	bf00      	nop
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20000184 	.word	0x20000184

080005b8 <set_forward_dir>:
	HAL_GPIO_WritePin(STEP_GPIO, STEP_PIN, 0);
	HAL_Delay(5);
}

void set_forward_dir()
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DIR1_GPIO, DIR1_PIN, 1);
 80005bc:	2201      	movs	r2, #1
 80005be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005c2:	480a      	ldr	r0, [pc, #40]	; (80005ec <set_forward_dir+0x34>)
 80005c4:	f002 fae8 	bl	8002b98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIR2_GPIO, DIR2_PIN, 1);
 80005c8:	2201      	movs	r2, #1
 80005ca:	2110      	movs	r1, #16
 80005cc:	4807      	ldr	r0, [pc, #28]	; (80005ec <set_forward_dir+0x34>)
 80005ce:	f002 fae3 	bl	8002b98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIR3_GPIO, DIR3_PIN, 1-1);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2120      	movs	r1, #32
 80005d6:	4805      	ldr	r0, [pc, #20]	; (80005ec <set_forward_dir+0x34>)
 80005d8:	f002 fade 	bl	8002b98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIR4_GPIO, DIR4_PIN, 1-1);
 80005dc:	2200      	movs	r2, #0
 80005de:	2108      	movs	r1, #8
 80005e0:	4802      	ldr	r0, [pc, #8]	; (80005ec <set_forward_dir+0x34>)
 80005e2:	f002 fad9 	bl	8002b98 <HAL_GPIO_WritePin>
}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40020400 	.word	0x40020400

080005f0 <set_backward_dir>:
void set_backward_dir()
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DIR1_GPIO, DIR1_PIN, 0);
 80005f4:	2200      	movs	r2, #0
 80005f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005fa:	480a      	ldr	r0, [pc, #40]	; (8000624 <set_backward_dir+0x34>)
 80005fc:	f002 facc 	bl	8002b98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIR2_GPIO, DIR2_PIN, 0);
 8000600:	2200      	movs	r2, #0
 8000602:	2110      	movs	r1, #16
 8000604:	4807      	ldr	r0, [pc, #28]	; (8000624 <set_backward_dir+0x34>)
 8000606:	f002 fac7 	bl	8002b98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIR3_GPIO, DIR3_PIN, 1-0);
 800060a:	2201      	movs	r2, #1
 800060c:	2120      	movs	r1, #32
 800060e:	4805      	ldr	r0, [pc, #20]	; (8000624 <set_backward_dir+0x34>)
 8000610:	f002 fac2 	bl	8002b98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIR4_GPIO, DIR4_PIN, 1-0);
 8000614:	2201      	movs	r2, #1
 8000616:	2108      	movs	r1, #8
 8000618:	4802      	ldr	r0, [pc, #8]	; (8000624 <set_backward_dir+0x34>)
 800061a:	f002 fabd 	bl	8002b98 <HAL_GPIO_WritePin>
}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40020400 	.word	0x40020400

08000628 <set_left_dir>:
void set_left_dir()
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DIR1_GPIO, DIR1_PIN, 0);
 800062c:	2200      	movs	r2, #0
 800062e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000632:	480a      	ldr	r0, [pc, #40]	; (800065c <set_left_dir+0x34>)
 8000634:	f002 fab0 	bl	8002b98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIR2_GPIO, DIR2_PIN, 1);
 8000638:	2201      	movs	r2, #1
 800063a:	2110      	movs	r1, #16
 800063c:	4807      	ldr	r0, [pc, #28]	; (800065c <set_left_dir+0x34>)
 800063e:	f002 faab 	bl	8002b98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIR3_GPIO, DIR3_PIN, 1-1);
 8000642:	2200      	movs	r2, #0
 8000644:	2120      	movs	r1, #32
 8000646:	4805      	ldr	r0, [pc, #20]	; (800065c <set_left_dir+0x34>)
 8000648:	f002 faa6 	bl	8002b98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIR4_GPIO, DIR4_PIN, 1-0);
 800064c:	2201      	movs	r2, #1
 800064e:	2108      	movs	r1, #8
 8000650:	4802      	ldr	r0, [pc, #8]	; (800065c <set_left_dir+0x34>)
 8000652:	f002 faa1 	bl	8002b98 <HAL_GPIO_WritePin>
}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40020400 	.word	0x40020400

08000660 <set_right_dir>:
void set_right_dir()
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DIR1_GPIO, DIR1_PIN, 1);
 8000664:	2201      	movs	r2, #1
 8000666:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800066a:	480a      	ldr	r0, [pc, #40]	; (8000694 <set_right_dir+0x34>)
 800066c:	f002 fa94 	bl	8002b98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIR2_GPIO, DIR2_PIN, 0);
 8000670:	2200      	movs	r2, #0
 8000672:	2110      	movs	r1, #16
 8000674:	4807      	ldr	r0, [pc, #28]	; (8000694 <set_right_dir+0x34>)
 8000676:	f002 fa8f 	bl	8002b98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIR3_GPIO, DIR3_PIN, 1-0);
 800067a:	2201      	movs	r2, #1
 800067c:	2120      	movs	r1, #32
 800067e:	4805      	ldr	r0, [pc, #20]	; (8000694 <set_right_dir+0x34>)
 8000680:	f002 fa8a 	bl	8002b98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIR4_GPIO, DIR4_PIN, 1-1);
 8000684:	2200      	movs	r2, #0
 8000686:	2108      	movs	r1, #8
 8000688:	4802      	ldr	r0, [pc, #8]	; (8000694 <set_right_dir+0x34>)
 800068a:	f002 fa85 	bl	8002b98 <HAL_GPIO_WritePin>
}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40020400 	.word	0x40020400

08000698 <set_ccw_dir>:
void set_ccw_dir()
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DIR1_GPIO, DIR1_PIN, 0);
 800069c:	2200      	movs	r2, #0
 800069e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006a2:	480a      	ldr	r0, [pc, #40]	; (80006cc <set_ccw_dir+0x34>)
 80006a4:	f002 fa78 	bl	8002b98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIR2_GPIO, DIR2_PIN, 0);
 80006a8:	2200      	movs	r2, #0
 80006aa:	2110      	movs	r1, #16
 80006ac:	4807      	ldr	r0, [pc, #28]	; (80006cc <set_ccw_dir+0x34>)
 80006ae:	f002 fa73 	bl	8002b98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIR3_GPIO, DIR3_PIN, 1-1);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2120      	movs	r1, #32
 80006b6:	4805      	ldr	r0, [pc, #20]	; (80006cc <set_ccw_dir+0x34>)
 80006b8:	f002 fa6e 	bl	8002b98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIR4_GPIO, DIR4_PIN, 1-1);
 80006bc:	2200      	movs	r2, #0
 80006be:	2108      	movs	r1, #8
 80006c0:	4802      	ldr	r0, [pc, #8]	; (80006cc <set_ccw_dir+0x34>)
 80006c2:	f002 fa69 	bl	8002b98 <HAL_GPIO_WritePin>
}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40020400 	.word	0x40020400

080006d0 <set_cw_dir>:
void set_cw_dir()
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DIR1_GPIO, DIR1_PIN, 1);
 80006d4:	2201      	movs	r2, #1
 80006d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006da:	480a      	ldr	r0, [pc, #40]	; (8000704 <set_cw_dir+0x34>)
 80006dc:	f002 fa5c 	bl	8002b98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIR2_GPIO, DIR2_PIN, 1);
 80006e0:	2201      	movs	r2, #1
 80006e2:	2110      	movs	r1, #16
 80006e4:	4807      	ldr	r0, [pc, #28]	; (8000704 <set_cw_dir+0x34>)
 80006e6:	f002 fa57 	bl	8002b98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIR3_GPIO, DIR3_PIN, 1-0);
 80006ea:	2201      	movs	r2, #1
 80006ec:	2120      	movs	r1, #32
 80006ee:	4805      	ldr	r0, [pc, #20]	; (8000704 <set_cw_dir+0x34>)
 80006f0:	f002 fa52 	bl	8002b98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIR4_GPIO, DIR4_PIN, 1-0);
 80006f4:	2201      	movs	r2, #1
 80006f6:	2108      	movs	r1, #8
 80006f8:	4802      	ldr	r0, [pc, #8]	; (8000704 <set_cw_dir+0x34>)
 80006fa:	f002 fa4d 	bl	8002b98 <HAL_GPIO_WritePin>
}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40020400 	.word	0x40020400

08000708 <enable>:

static int steps_left = 0;
static int disabled = 0;
void enable()
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ENABLE_GPIO, ENABLE_PIN, 0);
 800070c:	2200      	movs	r2, #0
 800070e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000712:	4802      	ldr	r0, [pc, #8]	; (800071c <enable+0x14>)
 8000714:	f002 fa40 	bl	8002b98 <HAL_GPIO_WritePin>
}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40020000 	.word	0x40020000

08000720 <disable>:
void disable()
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ENABLE_GPIO, ENABLE_PIN, 1);
 8000724:	2201      	movs	r2, #1
 8000726:	f44f 7180 	mov.w	r1, #256	; 0x100
 800072a:	4802      	ldr	r0, [pc, #8]	; (8000734 <disable+0x14>)
 800072c:	f002 fa34 	bl	8002b98 <HAL_GPIO_WritePin>
}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40020000 	.word	0x40020000

08000738 <set_dir>:
int auto_move = 0;
int auto_steps = 0;
int auto_dir = 0;

void set_dir(int dir)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	switch(dir)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2b05      	cmp	r3, #5
 8000744:	d820      	bhi.n	8000788 <set_dir+0x50>
 8000746:	a201      	add	r2, pc, #4	; (adr r2, 800074c <set_dir+0x14>)
 8000748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800074c:	08000765 	.word	0x08000765
 8000750:	0800076b 	.word	0x0800076b
 8000754:	08000771 	.word	0x08000771
 8000758:	08000777 	.word	0x08000777
 800075c:	0800077d 	.word	0x0800077d
 8000760:	08000783 	.word	0x08000783
	{
	case 0:
		set_forward_dir();
 8000764:	f7ff ff28 	bl	80005b8 <set_forward_dir>
		break;
 8000768:	e00e      	b.n	8000788 <set_dir+0x50>
	case 1:
		set_backward_dir();
 800076a:	f7ff ff41 	bl	80005f0 <set_backward_dir>
		break;
 800076e:	e00b      	b.n	8000788 <set_dir+0x50>
	case 2:
		set_left_dir();
 8000770:	f7ff ff5a 	bl	8000628 <set_left_dir>
		break;
 8000774:	e008      	b.n	8000788 <set_dir+0x50>
	case 3:
		set_right_dir();
 8000776:	f7ff ff73 	bl	8000660 <set_right_dir>
		break;
 800077a:	e005      	b.n	8000788 <set_dir+0x50>
	case 4:
		set_ccw_dir();
 800077c:	f7ff ff8c 	bl	8000698 <set_ccw_dir>
		break;
 8000780:	e002      	b.n	8000788 <set_dir+0x50>
	case 5:
		set_cw_dir();
 8000782:	f7ff ffa5 	bl	80006d0 <set_cw_dir>
		break;
 8000786:	bf00      	nop
	}
}
 8000788:	bf00      	nop
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}

08000790 <HAL_TIM_PeriodElapsedCallback>:
static it_started = 0;



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]


    if (htim->Instance == TIM11) {
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a8f      	ldr	r2, [pc, #572]	; (80009dc <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d166      	bne.n	8000870 <HAL_TIM_PeriodElapsedCallback+0xe0>
    	if (controller_move == 0 && ultra_move == 0 && auto_move == 0)
 80007a2:	4b8f      	ldr	r3, [pc, #572]	; (80009e0 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d110      	bne.n	80007cc <HAL_TIM_PeriodElapsedCallback+0x3c>
 80007aa:	4b8e      	ldr	r3, [pc, #568]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d10c      	bne.n	80007cc <HAL_TIM_PeriodElapsedCallback+0x3c>
 80007b2:	4b8d      	ldr	r3, [pc, #564]	; (80009e8 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d108      	bne.n	80007cc <HAL_TIM_PeriodElapsedCallback+0x3c>
		{
			HAL_TIM_Base_Stop_IT(&htim11);
 80007ba:	488c      	ldr	r0, [pc, #560]	; (80009ec <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80007bc:	f002 ff68 	bl	8003690 <HAL_TIM_Base_Stop_IT>
			it_started = 0;
 80007c0:	4b8b      	ldr	r3, [pc, #556]	; (80009f0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
			disable();
 80007c6:	f7ff ffab 	bl	8000720 <disable>
			return;
 80007ca:	e103      	b.n	80009d4 <HAL_TIM_PeriodElapsedCallback+0x244>
		}
    	if (ultra_move)
 80007cc:	4b85      	ldr	r3, [pc, #532]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d015      	beq.n	8000800 <HAL_TIM_PeriodElapsedCallback+0x70>
    	{
    		if (stepState)
 80007d4:	4b87      	ldr	r3, [pc, #540]	; (80009f4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d00b      	beq.n	80007f4 <HAL_TIM_PeriodElapsedCallback+0x64>
    		{
    			ultra_steps--;
 80007dc:	4b86      	ldr	r3, [pc, #536]	; (80009f8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	3b01      	subs	r3, #1
 80007e2:	4a85      	ldr	r2, [pc, #532]	; (80009f8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80007e4:	6013      	str	r3, [r2, #0]
    			if (ultra_steps == 0)
 80007e6:	4b84      	ldr	r3, [pc, #528]	; (80009f8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d102      	bne.n	80007f4 <HAL_TIM_PeriodElapsedCallback+0x64>
    			{
    				ultra_move = 0;
 80007ee:	4b7d      	ldr	r3, [pc, #500]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
    			}
    		}
    		set_dir(ultra_dir);
 80007f4:	4b81      	ldr	r3, [pc, #516]	; (80009fc <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff ff9d 	bl	8000738 <set_dir>
 80007fe:	e01e      	b.n	800083e <HAL_TIM_PeriodElapsedCallback+0xae>
    	}
    	else if (controller_move)
 8000800:	4b77      	ldr	r3, [pc, #476]	; (80009e0 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d005      	beq.n	8000814 <HAL_TIM_PeriodElapsedCallback+0x84>
    	{

    		set_dir(controller_dir);
 8000808:	4b7d      	ldr	r3, [pc, #500]	; (8000a00 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff ff93 	bl	8000738 <set_dir>
 8000812:	e014      	b.n	800083e <HAL_TIM_PeriodElapsedCallback+0xae>
    	}
    	else
    	{
    		if (stepState)
 8000814:	4b77      	ldr	r3, [pc, #476]	; (80009f4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d00b      	beq.n	8000834 <HAL_TIM_PeriodElapsedCallback+0xa4>
			{
				auto_steps--;
 800081c:	4b79      	ldr	r3, [pc, #484]	; (8000a04 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	3b01      	subs	r3, #1
 8000822:	4a78      	ldr	r2, [pc, #480]	; (8000a04 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8000824:	6013      	str	r3, [r2, #0]
				if (auto_steps == 0)
 8000826:	4b77      	ldr	r3, [pc, #476]	; (8000a04 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d102      	bne.n	8000834 <HAL_TIM_PeriodElapsedCallback+0xa4>
				{
					auto_move = 0;
 800082e:	4b6e      	ldr	r3, [pc, #440]	; (80009e8 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
				}
			}
			set_dir(auto_dir);
 8000834:	4b74      	ldr	r3, [pc, #464]	; (8000a08 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff ff7d 	bl	8000738 <set_dir>
    	}
    	enable();
 800083e:	f7ff ff63 	bl	8000708 <enable>
		HAL_GPIO_WritePin(STEP_GPIO, STEP_PIN, stepState ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000842:	4b6c      	ldr	r3, [pc, #432]	; (80009f4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2b00      	cmp	r3, #0
 8000848:	bf14      	ite	ne
 800084a:	2301      	movne	r3, #1
 800084c:	2300      	moveq	r3, #0
 800084e:	b2db      	uxtb	r3, r3
 8000850:	461a      	mov	r2, r3
 8000852:	2180      	movs	r1, #128	; 0x80
 8000854:	486d      	ldr	r0, [pc, #436]	; (8000a0c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8000856:	f002 f99f 	bl	8002b98 <HAL_GPIO_WritePin>
    	stepState = !stepState;
 800085a:	4b66      	ldr	r3, [pc, #408]	; (80009f4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	2b00      	cmp	r3, #0
 8000860:	bf0c      	ite	eq
 8000862:	2301      	moveq	r3, #1
 8000864:	2300      	movne	r3, #0
 8000866:	b2db      	uxtb	r3, r3
 8000868:	461a      	mov	r2, r3
 800086a:	4b62      	ldr	r3, [pc, #392]	; (80009f4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	e0b1      	b.n	80009d4 <HAL_TIM_PeriodElapsedCallback+0x244>
    }
    else if (htim->Instance == TIM10)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a66      	ldr	r2, [pc, #408]	; (8000a10 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d108      	bne.n	800088c <HAL_TIM_PeriodElapsedCallback+0xfc>
    {
    	TIM2->CCR1 = PINCH_BACKWARD_CCR;
 800087a:	4b66      	ldr	r3, [pc, #408]	; (8000a14 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000882:	635a      	str	r2, [r3, #52]	; 0x34
    	HAL_TIM_Base_Stop_IT(&htim10);
 8000884:	4864      	ldr	r0, [pc, #400]	; (8000a18 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8000886:	f002 ff03 	bl	8003690 <HAL_TIM_Base_Stop_IT>
 800088a:	e0a3      	b.n	80009d4 <HAL_TIM_PeriodElapsedCallback+0x244>
    }
    else if(htim->Instance == TIM5){
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a62      	ldr	r2, [pc, #392]	; (8000a1c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000892:	4293      	cmp	r3, r2
 8000894:	f040 808b 	bne.w	80009ae <HAL_TIM_PeriodElapsedCallback+0x21e>
		GPIO_PinState ultra1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);
 8000898:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800089c:	4860      	ldr	r0, [pc, #384]	; (8000a20 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800089e:	f002 f963 	bl	8002b68 <HAL_GPIO_ReadPin>
 80008a2:	4603      	mov	r3, r0
 80008a4:	73fb      	strb	r3, [r7, #15]
		GPIO_PinState ultra2 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 80008a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008aa:	485d      	ldr	r0, [pc, #372]	; (8000a20 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80008ac:	f002 f95c 	bl	8002b68 <HAL_GPIO_ReadPin>
 80008b0:	4603      	mov	r3, r0
 80008b2:	73bb      	strb	r3, [r7, #14]
		GPIO_PinState ultra3 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 80008b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008b8:	4859      	ldr	r0, [pc, #356]	; (8000a20 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80008ba:	f002 f955 	bl	8002b68 <HAL_GPIO_ReadPin>
 80008be:	4603      	mov	r3, r0
 80008c0:	737b      	strb	r3, [r7, #13]
		GPIO_PinState ultra4 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 80008c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008c6:	4856      	ldr	r0, [pc, #344]	; (8000a20 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80008c8:	f002 f94e 	bl	8002b68 <HAL_GPIO_ReadPin>
 80008cc:	4603      	mov	r3, r0
 80008ce:	733b      	strb	r3, [r7, #12]
		if (!ultra_move)
 80008d0:	4b44      	ldr	r3, [pc, #272]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d166      	bne.n	80009a6 <HAL_TIM_PeriodElapsedCallback+0x216>
		{

			if(ultra1){
 80008d8:	7bfb      	ldrb	r3, [r7, #15]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d016      	beq.n	800090c <HAL_TIM_PeriodElapsedCallback+0x17c>
				ultra_move = 1;
 80008de:	4b41      	ldr	r3, [pc, #260]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	601a      	str	r2, [r3, #0]
				 ultra_dir = 1;
 80008e4:	4b45      	ldr	r3, [pc, #276]	; (80009fc <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	601a      	str	r2, [r3, #0]
				 ultra_steps = 50;
 80008ea:	4b43      	ldr	r3, [pc, #268]	; (80009f8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80008ec:	2232      	movs	r2, #50	; 0x32
 80008ee:	601a      	str	r2, [r3, #0]
				printf("1\n");
 80008f0:	484c      	ldr	r0, [pc, #304]	; (8000a24 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80008f2:	f005 f8af 	bl	8005a54 <puts>
				if (!it_started)
 80008f6:	4b3e      	ldr	r3, [pc, #248]	; (80009f0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d153      	bne.n	80009a6 <HAL_TIM_PeriodElapsedCallback+0x216>
				{
					it_started = 1;
 80008fe:	4b3c      	ldr	r3, [pc, #240]	; (80009f0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000900:	2201      	movs	r2, #1
 8000902:	601a      	str	r2, [r3, #0]
					HAL_TIM_Base_Start_IT(&htim11);
 8000904:	4839      	ldr	r0, [pc, #228]	; (80009ec <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000906:	f002 fe61 	bl	80035cc <HAL_TIM_Base_Start_IT>
 800090a:	e04c      	b.n	80009a6 <HAL_TIM_PeriodElapsedCallback+0x216>
				}
			}
			else if(ultra2){
 800090c:	7bbb      	ldrb	r3, [r7, #14]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d016      	beq.n	8000940 <HAL_TIM_PeriodElapsedCallback+0x1b0>
				ultra_move = 1;
 8000912:	4b34      	ldr	r3, [pc, #208]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000914:	2201      	movs	r2, #1
 8000916:	601a      	str	r2, [r3, #0]
				ultra_dir = 0;
 8000918:	4b38      	ldr	r3, [pc, #224]	; (80009fc <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
				ultra_steps = 50;
 800091e:	4b36      	ldr	r3, [pc, #216]	; (80009f8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000920:	2232      	movs	r2, #50	; 0x32
 8000922:	601a      	str	r2, [r3, #0]
				printf("2\n");
 8000924:	4840      	ldr	r0, [pc, #256]	; (8000a28 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000926:	f005 f895 	bl	8005a54 <puts>
				if (!it_started)
 800092a:	4b31      	ldr	r3, [pc, #196]	; (80009f0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d139      	bne.n	80009a6 <HAL_TIM_PeriodElapsedCallback+0x216>
								{
									it_started = 1;
 8000932:	4b2f      	ldr	r3, [pc, #188]	; (80009f0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000934:	2201      	movs	r2, #1
 8000936:	601a      	str	r2, [r3, #0]
									HAL_TIM_Base_Start_IT(&htim11);
 8000938:	482c      	ldr	r0, [pc, #176]	; (80009ec <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800093a:	f002 fe47 	bl	80035cc <HAL_TIM_Base_Start_IT>
 800093e:	e032      	b.n	80009a6 <HAL_TIM_PeriodElapsedCallback+0x216>
								}
			}
			else if(ultra3){
 8000940:	7b7b      	ldrb	r3, [r7, #13]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d016      	beq.n	8000974 <HAL_TIM_PeriodElapsedCallback+0x1e4>
				ultra_move = 1;
 8000946:	4b27      	ldr	r3, [pc, #156]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000948:	2201      	movs	r2, #1
 800094a:	601a      	str	r2, [r3, #0]
				ultra_dir = 3;
 800094c:	4b2b      	ldr	r3, [pc, #172]	; (80009fc <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800094e:	2203      	movs	r2, #3
 8000950:	601a      	str	r2, [r3, #0]
				ultra_steps = 50;
 8000952:	4b29      	ldr	r3, [pc, #164]	; (80009f8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000954:	2232      	movs	r2, #50	; 0x32
 8000956:	601a      	str	r2, [r3, #0]
				printf("3\n");
 8000958:	4834      	ldr	r0, [pc, #208]	; (8000a2c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800095a:	f005 f87b 	bl	8005a54 <puts>
				if (!it_started)
 800095e:	4b24      	ldr	r3, [pc, #144]	; (80009f0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d11f      	bne.n	80009a6 <HAL_TIM_PeriodElapsedCallback+0x216>
								{
									it_started = 1;
 8000966:	4b22      	ldr	r3, [pc, #136]	; (80009f0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000968:	2201      	movs	r2, #1
 800096a:	601a      	str	r2, [r3, #0]
									HAL_TIM_Base_Start_IT(&htim11);
 800096c:	481f      	ldr	r0, [pc, #124]	; (80009ec <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800096e:	f002 fe2d 	bl	80035cc <HAL_TIM_Base_Start_IT>
 8000972:	e018      	b.n	80009a6 <HAL_TIM_PeriodElapsedCallback+0x216>
								}
			}
			else if(ultra4)
 8000974:	7b3b      	ldrb	r3, [r7, #12]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d015      	beq.n	80009a6 <HAL_TIM_PeriodElapsedCallback+0x216>
			{
				ultra_move = 1;
 800097a:	4b1a      	ldr	r3, [pc, #104]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 800097c:	2201      	movs	r2, #1
 800097e:	601a      	str	r2, [r3, #0]
				ultra_dir = 2;
 8000980:	4b1e      	ldr	r3, [pc, #120]	; (80009fc <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8000982:	2202      	movs	r2, #2
 8000984:	601a      	str	r2, [r3, #0]
				ultra_steps = 50;
 8000986:	4b1c      	ldr	r3, [pc, #112]	; (80009f8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000988:	2232      	movs	r2, #50	; 0x32
 800098a:	601a      	str	r2, [r3, #0]
				printf("4\n");
 800098c:	4828      	ldr	r0, [pc, #160]	; (8000a30 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800098e:	f005 f861 	bl	8005a54 <puts>
				if (!it_started)
 8000992:	4b17      	ldr	r3, [pc, #92]	; (80009f0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d105      	bne.n	80009a6 <HAL_TIM_PeriodElapsedCallback+0x216>
								{
									it_started = 1;
 800099a:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800099c:	2201      	movs	r2, #1
 800099e:	601a      	str	r2, [r3, #0]
									HAL_TIM_Base_Start_IT(&htim11);
 80009a0:	4812      	ldr	r0, [pc, #72]	; (80009ec <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80009a2:	f002 fe13 	bl	80035cc <HAL_TIM_Base_Start_IT>
								}
			}
		}
		HAL_TIM_Base_Stop_IT(&htim5);
 80009a6:	4823      	ldr	r0, [pc, #140]	; (8000a34 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80009a8:	f002 fe72 	bl	8003690 <HAL_TIM_Base_Stop_IT>
 80009ac:	e012      	b.n	80009d4 <HAL_TIM_PeriodElapsedCallback+0x244>
	}
    else if(htim->Instance == TIM9)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a21      	ldr	r2, [pc, #132]	; (8000a38 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d10d      	bne.n	80009d4 <HAL_TIM_PeriodElapsedCallback+0x244>
    {
    	printf("tim9 it\n");
 80009b8:	4820      	ldr	r0, [pc, #128]	; (8000a3c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80009ba:	f005 f84b 	bl	8005a54 <puts>
    	pan_done = 1;
 80009be:	4b20      	ldr	r3, [pc, #128]	; (8000a40 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	601a      	str	r2, [r3, #0]
    	TIM2->CCR2 = PAN_STOP;
 80009c4:	4b1f      	ldr	r3, [pc, #124]	; (8000a44 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009cc:	639a      	str	r2, [r3, #56]	; 0x38
    	HAL_TIM_Base_Stop_IT(&htim9);
 80009ce:	481e      	ldr	r0, [pc, #120]	; (8000a48 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80009d0:	f002 fe5e 	bl	8003690 <HAL_TIM_Base_Stop_IT>
    }
}
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40014800 	.word	0x40014800
 80009e0:	20000390 	.word	0x20000390
 80009e4:	20000398 	.word	0x20000398
 80009e8:	200003a4 	.word	0x200003a4
 80009ec:	2000025c 	.word	0x2000025c
 80009f0:	200003b0 	.word	0x200003b0
 80009f4:	20000388 	.word	0x20000388
 80009f8:	2000039c 	.word	0x2000039c
 80009fc:	200003a0 	.word	0x200003a0
 8000a00:	20000394 	.word	0x20000394
 8000a04:	200003a8 	.word	0x200003a8
 8000a08:	200003ac 	.word	0x200003ac
 8000a0c:	40020000 	.word	0x40020000
 8000a10:	40014400 	.word	0x40014400
 8000a14:	20000004 	.word	0x20000004
 8000a18:	20000214 	.word	0x20000214
 8000a1c:	40000c00 	.word	0x40000c00
 8000a20:	40020400 	.word	0x40020400
 8000a24:	080067a8 	.word	0x080067a8
 8000a28:	080067ac 	.word	0x080067ac
 8000a2c:	080067b0 	.word	0x080067b0
 8000a30:	080067b4 	.word	0x080067b4
 8000a34:	20000184 	.word	0x20000184
 8000a38:	40014000 	.word	0x40014000
 8000a3c:	080067b8 	.word	0x080067b8
 8000a40:	20000014 	.word	0x20000014
 8000a44:	20000008 	.word	0x20000008
 8000a48:	200001cc 	.word	0x200001cc

08000a4c <move_async>:
int auto_mode_on = 0;
int to_delay = 0;

void move_async(int dir, int steps)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	6039      	str	r1, [r7, #0]
	if (!auto_mode_on)
 8000a56:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <move_async+0x64>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d024      	beq.n	8000aa8 <move_async+0x5c>
	{
		return;
	}
	while(auto_move);
 8000a5e:	bf00      	nop
 8000a60:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <move_async+0x68>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d1fb      	bne.n	8000a60 <move_async+0x14>
	if (to_delay !=0)
 8000a68:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <move_async+0x6c>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d007      	beq.n	8000a80 <move_async+0x34>
	{
		HAL_Delay(to_delay);
 8000a70:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <move_async+0x6c>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4618      	mov	r0, r3
 8000a76:	f001 fd2b 	bl	80024d0 <HAL_Delay>
		to_delay = 0;
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <move_async+0x6c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
	}
	auto_move = 1;
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <move_async+0x68>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	601a      	str	r2, [r3, #0]
	auto_steps = steps;
 8000a86:	4a0d      	ldr	r2, [pc, #52]	; (8000abc <move_async+0x70>)
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	6013      	str	r3, [r2, #0]
	auto_dir = dir;
 8000a8c:	4a0c      	ldr	r2, [pc, #48]	; (8000ac0 <move_async+0x74>)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6013      	str	r3, [r2, #0]
	if (!it_started)
 8000a92:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <move_async+0x78>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d107      	bne.n	8000aaa <move_async+0x5e>
	{
		it_started = 1;
 8000a9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <move_async+0x78>)
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim11);
 8000aa0:	4809      	ldr	r0, [pc, #36]	; (8000ac8 <move_async+0x7c>)
 8000aa2:	f002 fd93 	bl	80035cc <HAL_TIM_Base_Start_IT>
 8000aa6:	e000      	b.n	8000aaa <move_async+0x5e>
		return;
 8000aa8:	bf00      	nop
	}
}
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	200003b4 	.word	0x200003b4
 8000ab4:	200003a4 	.word	0x200003a4
 8000ab8:	200003b8 	.word	0x200003b8
 8000abc:	200003a8 	.word	0x200003a8
 8000ac0:	200003ac 	.word	0x200003ac
 8000ac4:	200003b0 	.word	0x200003b0
 8000ac8:	2000025c 	.word	0x2000025c

08000acc <prepare_nospin>:

void prepare_nospin()
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
	TIM3->CCR1 = 0;
 8000ad0:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <prepare_nospin+0x2c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = 800;
 8000ad6:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <prepare_nospin+0x2c>)
 8000ad8:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000adc:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CCR3 = 0;
 8000ade:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <prepare_nospin+0x2c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM3->CCR4 = 800;
 8000ae4:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <prepare_nospin+0x2c>)
 8000ae6:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000aea:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	40000400 	.word	0x40000400

08000afc <prepare_full>:
void prepare_full()
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
	TIM3->CCR1 = 0;
 8000b00:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <prepare_full+0x2c>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = 1999;
 8000b06:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <prepare_full+0x2c>)
 8000b08:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000b0c:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CCR3 = 0;
 8000b0e:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <prepare_full+0x2c>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM3->CCR4 = 1999;
 8000b14:	4b04      	ldr	r3, [pc, #16]	; (8000b28 <prepare_full+0x2c>)
 8000b16:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000b1a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	40000400 	.word	0x40000400

08000b2c <prepare_topspin>:
void prepare_topspin()
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
	TIM3->CCR1 = 0;
 8000b30:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <prepare_topspin+0x2c>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR2 = 499;
 8000b36:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <prepare_topspin+0x2c>)
 8000b38:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000b3c:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR3 = 0;
 8000b3e:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <prepare_topspin+0x2c>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM3->CCR4 = 1299;
 8000b44:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <prepare_topspin+0x2c>)
 8000b46:	f240 5213 	movw	r2, #1299	; 0x513
 8000b4a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	40000400 	.word	0x40000400

08000b5c <prepare_underspin>:
void prepare_underspin()
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
	TIM3->CCR1 = 0;
 8000b60:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <prepare_underspin+0x2c>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	635a      	str	r2, [r3, #52]	; 0x34
	 TIM3->CCR2 = 1299;
 8000b66:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <prepare_underspin+0x2c>)
 8000b68:	f240 5213 	movw	r2, #1299	; 0x513
 8000b6c:	639a      	str	r2, [r3, #56]	; 0x38
	 TIM3->CCR3 = 0;
 8000b6e:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <prepare_underspin+0x2c>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	63da      	str	r2, [r3, #60]	; 0x3c
	 TIM3->CCR4 = 499;
 8000b74:	4b04      	ldr	r3, [pc, #16]	; (8000b88 <prepare_underspin+0x2c>)
 8000b76:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000b7a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	40000400 	.word	0x40000400

08000b8c <shut_down>:
void shut_down()
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
	TIM3->CCR1 = 0;
 8000b90:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <shut_down+0x28>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR2 = 0;
 8000b96:	4b07      	ldr	r3, [pc, #28]	; (8000bb4 <shut_down+0x28>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR3 = 0;
 8000b9c:	4b05      	ldr	r3, [pc, #20]	; (8000bb4 <shut_down+0x28>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM3->CCR4 = 0;
 8000ba2:	4b04      	ldr	r3, [pc, #16]	; (8000bb4 <shut_down+0x28>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	40000400 	.word	0x40000400

08000bb8 <shoot_async>:
uint8_t rx_blocks_buff[20];

void detect_object_location(void);
void capture_and_update(void);
void shoot_async()
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0

	TIM2->CCR1 = PINCH_FORWARD_CCR;
 8000bbc:	4b07      	ldr	r3, [pc, #28]	; (8000bdc <shoot_async+0x24>)
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bc4:	635a      	str	r2, [r3, #52]	; 0x34
	FIX_TIMER_TRIGGER(&htim10);
 8000bc6:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <shoot_async+0x28>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f06f 0201 	mvn.w	r2, #1
 8000bce:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(&htim10);
 8000bd0:	4803      	ldr	r0, [pc, #12]	; (8000be0 <shoot_async+0x28>)
 8000bd2:	f002 fcfb 	bl	80035cc <HAL_TIM_Base_Start_IT>
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000000 	.word	0x20000000
 8000be0:	20000214 	.word	0x20000214

08000be4 <auto_move_func>:



void auto_move_func()
{
 8000be4:	b5b0      	push	{r4, r5, r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
	if (auto_mode_on == 0)
 8000bea:	4b69      	ldr	r3, [pc, #420]	; (8000d90 <auto_move_func+0x1ac>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	f000 80c7 	beq.w	8000d82 <auto_move_func+0x19e>
	{
		return;
	}
	prepare_topspin();
 8000bf4:	f7ff ff9a 	bl	8000b2c <prepare_topspin>
	HAL_Delay(5000);
 8000bf8:	f241 3088 	movw	r0, #5000	; 0x1388
 8000bfc:	f001 fc68 	bl	80024d0 <HAL_Delay>
	int rotates[] = {1, 0, 1, 1, 0, 0, 1, 0};
 8000c00:	4b64      	ldr	r3, [pc, #400]	; (8000d94 <auto_move_func+0x1b0>)
 8000c02:	1d3c      	adds	r4, r7, #4
 8000c04:	461d      	mov	r5, r3
 8000c06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c0a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000c0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	static int rotate_index = 0;
	if (auto_mode_on == 0)
 8000c12:	4b5f      	ldr	r3, [pc, #380]	; (8000d90 <auto_move_func+0x1ac>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	f000 80b5 	beq.w	8000d86 <auto_move_func+0x1a2>
	{
		return;
	}
	move_async(5, 320);
 8000c1c:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000c20:	2005      	movs	r0, #5
 8000c22:	f7ff ff13 	bl	8000a4c <move_async>
	to_delay = 500;
 8000c26:	4b5c      	ldr	r3, [pc, #368]	; (8000d98 <auto_move_func+0x1b4>)
 8000c28:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000c2c:	601a      	str	r2, [r3, #0]
	move_async(0, 1000);
 8000c2e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c32:	2000      	movs	r0, #0
 8000c34:	f7ff ff0a 	bl	8000a4c <move_async>
	to_delay = 500;
 8000c38:	4b57      	ldr	r3, [pc, #348]	; (8000d98 <auto_move_func+0x1b4>)
 8000c3a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000c3e:	601a      	str	r2, [r3, #0]
	move_async(4, 320);
 8000c40:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000c44:	2004      	movs	r0, #4
 8000c46:	f7ff ff01 	bl	8000a4c <move_async>
	int rotate = rotates[rotate_index++];
 8000c4a:	4b54      	ldr	r3, [pc, #336]	; (8000d9c <auto_move_func+0x1b8>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	1c5a      	adds	r2, r3, #1
 8000c50:	4952      	ldr	r1, [pc, #328]	; (8000d9c <auto_move_func+0x1b8>)
 8000c52:	600a      	str	r2, [r1, #0]
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	3328      	adds	r3, #40	; 0x28
 8000c58:	443b      	add	r3, r7
 8000c5a:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
	if (rotate_index ==8)
 8000c60:	4b4e      	ldr	r3, [pc, #312]	; (8000d9c <auto_move_func+0x1b8>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2b08      	cmp	r3, #8
 8000c66:	d102      	bne.n	8000c6e <auto_move_func+0x8a>
	{
		rotate_index = 0;
 8000c68:	4b4c      	ldr	r3, [pc, #304]	; (8000d9c <auto_move_func+0x1b8>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
	}
	capture_and_update();
 8000c6e:	f000 ff17 	bl	8001aa0 <capture_and_update>
	if (state == TO_LEFT || rotate)
 8000c72:	4b4b      	ldr	r3, [pc, #300]	; (8000da0 <auto_move_func+0x1bc>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b03      	cmp	r3, #3
 8000c78:	d002      	beq.n	8000c80 <auto_move_func+0x9c>
 8000c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d007      	beq.n	8000c90 <auto_move_func+0xac>
	{
		to_delay = 500;
 8000c80:	4b45      	ldr	r3, [pc, #276]	; (8000d98 <auto_move_func+0x1b4>)
 8000c82:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000c86:	601a      	str	r2, [r3, #0]
		move_async(4, 70);
 8000c88:	2146      	movs	r1, #70	; 0x46
 8000c8a:	2004      	movs	r0, #4
 8000c8c:	f7ff fede 	bl	8000a4c <move_async>
	}
	to_delay = 500;
 8000c90:	4b41      	ldr	r3, [pc, #260]	; (8000d98 <auto_move_func+0x1b4>)
 8000c92:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000c96:	601a      	str	r2, [r3, #0]
	move_async(1, 1);
 8000c98:	2101      	movs	r1, #1
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	f7ff fed6 	bl	8000a4c <move_async>
	shoot_async();
 8000ca0:	f7ff ff8a 	bl	8000bb8 <shoot_async>
	if (state == TO_LEFT || rotate)
 8000ca4:	4b3e      	ldr	r3, [pc, #248]	; (8000da0 <auto_move_func+0x1bc>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	2b03      	cmp	r3, #3
 8000caa:	d002      	beq.n	8000cb2 <auto_move_func+0xce>
 8000cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d007      	beq.n	8000cc2 <auto_move_func+0xde>
	{
		to_delay = 500;
 8000cb2:	4b39      	ldr	r3, [pc, #228]	; (8000d98 <auto_move_func+0x1b4>)
 8000cb4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000cb8:	601a      	str	r2, [r3, #0]
		move_async(5, 70);
 8000cba:	2146      	movs	r1, #70	; 0x46
 8000cbc:	2005      	movs	r0, #5
 8000cbe:	f7ff fec5 	bl	8000a4c <move_async>
	}
	to_delay = 500;
 8000cc2:	4b35      	ldr	r3, [pc, #212]	; (8000d98 <auto_move_func+0x1b4>)
 8000cc4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000cc8:	601a      	str	r2, [r3, #0]
	move_async(4, 320);
 8000cca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000cce:	2004      	movs	r0, #4
 8000cd0:	f7ff febc 	bl	8000a4c <move_async>
	to_delay = 500;
 8000cd4:	4b30      	ldr	r3, [pc, #192]	; (8000d98 <auto_move_func+0x1b4>)
 8000cd6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000cda:	601a      	str	r2, [r3, #0]
	move_async(0, 1000);
 8000cdc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ce0:	2000      	movs	r0, #0
 8000ce2:	f7ff feb3 	bl	8000a4c <move_async>
	to_delay = 500;
 8000ce6:	4b2c      	ldr	r3, [pc, #176]	; (8000d98 <auto_move_func+0x1b4>)
 8000ce8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000cec:	601a      	str	r2, [r3, #0]
	move_async(5, 320);
 8000cee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000cf2:	2005      	movs	r0, #5
 8000cf4:	f7ff feaa 	bl	8000a4c <move_async>
	to_delay = 500;
 8000cf8:	4b27      	ldr	r3, [pc, #156]	; (8000d98 <auto_move_func+0x1b4>)
 8000cfa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000cfe:	601a      	str	r2, [r3, #0]
	rotate = rotates[rotate_index++];
 8000d00:	4b26      	ldr	r3, [pc, #152]	; (8000d9c <auto_move_func+0x1b8>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	1c5a      	adds	r2, r3, #1
 8000d06:	4925      	ldr	r1, [pc, #148]	; (8000d9c <auto_move_func+0x1b8>)
 8000d08:	600a      	str	r2, [r1, #0]
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	3328      	adds	r3, #40	; 0x28
 8000d0e:	443b      	add	r3, r7
 8000d10:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8000d14:	627b      	str	r3, [r7, #36]	; 0x24
	if (rotate_index ==8)
 8000d16:	4b21      	ldr	r3, [pc, #132]	; (8000d9c <auto_move_func+0x1b8>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	2b08      	cmp	r3, #8
 8000d1c:	d102      	bne.n	8000d24 <auto_move_func+0x140>
	{
		rotate_index = 0;
 8000d1e:	4b1f      	ldr	r3, [pc, #124]	; (8000d9c <auto_move_func+0x1b8>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
	}
	capture_and_update();
 8000d24:	f000 febc 	bl	8001aa0 <capture_and_update>
	if (state == TO_RIGHT || rotate)
 8000d28:	4b1d      	ldr	r3, [pc, #116]	; (8000da0 <auto_move_func+0x1bc>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	2b04      	cmp	r3, #4
 8000d2e:	d002      	beq.n	8000d36 <auto_move_func+0x152>
 8000d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d007      	beq.n	8000d46 <auto_move_func+0x162>
	{
		to_delay = 500;
 8000d36:	4b18      	ldr	r3, [pc, #96]	; (8000d98 <auto_move_func+0x1b4>)
 8000d38:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000d3c:	601a      	str	r2, [r3, #0]
		move_async(5, 70);
 8000d3e:	2146      	movs	r1, #70	; 0x46
 8000d40:	2005      	movs	r0, #5
 8000d42:	f7ff fe83 	bl	8000a4c <move_async>
	}
	to_delay = 500;
 8000d46:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <auto_move_func+0x1b4>)
 8000d48:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000d4c:	601a      	str	r2, [r3, #0]
	move_async(0, 1);
 8000d4e:	2101      	movs	r1, #1
 8000d50:	2000      	movs	r0, #0
 8000d52:	f7ff fe7b 	bl	8000a4c <move_async>
	shoot_async();
 8000d56:	f7ff ff2f 	bl	8000bb8 <shoot_async>

	if (state == TO_RIGHT || rotate)
 8000d5a:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <auto_move_func+0x1bc>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	2b04      	cmp	r3, #4
 8000d60:	d002      	beq.n	8000d68 <auto_move_func+0x184>
 8000d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d007      	beq.n	8000d78 <auto_move_func+0x194>
	{
		to_delay = 500;
 8000d68:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <auto_move_func+0x1b4>)
 8000d6a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000d6e:	601a      	str	r2, [r3, #0]
		move_async(4, 70);
 8000d70:	2146      	movs	r1, #70	; 0x46
 8000d72:	2004      	movs	r0, #4
 8000d74:	f7ff fe6a 	bl	8000a4c <move_async>
	}
	to_delay = 300;
 8000d78:	4b07      	ldr	r3, [pc, #28]	; (8000d98 <auto_move_func+0x1b4>)
 8000d7a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	e002      	b.n	8000d88 <auto_move_func+0x1a4>
		return;
 8000d82:	bf00      	nop
 8000d84:	e000      	b.n	8000d88 <auto_move_func+0x1a4>
		return;
 8000d86:	bf00      	nop
//	  rotate_and_shoot();
//	  HAL_Delay(500);
//	  move_async(3, 200);
//	  rotate_and_shoot();
//	  HAL_Delay(500);
}
 8000d88:	3728      	adds	r7, #40	; 0x28
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bdb0      	pop	{r4, r5, r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	200003b4 	.word	0x200003b4
 8000d94:	080067c0 	.word	0x080067c0
 8000d98:	200003b8 	.word	0x200003b8
 8000d9c:	200003dc 	.word	0x200003dc
 8000da0:	200000a4 	.word	0x200000a4

08000da4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000da8:	f001 fb20 	bl	80023ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dac:	f000 f874 	bl	8000e98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000db0:	f000 fbbe 	bl	8001530 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000db4:	f000 fb68 	bl	8001488 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000db8:	f000 fb90 	bl	80014dc <MX_USART6_UART_Init>
  MX_TIM11_Init();
 8000dbc:	f000 fb16 	bl	80013ec <MX_TIM11_Init>
  MX_TIM2_Init();
 8000dc0:	f000 f8d6 	bl	8000f70 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000dc4:	f000 f956 	bl	8001074 <MX_TIM3_Init>
  MX_TIM10_Init();
 8000dc8:	f000 faec 	bl	80013a4 <MX_TIM10_Init>
  MX_TIM4_Init();
 8000dcc:	f000 f9ea 	bl	80011a4 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000dd0:	f000 fa60 	bl	8001294 <MX_TIM5_Init>
  MX_TIM9_Init();
 8000dd4:	f000 faac 	bl	8001330 <MX_TIM9_Init>
  MX_USART1_UART_Init();
 8000dd8:	f000 fb2c 	bl	8001434 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  // HAL_TIM_Base_Start_IT(&htim10);
  HAL_UART_Receive_IT(&huart6, &answer, 1);
 8000ddc:	2201      	movs	r2, #1
 8000dde:	4924      	ldr	r1, [pc, #144]	; (8000e70 <main+0xcc>)
 8000de0:	4824      	ldr	r0, [pc, #144]	; (8000e74 <main+0xd0>)
 8000de2:	f003 fcfb 	bl	80047dc <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, &number, 1);
 8000de6:	2201      	movs	r2, #1
 8000de8:	4923      	ldr	r1, [pc, #140]	; (8000e78 <main+0xd4>)
 8000dea:	4824      	ldr	r0, [pc, #144]	; (8000e7c <main+0xd8>)
 8000dec:	f003 fcf6 	bl	80047dc <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000df0:	2100      	movs	r1, #0
 8000df2:	4823      	ldr	r0, [pc, #140]	; (8000e80 <main+0xdc>)
 8000df4:	f002 fcd4 	bl	80037a0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000df8:	2104      	movs	r1, #4
 8000dfa:	4821      	ldr	r0, [pc, #132]	; (8000e80 <main+0xdc>)
 8000dfc:	f002 fcd0 	bl	80037a0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000e00:	2100      	movs	r1, #0
 8000e02:	4820      	ldr	r0, [pc, #128]	; (8000e84 <main+0xe0>)
 8000e04:	f002 fccc 	bl	80037a0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000e08:	2104      	movs	r1, #4
 8000e0a:	481e      	ldr	r0, [pc, #120]	; (8000e84 <main+0xe0>)
 8000e0c:	f002 fcc8 	bl	80037a0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000e10:	2108      	movs	r1, #8
 8000e12:	481c      	ldr	r0, [pc, #112]	; (8000e84 <main+0xe0>)
 8000e14:	f002 fcc4 	bl	80037a0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000e18:	210c      	movs	r1, #12
 8000e1a:	481a      	ldr	r0, [pc, #104]	; (8000e84 <main+0xe0>)
 8000e1c:	f002 fcc0 	bl	80037a0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000e20:	2100      	movs	r1, #0
 8000e22:	4819      	ldr	r0, [pc, #100]	; (8000e88 <main+0xe4>)
 8000e24:	f002 fcbc 	bl	80037a0 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // HAL_GPIO_WritePin(ENABLE_GPIO, ENABLE_PIN, 1);
  HAL_GPIO_WritePin(DIR1_GPIO, DIR1_PIN, 0);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e2e:	4817      	ldr	r0, [pc, #92]	; (8000e8c <main+0xe8>)
 8000e30:	f001 feb2 	bl	8002b98 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DIR2_GPIO, DIR2_PIN, 0);
 8000e34:	2200      	movs	r2, #0
 8000e36:	2110      	movs	r1, #16
 8000e38:	4814      	ldr	r0, [pc, #80]	; (8000e8c <main+0xe8>)
 8000e3a:	f001 fead 	bl	8002b98 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DIR3_GPIO, DIR3_PIN, 0);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2120      	movs	r1, #32
 8000e42:	4812      	ldr	r0, [pc, #72]	; (8000e8c <main+0xe8>)
 8000e44:	f001 fea8 	bl	8002b98 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DIR4_GPIO, DIR4_PIN, 0);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2108      	movs	r1, #8
 8000e4c:	480f      	ldr	r0, [pc, #60]	; (8000e8c <main+0xe8>)
 8000e4e:	f001 fea3 	bl	8002b98 <HAL_GPIO_WritePin>

  disable();
 8000e52:	f7ff fc65 	bl	8000720 <disable>

  auto_enable = 1;
 8000e56:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <main+0xec>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	601a      	str	r2, [r3, #0]
	  // HAL_GPIO_WritePin(STEP_GPIO, STEP_PIN, 1);
	  // HAL_Delay(100);
	  // HAL_GPIO_WritePin(STEP_GPIO, STEP_PIN, 0);
	  // HAL_Delay(100);

	  printf("hello world!\n");
 8000e5c:	480d      	ldr	r0, [pc, #52]	; (8000e94 <main+0xf0>)
 8000e5e:	f004 fdf9 	bl	8005a54 <puts>
	  auto_move_func();
 8000e62:	f7ff febf 	bl	8000be4 <auto_move_func>
	  HAL_Delay(200);
 8000e66:	20c8      	movs	r0, #200	; 0xc8
 8000e68:	f001 fb32 	bl	80024d0 <HAL_Delay>
	  printf("hello world!\n");
 8000e6c:	e7f6      	b.n	8000e5c <main+0xb8>
 8000e6e:	bf00      	nop
 8000e70:	2000037c 	.word	0x2000037c
 8000e74:	20000334 	.word	0x20000334
 8000e78:	200003bc 	.word	0x200003bc
 8000e7c:	200002ec 	.word	0x200002ec
 8000e80:	200000ac 	.word	0x200000ac
 8000e84:	200000f4 	.word	0x200000f4
 8000e88:	2000013c 	.word	0x2000013c
 8000e8c:	40020400 	.word	0x40020400
 8000e90:	200000a8 	.word	0x200000a8
 8000e94:	080067e0 	.word	0x080067e0

08000e98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b094      	sub	sp, #80	; 0x50
 8000e9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e9e:	f107 0320 	add.w	r3, r7, #32
 8000ea2:	2230      	movs	r2, #48	; 0x30
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f004 feb4 	bl	8005c14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eac:	f107 030c 	add.w	r3, r7, #12
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	60bb      	str	r3, [r7, #8]
 8000ec0:	4b29      	ldr	r3, [pc, #164]	; (8000f68 <SystemClock_Config+0xd0>)
 8000ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec4:	4a28      	ldr	r2, [pc, #160]	; (8000f68 <SystemClock_Config+0xd0>)
 8000ec6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eca:	6413      	str	r3, [r2, #64]	; 0x40
 8000ecc:	4b26      	ldr	r3, [pc, #152]	; (8000f68 <SystemClock_Config+0xd0>)
 8000ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed4:	60bb      	str	r3, [r7, #8]
 8000ed6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ed8:	2300      	movs	r3, #0
 8000eda:	607b      	str	r3, [r7, #4]
 8000edc:	4b23      	ldr	r3, [pc, #140]	; (8000f6c <SystemClock_Config+0xd4>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ee4:	4a21      	ldr	r2, [pc, #132]	; (8000f6c <SystemClock_Config+0xd4>)
 8000ee6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000eea:	6013      	str	r3, [r2, #0]
 8000eec:	4b1f      	ldr	r3, [pc, #124]	; (8000f6c <SystemClock_Config+0xd4>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ef4:	607b      	str	r3, [r7, #4]
 8000ef6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000efc:	2301      	movs	r3, #1
 8000efe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f00:	2310      	movs	r3, #16
 8000f02:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f04:	2302      	movs	r3, #2
 8000f06:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000f0c:	2310      	movs	r3, #16
 8000f0e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f10:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f14:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f16:	2304      	movs	r3, #4
 8000f18:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f1a:	2307      	movs	r3, #7
 8000f1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f1e:	f107 0320 	add.w	r3, r7, #32
 8000f22:	4618      	mov	r0, r3
 8000f24:	f001 fe6a 	bl	8002bfc <HAL_RCC_OscConfig>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000f2e:	f000 fe6d 	bl	8001c0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f32:	230f      	movs	r3, #15
 8000f34:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f36:	2302      	movs	r3, #2
 8000f38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f42:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f44:	2300      	movs	r3, #0
 8000f46:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f48:	f107 030c 	add.w	r3, r7, #12
 8000f4c:	2102      	movs	r1, #2
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f002 f8cc 	bl	80030ec <HAL_RCC_ClockConfig>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000f5a:	f000 fe57 	bl	8001c0c <Error_Handler>
  }
}
 8000f5e:	bf00      	nop
 8000f60:	3750      	adds	r7, #80	; 0x50
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40007000 	.word	0x40007000

08000f70 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08e      	sub	sp, #56	; 0x38
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	609a      	str	r2, [r3, #8]
 8000f82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f84:	f107 0320 	add.w	r3, r7, #32
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f8e:	1d3b      	adds	r3, r7, #4
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
 8000f9c:	615a      	str	r2, [r3, #20]
 8000f9e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fa0:	4b33      	ldr	r3, [pc, #204]	; (8001070 <MX_TIM2_Init+0x100>)
 8000fa2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fa6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 419;
 8000fa8:	4b31      	ldr	r3, [pc, #196]	; (8001070 <MX_TIM2_Init+0x100>)
 8000faa:	f240 12a3 	movw	r2, #419	; 0x1a3
 8000fae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb0:	4b2f      	ldr	r3, [pc, #188]	; (8001070 <MX_TIM2_Init+0x100>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 8000fb6:	4b2e      	ldr	r3, [pc, #184]	; (8001070 <MX_TIM2_Init+0x100>)
 8000fb8:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000fbc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fbe:	4b2c      	ldr	r3, [pc, #176]	; (8001070 <MX_TIM2_Init+0x100>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fc4:	4b2a      	ldr	r3, [pc, #168]	; (8001070 <MX_TIM2_Init+0x100>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fca:	4829      	ldr	r0, [pc, #164]	; (8001070 <MX_TIM2_Init+0x100>)
 8000fcc:	f002 faae 	bl	800352c <HAL_TIM_Base_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000fd6:	f000 fe19 	bl	8001c0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fde:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fe0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4822      	ldr	r0, [pc, #136]	; (8001070 <MX_TIM2_Init+0x100>)
 8000fe8:	f002 fe3c 	bl	8003c64 <HAL_TIM_ConfigClockSource>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000ff2:	f000 fe0b 	bl	8001c0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ff6:	481e      	ldr	r0, [pc, #120]	; (8001070 <MX_TIM2_Init+0x100>)
 8000ff8:	f002 fb79 	bl	80036ee <HAL_TIM_PWM_Init>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001002:	f000 fe03 	bl	8001c0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001006:	2300      	movs	r3, #0
 8001008:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800100a:	2300      	movs	r3, #0
 800100c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800100e:	f107 0320 	add.w	r3, r7, #32
 8001012:	4619      	mov	r1, r3
 8001014:	4816      	ldr	r0, [pc, #88]	; (8001070 <MX_TIM2_Init+0x100>)
 8001016:	f003 f9ed 	bl	80043f4 <HAL_TIMEx_MasterConfigSynchronization>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001020:	f000 fdf4 	bl	8001c0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001024:	2360      	movs	r3, #96	; 0x60
 8001026:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800102c:	2300      	movs	r3, #0
 800102e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001034:	1d3b      	adds	r3, r7, #4
 8001036:	2200      	movs	r2, #0
 8001038:	4619      	mov	r1, r3
 800103a:	480d      	ldr	r0, [pc, #52]	; (8001070 <MX_TIM2_Init+0x100>)
 800103c:	f002 fd50 	bl	8003ae0 <HAL_TIM_PWM_ConfigChannel>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001046:	f000 fde1 	bl	8001c0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	2204      	movs	r2, #4
 800104e:	4619      	mov	r1, r3
 8001050:	4807      	ldr	r0, [pc, #28]	; (8001070 <MX_TIM2_Init+0x100>)
 8001052:	f002 fd45 	bl	8003ae0 <HAL_TIM_PWM_ConfigChannel>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 800105c:	f000 fdd6 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001060:	4803      	ldr	r0, [pc, #12]	; (8001070 <MX_TIM2_Init+0x100>)
 8001062:	f000 fec3 	bl	8001dec <HAL_TIM_MspPostInit>

}
 8001066:	bf00      	nop
 8001068:	3738      	adds	r7, #56	; 0x38
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	200000ac 	.word	0x200000ac

08001074 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08e      	sub	sp, #56	; 0x38
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800107a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	609a      	str	r2, [r3, #8]
 8001086:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001088:	f107 0320 	add.w	r3, r7, #32
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]
 80010a0:	615a      	str	r2, [r3, #20]
 80010a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010a4:	4b3d      	ldr	r3, [pc, #244]	; (800119c <MX_TIM3_Init+0x128>)
 80010a6:	4a3e      	ldr	r2, [pc, #248]	; (80011a0 <MX_TIM3_Init+0x12c>)
 80010a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 419;
 80010aa:	4b3c      	ldr	r3, [pc, #240]	; (800119c <MX_TIM3_Init+0x128>)
 80010ac:	f240 12a3 	movw	r2, #419	; 0x1a3
 80010b0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b2:	4b3a      	ldr	r3, [pc, #232]	; (800119c <MX_TIM3_Init+0x128>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 80010b8:	4b38      	ldr	r3, [pc, #224]	; (800119c <MX_TIM3_Init+0x128>)
 80010ba:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80010be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c0:	4b36      	ldr	r3, [pc, #216]	; (800119c <MX_TIM3_Init+0x128>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010c6:	4b35      	ldr	r3, [pc, #212]	; (800119c <MX_TIM3_Init+0x128>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010cc:	4833      	ldr	r0, [pc, #204]	; (800119c <MX_TIM3_Init+0x128>)
 80010ce:	f002 fa2d 	bl	800352c <HAL_TIM_Base_Init>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80010d8:	f000 fd98 	bl	8001c0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010e6:	4619      	mov	r1, r3
 80010e8:	482c      	ldr	r0, [pc, #176]	; (800119c <MX_TIM3_Init+0x128>)
 80010ea:	f002 fdbb 	bl	8003c64 <HAL_TIM_ConfigClockSource>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80010f4:	f000 fd8a 	bl	8001c0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80010f8:	4828      	ldr	r0, [pc, #160]	; (800119c <MX_TIM3_Init+0x128>)
 80010fa:	f002 faf8 	bl	80036ee <HAL_TIM_PWM_Init>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001104:	f000 fd82 	bl	8001c0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001108:	2300      	movs	r3, #0
 800110a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800110c:	2300      	movs	r3, #0
 800110e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001110:	f107 0320 	add.w	r3, r7, #32
 8001114:	4619      	mov	r1, r3
 8001116:	4821      	ldr	r0, [pc, #132]	; (800119c <MX_TIM3_Init+0x128>)
 8001118:	f003 f96c 	bl	80043f4 <HAL_TIMEx_MasterConfigSynchronization>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001122:	f000 fd73 	bl	8001c0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001126:	2360      	movs	r3, #96	; 0x60
 8001128:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800112a:	2300      	movs	r3, #0
 800112c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001132:	2300      	movs	r3, #0
 8001134:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	2200      	movs	r2, #0
 800113a:	4619      	mov	r1, r3
 800113c:	4817      	ldr	r0, [pc, #92]	; (800119c <MX_TIM3_Init+0x128>)
 800113e:	f002 fccf 	bl	8003ae0 <HAL_TIM_PWM_ConfigChannel>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001148:	f000 fd60 	bl	8001c0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800114c:	1d3b      	adds	r3, r7, #4
 800114e:	2204      	movs	r2, #4
 8001150:	4619      	mov	r1, r3
 8001152:	4812      	ldr	r0, [pc, #72]	; (800119c <MX_TIM3_Init+0x128>)
 8001154:	f002 fcc4 	bl	8003ae0 <HAL_TIM_PWM_ConfigChannel>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800115e:	f000 fd55 	bl	8001c0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	2208      	movs	r2, #8
 8001166:	4619      	mov	r1, r3
 8001168:	480c      	ldr	r0, [pc, #48]	; (800119c <MX_TIM3_Init+0x128>)
 800116a:	f002 fcb9 	bl	8003ae0 <HAL_TIM_PWM_ConfigChannel>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001174:	f000 fd4a 	bl	8001c0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	220c      	movs	r2, #12
 800117c:	4619      	mov	r1, r3
 800117e:	4807      	ldr	r0, [pc, #28]	; (800119c <MX_TIM3_Init+0x128>)
 8001180:	f002 fcae 	bl	8003ae0 <HAL_TIM_PWM_ConfigChannel>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 800118a:	f000 fd3f 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800118e:	4803      	ldr	r0, [pc, #12]	; (800119c <MX_TIM3_Init+0x128>)
 8001190:	f000 fe2c 	bl	8001dec <HAL_TIM_MspPostInit>

}
 8001194:	bf00      	nop
 8001196:	3738      	adds	r7, #56	; 0x38
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	200000f4 	.word	0x200000f4
 80011a0:	40000400 	.word	0x40000400

080011a4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08e      	sub	sp, #56	; 0x38
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	609a      	str	r2, [r3, #8]
 80011b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b8:	f107 0320 	add.w	r3, r7, #32
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011c2:	1d3b      	adds	r3, r7, #4
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
 80011d0:	615a      	str	r2, [r3, #20]
 80011d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011d4:	4b2d      	ldr	r3, [pc, #180]	; (800128c <MX_TIM4_Init+0xe8>)
 80011d6:	4a2e      	ldr	r2, [pc, #184]	; (8001290 <MX_TIM4_Init+0xec>)
 80011d8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 839;
 80011da:	4b2c      	ldr	r3, [pc, #176]	; (800128c <MX_TIM4_Init+0xe8>)
 80011dc:	f240 3247 	movw	r2, #839	; 0x347
 80011e0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e2:	4b2a      	ldr	r3, [pc, #168]	; (800128c <MX_TIM4_Init+0xe8>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3999;
 80011e8:	4b28      	ldr	r3, [pc, #160]	; (800128c <MX_TIM4_Init+0xe8>)
 80011ea:	f640 729f 	movw	r2, #3999	; 0xf9f
 80011ee:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f0:	4b26      	ldr	r3, [pc, #152]	; (800128c <MX_TIM4_Init+0xe8>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f6:	4b25      	ldr	r3, [pc, #148]	; (800128c <MX_TIM4_Init+0xe8>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80011fc:	4823      	ldr	r0, [pc, #140]	; (800128c <MX_TIM4_Init+0xe8>)
 80011fe:	f002 f995 	bl	800352c <HAL_TIM_Base_Init>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001208:	f000 fd00 	bl	8001c0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800120c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001210:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001212:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001216:	4619      	mov	r1, r3
 8001218:	481c      	ldr	r0, [pc, #112]	; (800128c <MX_TIM4_Init+0xe8>)
 800121a:	f002 fd23 	bl	8003c64 <HAL_TIM_ConfigClockSource>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001224:	f000 fcf2 	bl	8001c0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001228:	4818      	ldr	r0, [pc, #96]	; (800128c <MX_TIM4_Init+0xe8>)
 800122a:	f002 fa60 	bl	80036ee <HAL_TIM_PWM_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001234:	f000 fcea 	bl	8001c0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001238:	2300      	movs	r3, #0
 800123a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800123c:	2300      	movs	r3, #0
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001240:	f107 0320 	add.w	r3, r7, #32
 8001244:	4619      	mov	r1, r3
 8001246:	4811      	ldr	r0, [pc, #68]	; (800128c <MX_TIM4_Init+0xe8>)
 8001248:	f003 f8d4 	bl	80043f4 <HAL_TIMEx_MasterConfigSynchronization>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001252:	f000 fcdb 	bl	8001c0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001256:	2360      	movs	r3, #96	; 0x60
 8001258:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2;
 800125a:	2302      	movs	r3, #2
 800125c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	2200      	movs	r2, #0
 800126a:	4619      	mov	r1, r3
 800126c:	4807      	ldr	r0, [pc, #28]	; (800128c <MX_TIM4_Init+0xe8>)
 800126e:	f002 fc37 	bl	8003ae0 <HAL_TIM_PWM_ConfigChannel>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001278:	f000 fcc8 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800127c:	4803      	ldr	r0, [pc, #12]	; (800128c <MX_TIM4_Init+0xe8>)
 800127e:	f000 fdb5 	bl	8001dec <HAL_TIM_MspPostInit>

}
 8001282:	bf00      	nop
 8001284:	3738      	adds	r7, #56	; 0x38
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	2000013c 	.word	0x2000013c
 8001290:	40000800 	.word	0x40000800

08001294 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800129a:	f107 0308 	add.w	r3, r7, #8
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	609a      	str	r2, [r3, #8]
 80012a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a8:	463b      	mov	r3, r7
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80012b0:	4b1d      	ldr	r3, [pc, #116]	; (8001328 <MX_TIM5_Init+0x94>)
 80012b2:	4a1e      	ldr	r2, [pc, #120]	; (800132c <MX_TIM5_Init+0x98>)
 80012b4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 80012b6:	4b1c      	ldr	r3, [pc, #112]	; (8001328 <MX_TIM5_Init+0x94>)
 80012b8:	2253      	movs	r2, #83	; 0x53
 80012ba:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012bc:	4b1a      	ldr	r3, [pc, #104]	; (8001328 <MX_TIM5_Init+0x94>)
 80012be:	2200      	movs	r2, #0
 80012c0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 3999;
 80012c2:	4b19      	ldr	r3, [pc, #100]	; (8001328 <MX_TIM5_Init+0x94>)
 80012c4:	f640 729f 	movw	r2, #3999	; 0xf9f
 80012c8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ca:	4b17      	ldr	r3, [pc, #92]	; (8001328 <MX_TIM5_Init+0x94>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d0:	4b15      	ldr	r3, [pc, #84]	; (8001328 <MX_TIM5_Init+0x94>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80012d6:	4814      	ldr	r0, [pc, #80]	; (8001328 <MX_TIM5_Init+0x94>)
 80012d8:	f002 f928 	bl	800352c <HAL_TIM_Base_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80012e2:	f000 fc93 	bl	8001c0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80012ec:	f107 0308 	add.w	r3, r7, #8
 80012f0:	4619      	mov	r1, r3
 80012f2:	480d      	ldr	r0, [pc, #52]	; (8001328 <MX_TIM5_Init+0x94>)
 80012f4:	f002 fcb6 	bl	8003c64 <HAL_TIM_ConfigClockSource>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80012fe:	f000 fc85 	bl	8001c0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001302:	2300      	movs	r3, #0
 8001304:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001306:	2300      	movs	r3, #0
 8001308:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800130a:	463b      	mov	r3, r7
 800130c:	4619      	mov	r1, r3
 800130e:	4806      	ldr	r0, [pc, #24]	; (8001328 <MX_TIM5_Init+0x94>)
 8001310:	f003 f870 	bl	80043f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800131a:	f000 fc77 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800131e:	bf00      	nop
 8001320:	3718      	adds	r7, #24
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000184 	.word	0x20000184
 800132c:	40000c00 	.word	0x40000c00

08001330 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001336:	463b      	mov	r3, r7
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001342:	4b16      	ldr	r3, [pc, #88]	; (800139c <MX_TIM9_Init+0x6c>)
 8001344:	4a16      	ldr	r2, [pc, #88]	; (80013a0 <MX_TIM9_Init+0x70>)
 8001346:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 8399;
 8001348:	4b14      	ldr	r3, [pc, #80]	; (800139c <MX_TIM9_Init+0x6c>)
 800134a:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800134e:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001350:	4b12      	ldr	r3, [pc, #72]	; (800139c <MX_TIM9_Init+0x6c>)
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 2499;
 8001356:	4b11      	ldr	r3, [pc, #68]	; (800139c <MX_TIM9_Init+0x6c>)
 8001358:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800135c:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800135e:	4b0f      	ldr	r3, [pc, #60]	; (800139c <MX_TIM9_Init+0x6c>)
 8001360:	2200      	movs	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001364:	4b0d      	ldr	r3, [pc, #52]	; (800139c <MX_TIM9_Init+0x6c>)
 8001366:	2200      	movs	r2, #0
 8001368:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800136a:	480c      	ldr	r0, [pc, #48]	; (800139c <MX_TIM9_Init+0x6c>)
 800136c:	f002 f8de 	bl	800352c <HAL_TIM_Base_Init>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8001376:	f000 fc49 	bl	8001c0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800137a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800137e:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001380:	463b      	mov	r3, r7
 8001382:	4619      	mov	r1, r3
 8001384:	4805      	ldr	r0, [pc, #20]	; (800139c <MX_TIM9_Init+0x6c>)
 8001386:	f002 fc6d 	bl	8003c64 <HAL_TIM_ConfigClockSource>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8001390:	f000 fc3c 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001394:	bf00      	nop
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	200001cc 	.word	0x200001cc
 80013a0:	40014000 	.word	0x40014000

080013a4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80013a8:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <MX_TIM10_Init+0x40>)
 80013aa:	4a0f      	ldr	r2, [pc, #60]	; (80013e8 <MX_TIM10_Init+0x44>)
 80013ac:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 4500;
 80013ae:	4b0d      	ldr	r3, [pc, #52]	; (80013e4 <MX_TIM10_Init+0x40>)
 80013b0:	f241 1294 	movw	r2, #4500	; 0x1194
 80013b4:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b6:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <MX_TIM10_Init+0x40>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9000;
 80013bc:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <MX_TIM10_Init+0x40>)
 80013be:	f242 3228 	movw	r2, #9000	; 0x2328
 80013c2:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c4:	4b07      	ldr	r3, [pc, #28]	; (80013e4 <MX_TIM10_Init+0x40>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ca:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <MX_TIM10_Init+0x40>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80013d0:	4804      	ldr	r0, [pc, #16]	; (80013e4 <MX_TIM10_Init+0x40>)
 80013d2:	f002 f8ab 	bl	800352c <HAL_TIM_Base_Init>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80013dc:	f000 fc16 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80013e0:	bf00      	nop
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20000214 	.word	0x20000214
 80013e8:	40014400 	.word	0x40014400

080013ec <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80013f0:	4b0e      	ldr	r3, [pc, #56]	; (800142c <MX_TIM11_Init+0x40>)
 80013f2:	4a0f      	ldr	r2, [pc, #60]	; (8001430 <MX_TIM11_Init+0x44>)
 80013f4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 39;
 80013f6:	4b0d      	ldr	r3, [pc, #52]	; (800142c <MX_TIM11_Init+0x40>)
 80013f8:	2227      	movs	r2, #39	; 0x27
 80013fa:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013fc:	4b0b      	ldr	r3, [pc, #44]	; (800142c <MX_TIM11_Init+0x40>)
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 3999;
 8001402:	4b0a      	ldr	r3, [pc, #40]	; (800142c <MX_TIM11_Init+0x40>)
 8001404:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001408:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800140a:	4b08      	ldr	r3, [pc, #32]	; (800142c <MX_TIM11_Init+0x40>)
 800140c:	2200      	movs	r2, #0
 800140e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001410:	4b06      	ldr	r3, [pc, #24]	; (800142c <MX_TIM11_Init+0x40>)
 8001412:	2200      	movs	r2, #0
 8001414:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001416:	4805      	ldr	r0, [pc, #20]	; (800142c <MX_TIM11_Init+0x40>)
 8001418:	f002 f888 	bl	800352c <HAL_TIM_Base_Init>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001422:	f000 fbf3 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	2000025c 	.word	0x2000025c
 8001430:	40014800 	.word	0x40014800

08001434 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001438:	4b11      	ldr	r3, [pc, #68]	; (8001480 <MX_USART1_UART_Init+0x4c>)
 800143a:	4a12      	ldr	r2, [pc, #72]	; (8001484 <MX_USART1_UART_Init+0x50>)
 800143c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800143e:	4b10      	ldr	r3, [pc, #64]	; (8001480 <MX_USART1_UART_Init+0x4c>)
 8001440:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001444:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001446:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <MX_USART1_UART_Init+0x4c>)
 8001448:	2200      	movs	r2, #0
 800144a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800144c:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <MX_USART1_UART_Init+0x4c>)
 800144e:	2200      	movs	r2, #0
 8001450:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001452:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <MX_USART1_UART_Init+0x4c>)
 8001454:	2200      	movs	r2, #0
 8001456:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001458:	4b09      	ldr	r3, [pc, #36]	; (8001480 <MX_USART1_UART_Init+0x4c>)
 800145a:	220c      	movs	r2, #12
 800145c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800145e:	4b08      	ldr	r3, [pc, #32]	; (8001480 <MX_USART1_UART_Init+0x4c>)
 8001460:	2200      	movs	r2, #0
 8001462:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001464:	4b06      	ldr	r3, [pc, #24]	; (8001480 <MX_USART1_UART_Init+0x4c>)
 8001466:	2200      	movs	r2, #0
 8001468:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800146a:	4805      	ldr	r0, [pc, #20]	; (8001480 <MX_USART1_UART_Init+0x4c>)
 800146c:	f003 f844 	bl	80044f8 <HAL_UART_Init>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001476:	f000 fbc9 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	200002a4 	.word	0x200002a4
 8001484:	40011000 	.word	0x40011000

08001488 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800148c:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <MX_USART2_UART_Init+0x4c>)
 800148e:	4a12      	ldr	r2, [pc, #72]	; (80014d8 <MX_USART2_UART_Init+0x50>)
 8001490:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001492:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <MX_USART2_UART_Init+0x4c>)
 8001494:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001498:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800149a:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <MX_USART2_UART_Init+0x4c>)
 800149c:	2200      	movs	r2, #0
 800149e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014a0:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <MX_USART2_UART_Init+0x4c>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014a6:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <MX_USART2_UART_Init+0x4c>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014ac:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <MX_USART2_UART_Init+0x4c>)
 80014ae:	220c      	movs	r2, #12
 80014b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014b2:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <MX_USART2_UART_Init+0x4c>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014b8:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <MX_USART2_UART_Init+0x4c>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014be:	4805      	ldr	r0, [pc, #20]	; (80014d4 <MX_USART2_UART_Init+0x4c>)
 80014c0:	f003 f81a 	bl	80044f8 <HAL_UART_Init>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014ca:	f000 fb9f 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	200002ec 	.word	0x200002ec
 80014d8:	40004400 	.word	0x40004400

080014dc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80014e0:	4b11      	ldr	r3, [pc, #68]	; (8001528 <MX_USART6_UART_Init+0x4c>)
 80014e2:	4a12      	ldr	r2, [pc, #72]	; (800152c <MX_USART6_UART_Init+0x50>)
 80014e4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80014e6:	4b10      	ldr	r3, [pc, #64]	; (8001528 <MX_USART6_UART_Init+0x4c>)
 80014e8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80014ec:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80014ee:	4b0e      	ldr	r3, [pc, #56]	; (8001528 <MX_USART6_UART_Init+0x4c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80014f4:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <MX_USART6_UART_Init+0x4c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80014fa:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <MX_USART6_UART_Init+0x4c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001500:	4b09      	ldr	r3, [pc, #36]	; (8001528 <MX_USART6_UART_Init+0x4c>)
 8001502:	220c      	movs	r2, #12
 8001504:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001506:	4b08      	ldr	r3, [pc, #32]	; (8001528 <MX_USART6_UART_Init+0x4c>)
 8001508:	2200      	movs	r2, #0
 800150a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <MX_USART6_UART_Init+0x4c>)
 800150e:	2200      	movs	r2, #0
 8001510:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001512:	4805      	ldr	r0, [pc, #20]	; (8001528 <MX_USART6_UART_Init+0x4c>)
 8001514:	f002 fff0 	bl	80044f8 <HAL_UART_Init>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800151e:	f000 fb75 	bl	8001c0c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000334 	.word	0x20000334
 800152c:	40011400 	.word	0x40011400

08001530 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08a      	sub	sp, #40	; 0x28
 8001534:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001536:	f107 0314 	add.w	r3, r7, #20
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	605a      	str	r2, [r3, #4]
 8001540:	609a      	str	r2, [r3, #8]
 8001542:	60da      	str	r2, [r3, #12]
 8001544:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	613b      	str	r3, [r7, #16]
 800154a:	4b3d      	ldr	r3, [pc, #244]	; (8001640 <MX_GPIO_Init+0x110>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	4a3c      	ldr	r2, [pc, #240]	; (8001640 <MX_GPIO_Init+0x110>)
 8001550:	f043 0304 	orr.w	r3, r3, #4
 8001554:	6313      	str	r3, [r2, #48]	; 0x30
 8001556:	4b3a      	ldr	r3, [pc, #232]	; (8001640 <MX_GPIO_Init+0x110>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	f003 0304 	and.w	r3, r3, #4
 800155e:	613b      	str	r3, [r7, #16]
 8001560:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	4b36      	ldr	r3, [pc, #216]	; (8001640 <MX_GPIO_Init+0x110>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	4a35      	ldr	r2, [pc, #212]	; (8001640 <MX_GPIO_Init+0x110>)
 800156c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001570:	6313      	str	r3, [r2, #48]	; 0x30
 8001572:	4b33      	ldr	r3, [pc, #204]	; (8001640 <MX_GPIO_Init+0x110>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	60bb      	str	r3, [r7, #8]
 8001582:	4b2f      	ldr	r3, [pc, #188]	; (8001640 <MX_GPIO_Init+0x110>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	4a2e      	ldr	r2, [pc, #184]	; (8001640 <MX_GPIO_Init+0x110>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	6313      	str	r3, [r2, #48]	; 0x30
 800158e:	4b2c      	ldr	r3, [pc, #176]	; (8001640 <MX_GPIO_Init+0x110>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	60bb      	str	r3, [r7, #8]
 8001598:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	607b      	str	r3, [r7, #4]
 800159e:	4b28      	ldr	r3, [pc, #160]	; (8001640 <MX_GPIO_Init+0x110>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	4a27      	ldr	r2, [pc, #156]	; (8001640 <MX_GPIO_Init+0x110>)
 80015a4:	f043 0302 	orr.w	r3, r3, #2
 80015a8:	6313      	str	r3, [r2, #48]	; 0x30
 80015aa:	4b25      	ldr	r3, [pc, #148]	; (8001640 <MX_GPIO_Init+0x110>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	607b      	str	r3, [r7, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 80015b6:	2200      	movs	r2, #0
 80015b8:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 80015bc:	4821      	ldr	r0, [pc, #132]	; (8001644 <MX_GPIO_Init+0x114>)
 80015be:	f001 faeb 	bl	8002b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80015c2:	2200      	movs	r2, #0
 80015c4:	f44f 6187 	mov.w	r1, #1080	; 0x438
 80015c8:	481f      	ldr	r0, [pc, #124]	; (8001648 <MX_GPIO_Init+0x118>)
 80015ca:	f001 fae5 	bl	8002b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD2_Pin PA7 PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7|GPIO_PIN_8;
 80015ce:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 80015d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d4:	2301      	movs	r3, #1
 80015d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015dc:	2300      	movs	r3, #0
 80015de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	4619      	mov	r1, r3
 80015e6:	4817      	ldr	r0, [pc, #92]	; (8001644 <MX_GPIO_Init+0x114>)
 80015e8:	f001 f93a 	bl	8002860 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80015ec:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80015f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f2:	2301      	movs	r3, #1
 80015f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fa:	2300      	movs	r3, #0
 80015fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015fe:	f107 0314 	add.w	r3, r7, #20
 8001602:	4619      	mov	r1, r3
 8001604:	4810      	ldr	r0, [pc, #64]	; (8001648 <MX_GPIO_Init+0x118>)
 8001606:	f001 f92b 	bl	8002860 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800160a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800160e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001610:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001614:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800161a:	f107 0314 	add.w	r3, r7, #20
 800161e:	4619      	mov	r1, r3
 8001620:	4809      	ldr	r0, [pc, #36]	; (8001648 <MX_GPIO_Init+0x118>)
 8001622:	f001 f91d 	bl	8002860 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001626:	2200      	movs	r2, #0
 8001628:	2100      	movs	r1, #0
 800162a:	2028      	movs	r0, #40	; 0x28
 800162c:	f001 f84f 	bl	80026ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001630:	2028      	movs	r0, #40	; 0x28
 8001632:	f001 f868 	bl	8002706 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001636:	bf00      	nop
 8001638:	3728      	adds	r7, #40	; 0x28
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40023800 	.word	0x40023800
 8001644:	40020000 	.word	0x40020000
 8001648:	40020400 	.word	0x40020400

0800164c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001654:	1d39      	adds	r1, r7, #4
 8001656:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800165a:	2201      	movs	r2, #1
 800165c:	4803      	ldr	r0, [pc, #12]	; (800166c <__io_putchar+0x20>)
 800165e:	f002 ff9b 	bl	8004598 <HAL_UART_Transmit>
  return ch;
 8001662:	687b      	ldr	r3, [r7, #4]
}
 8001664:	4618      	mov	r0, r3
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	200002ec 	.word	0x200002ec

08001670 <HAL_UART_RxCpltCallback>:
int pan_dir = 0;




void HAL_UART_RxCpltCallback(UART_HandleTypeDef* hadc) {
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]

	if (hadc == &huart2)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4aa4      	ldr	r2, [pc, #656]	; (800190c <HAL_UART_RxCpltCallback+0x29c>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d12c      	bne.n	80016da <HAL_UART_RxCpltCallback+0x6a>
	{
		static char numbers[4] = {0};
		static int offset = 0;


		if (number != '\n')
 8001680:	4ba3      	ldr	r3, [pc, #652]	; (8001910 <HAL_UART_RxCpltCallback+0x2a0>)
 8001682:	881b      	ldrh	r3, [r3, #0]
 8001684:	2b0a      	cmp	r3, #10
 8001686:	d022      	beq.n	80016ce <HAL_UART_RxCpltCallback+0x5e>
		{
			printf("received: %c\n", number);
 8001688:	4ba1      	ldr	r3, [pc, #644]	; (8001910 <HAL_UART_RxCpltCallback+0x2a0>)
 800168a:	881b      	ldrh	r3, [r3, #0]
 800168c:	4619      	mov	r1, r3
 800168e:	48a1      	ldr	r0, [pc, #644]	; (8001914 <HAL_UART_RxCpltCallback+0x2a4>)
 8001690:	f004 f972 	bl	8005978 <iprintf>
			numbers[offset++] = number;
 8001694:	4b9e      	ldr	r3, [pc, #632]	; (8001910 <HAL_UART_RxCpltCallback+0x2a0>)
 8001696:	8818      	ldrh	r0, [r3, #0]
 8001698:	4b9f      	ldr	r3, [pc, #636]	; (8001918 <HAL_UART_RxCpltCallback+0x2a8>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	1c5a      	adds	r2, r3, #1
 800169e:	499e      	ldr	r1, [pc, #632]	; (8001918 <HAL_UART_RxCpltCallback+0x2a8>)
 80016a0:	600a      	str	r2, [r1, #0]
 80016a2:	b2c1      	uxtb	r1, r0
 80016a4:	4a9d      	ldr	r2, [pc, #628]	; (800191c <HAL_UART_RxCpltCallback+0x2ac>)
 80016a6:	54d1      	strb	r1, [r2, r3]

			if (offset == 3)
 80016a8:	4b9b      	ldr	r3, [pc, #620]	; (8001918 <HAL_UART_RxCpltCallback+0x2a8>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2b03      	cmp	r3, #3
 80016ae:	d10e      	bne.n	80016ce <HAL_UART_RxCpltCallback+0x5e>
			{
				int intNum = atoi(numbers);
 80016b0:	489a      	ldr	r0, [pc, #616]	; (800191c <HAL_UART_RxCpltCallback+0x2ac>)
 80016b2:	f004 f80f 	bl	80056d4 <atoi>
 80016b6:	60b8      	str	r0, [r7, #8]
				printf("set: %d\n", intNum);
 80016b8:	68b9      	ldr	r1, [r7, #8]
 80016ba:	4899      	ldr	r0, [pc, #612]	; (8001920 <HAL_UART_RxCpltCallback+0x2b0>)
 80016bc:	f004 f95c 	bl	8005978 <iprintf>
				// TIM2->CCR1 = intNum;
				TIM2->CCR2 = intNum;
 80016c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	6393      	str	r3, [r2, #56]	; 0x38
				offset = 0;
 80016c8:	4b93      	ldr	r3, [pc, #588]	; (8001918 <HAL_UART_RxCpltCallback+0x2a8>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
			}
		}
		HAL_UART_Receive_IT(&huart2, &number, 1);
 80016ce:	2201      	movs	r2, #1
 80016d0:	498f      	ldr	r1, [pc, #572]	; (8001910 <HAL_UART_RxCpltCallback+0x2a0>)
 80016d2:	488e      	ldr	r0, [pc, #568]	; (800190c <HAL_UART_RxCpltCallback+0x29c>)
 80016d4:	f003 f882 	bl	80047dc <HAL_UART_Receive_IT>
 80016d8:	e1bc      	b.n	8001a54 <HAL_UART_RxCpltCallback+0x3e4>

	}
	else
	{
		printf("raw: %d\n", (int)answer);
 80016da:	4b92      	ldr	r3, [pc, #584]	; (8001924 <HAL_UART_RxCpltCallback+0x2b4>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	4619      	mov	r1, r3
 80016e0:	4891      	ldr	r0, [pc, #580]	; (8001928 <HAL_UART_RxCpltCallback+0x2b8>)
 80016e2:	f004 f949 	bl	8005978 <iprintf>
		if (answerOffset == 0 && (answer&0b10000000) == 0)
 80016e6:	4b91      	ldr	r3, [pc, #580]	; (800192c <HAL_UART_RxCpltCallback+0x2bc>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d10d      	bne.n	800170a <HAL_UART_RxCpltCallback+0x9a>
 80016ee:	4b8d      	ldr	r3, [pc, #564]	; (8001924 <HAL_UART_RxCpltCallback+0x2b4>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	b25b      	sxtb	r3, r3
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	db08      	blt.n	800170a <HAL_UART_RxCpltCallback+0x9a>
		{
			HAL_UART_Receive_IT(&huart6, &answer, 1);
 80016f8:	2201      	movs	r2, #1
 80016fa:	498a      	ldr	r1, [pc, #552]	; (8001924 <HAL_UART_RxCpltCallback+0x2b4>)
 80016fc:	488c      	ldr	r0, [pc, #560]	; (8001930 <HAL_UART_RxCpltCallback+0x2c0>)
 80016fe:	f003 f86d 	bl	80047dc <HAL_UART_Receive_IT>
			printf("Wrong!\n");
 8001702:	488c      	ldr	r0, [pc, #560]	; (8001934 <HAL_UART_RxCpltCallback+0x2c4>)
 8001704:	f004 f9a6 	bl	8005a54 <puts>
			return;
 8001708:	e1a4      	b.n	8001a54 <HAL_UART_RxCpltCallback+0x3e4>
		}
		answers[answerOffset++] = answer;
 800170a:	4b88      	ldr	r3, [pc, #544]	; (800192c <HAL_UART_RxCpltCallback+0x2bc>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	1c5a      	adds	r2, r3, #1
 8001710:	4986      	ldr	r1, [pc, #536]	; (800192c <HAL_UART_RxCpltCallback+0x2bc>)
 8001712:	600a      	str	r2, [r1, #0]
 8001714:	4a83      	ldr	r2, [pc, #524]	; (8001924 <HAL_UART_RxCpltCallback+0x2b4>)
 8001716:	7811      	ldrb	r1, [r2, #0]
 8001718:	4a87      	ldr	r2, [pc, #540]	; (8001938 <HAL_UART_RxCpltCallback+0x2c8>)
 800171a:	54d1      	strb	r1, [r2, r3]
		if (answerOffset == 2)
 800171c:	4b83      	ldr	r3, [pc, #524]	; (800192c <HAL_UART_RxCpltCallback+0x2bc>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2b02      	cmp	r3, #2
 8001722:	d117      	bne.n	8001754 <HAL_UART_RxCpltCallback+0xe4>
		{
			answerOffset = 0;
 8001724:	4b81      	ldr	r3, [pc, #516]	; (800192c <HAL_UART_RxCpltCallback+0x2bc>)
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
		else
		{
			HAL_UART_Receive_IT(&huart6, &answer, 1);
			return;
		}
		printf("received: %d\n", *(uint16_t*)(&answers));
 800172a:	4b83      	ldr	r3, [pc, #524]	; (8001938 <HAL_UART_RxCpltCallback+0x2c8>)
 800172c:	881b      	ldrh	r3, [r3, #0]
 800172e:	4619      	mov	r1, r3
 8001730:	4882      	ldr	r0, [pc, #520]	; (800193c <HAL_UART_RxCpltCallback+0x2cc>)
 8001732:	f004 f921 	bl	8005978 <iprintf>
		static int hold = 0;
		static int hold_64 = 0;
		static int hold_128 = 0;
		uint16_t short_answers = *(uint16_t*)(&answers) - 128;
 8001736:	4b80      	ldr	r3, [pc, #512]	; (8001938 <HAL_UART_RxCpltCallback+0x2c8>)
 8001738:	881b      	ldrh	r3, [r3, #0]
 800173a:	3b80      	subs	r3, #128	; 0x80
 800173c:	81fb      	strh	r3, [r7, #14]
		printf("processed: %d\n", short_answers);
 800173e:	89fb      	ldrh	r3, [r7, #14]
 8001740:	4619      	mov	r1, r3
 8001742:	487f      	ldr	r0, [pc, #508]	; (8001940 <HAL_UART_RxCpltCallback+0x2d0>)
 8001744:	f004 f918 	bl	8005978 <iprintf>
		switch(short_answers)
 8001748:	89fb      	ldrh	r3, [r7, #14]
 800174a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800174e:	f000 810d 	beq.w	800196c <HAL_UART_RxCpltCallback+0x2fc>
 8001752:	e005      	b.n	8001760 <HAL_UART_RxCpltCallback+0xf0>
			HAL_UART_Receive_IT(&huart6, &answer, 1);
 8001754:	2201      	movs	r2, #1
 8001756:	4973      	ldr	r1, [pc, #460]	; (8001924 <HAL_UART_RxCpltCallback+0x2b4>)
 8001758:	4875      	ldr	r0, [pc, #468]	; (8001930 <HAL_UART_RxCpltCallback+0x2c0>)
 800175a:	f003 f83f 	bl	80047dc <HAL_UART_Receive_IT>
			return;
 800175e:	e179      	b.n	8001a54 <HAL_UART_RxCpltCallback+0x3e4>
		switch(short_answers)
 8001760:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001764:	f300 813b 	bgt.w	80019de <HAL_UART_RxCpltCallback+0x36e>
 8001768:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800176c:	f000 812a 	beq.w	80019c4 <HAL_UART_RxCpltCallback+0x354>
 8001770:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001774:	f300 8133 	bgt.w	80019de <HAL_UART_RxCpltCallback+0x36e>
 8001778:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800177c:	f000 811e 	beq.w	80019bc <HAL_UART_RxCpltCallback+0x34c>
 8001780:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001784:	f300 812b 	bgt.w	80019de <HAL_UART_RxCpltCallback+0x36e>
 8001788:	2b20      	cmp	r3, #32
 800178a:	dc49      	bgt.n	8001820 <HAL_UART_RxCpltCallback+0x1b0>
 800178c:	2b00      	cmp	r3, #0
 800178e:	f340 8126 	ble.w	80019de <HAL_UART_RxCpltCallback+0x36e>
 8001792:	3b01      	subs	r3, #1
 8001794:	2b1f      	cmp	r3, #31
 8001796:	f200 8122 	bhi.w	80019de <HAL_UART_RxCpltCallback+0x36e>
 800179a:	a201      	add	r2, pc, #4	; (adr r2, 80017a0 <HAL_UART_RxCpltCallback+0x130>)
 800179c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a0:	08001827 	.word	0x08001827
 80017a4:	0800182f 	.word	0x0800182f
 80017a8:	080019df 	.word	0x080019df
 80017ac:	08001837 	.word	0x08001837
 80017b0:	080019df 	.word	0x080019df
 80017b4:	080019df 	.word	0x080019df
 80017b8:	080019df 	.word	0x080019df
 80017bc:	0800183f 	.word	0x0800183f
 80017c0:	080019df 	.word	0x080019df
 80017c4:	080019df 	.word	0x080019df
 80017c8:	080019df 	.word	0x080019df
 80017cc:	080019df 	.word	0x080019df
 80017d0:	080019df 	.word	0x080019df
 80017d4:	080019df 	.word	0x080019df
 80017d8:	080019df 	.word	0x080019df
 80017dc:	08001847 	.word	0x08001847
 80017e0:	080019df 	.word	0x080019df
 80017e4:	080019df 	.word	0x080019df
 80017e8:	080019df 	.word	0x080019df
 80017ec:	080019df 	.word	0x080019df
 80017f0:	080019df 	.word	0x080019df
 80017f4:	080019df 	.word	0x080019df
 80017f8:	080019df 	.word	0x080019df
 80017fc:	080019df 	.word	0x080019df
 8001800:	080019df 	.word	0x080019df
 8001804:	080019df 	.word	0x080019df
 8001808:	080019df 	.word	0x080019df
 800180c:	080019df 	.word	0x080019df
 8001810:	080019df 	.word	0x080019df
 8001814:	080019df 	.word	0x080019df
 8001818:	080019df 	.word	0x080019df
 800181c:	0800184d 	.word	0x0800184d
 8001820:	2b40      	cmp	r3, #64	; 0x40
 8001822:	d048      	beq.n	80018b6 <HAL_UART_RxCpltCallback+0x246>
 8001824:	e0db      	b.n	80019de <HAL_UART_RxCpltCallback+0x36e>
		{
		case 1:
			controller_dir = 4;
 8001826:	4b47      	ldr	r3, [pc, #284]	; (8001944 <HAL_UART_RxCpltCallback+0x2d4>)
 8001828:	2204      	movs	r2, #4
 800182a:	601a      	str	r2, [r3, #0]
			break;
 800182c:	e0d7      	b.n	80019de <HAL_UART_RxCpltCallback+0x36e>
		case 2:
			controller_dir = 5;
 800182e:	4b45      	ldr	r3, [pc, #276]	; (8001944 <HAL_UART_RxCpltCallback+0x2d4>)
 8001830:	2205      	movs	r2, #5
 8001832:	601a      	str	r2, [r3, #0]
			break;
 8001834:	e0d3      	b.n	80019de <HAL_UART_RxCpltCallback+0x36e>
		case 4:
			controller_dir = 0;
 8001836:	4b43      	ldr	r3, [pc, #268]	; (8001944 <HAL_UART_RxCpltCallback+0x2d4>)
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
			break;
 800183c:	e0cf      	b.n	80019de <HAL_UART_RxCpltCallback+0x36e>
		case 8:
			controller_dir = 1;
 800183e:	4b41      	ldr	r3, [pc, #260]	; (8001944 <HAL_UART_RxCpltCallback+0x2d4>)
 8001840:	2201      	movs	r2, #1
 8001842:	601a      	str	r2, [r3, #0]
			break;
 8001844:	e0cb      	b.n	80019de <HAL_UART_RxCpltCallback+0x36e>
		case 16:
			shoot_async();
 8001846:	f7ff f9b7 	bl	8000bb8 <shoot_async>
			break;
 800184a:	e0c8      	b.n	80019de <HAL_UART_RxCpltCallback+0x36e>
		case 32:
			static int spin_state = 0;

			if (!hold)
 800184c:	4b3e      	ldr	r3, [pc, #248]	; (8001948 <HAL_UART_RxCpltCallback+0x2d8>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d111      	bne.n	8001878 <HAL_UART_RxCpltCallback+0x208>
			{
				hold = 1;
 8001854:	4b3c      	ldr	r3, [pc, #240]	; (8001948 <HAL_UART_RxCpltCallback+0x2d8>)
 8001856:	2201      	movs	r2, #1
 8001858:	601a      	str	r2, [r3, #0]
				spin_state = (spin_state + 1)%5;
 800185a:	4b3c      	ldr	r3, [pc, #240]	; (800194c <HAL_UART_RxCpltCallback+0x2dc>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	1c59      	adds	r1, r3, #1
 8001860:	4b3b      	ldr	r3, [pc, #236]	; (8001950 <HAL_UART_RxCpltCallback+0x2e0>)
 8001862:	fb83 2301 	smull	r2, r3, r3, r1
 8001866:	105a      	asrs	r2, r3, #1
 8001868:	17cb      	asrs	r3, r1, #31
 800186a:	1ad2      	subs	r2, r2, r3
 800186c:	4613      	mov	r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	1aca      	subs	r2, r1, r3
 8001874:	4b35      	ldr	r3, [pc, #212]	; (800194c <HAL_UART_RxCpltCallback+0x2dc>)
 8001876:	601a      	str	r2, [r3, #0]
			}
			if (spin_state == 0)
 8001878:	4b34      	ldr	r3, [pc, #208]	; (800194c <HAL_UART_RxCpltCallback+0x2dc>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d102      	bne.n	8001886 <HAL_UART_RxCpltCallback+0x216>
			{
				shut_down();
 8001880:	f7ff f984 	bl	8000b8c <shut_down>
			}
			else
			{
				prepare_underspin();
			}
			break;
 8001884:	e0ab      	b.n	80019de <HAL_UART_RxCpltCallback+0x36e>
			else if(spin_state == 1)
 8001886:	4b31      	ldr	r3, [pc, #196]	; (800194c <HAL_UART_RxCpltCallback+0x2dc>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d102      	bne.n	8001894 <HAL_UART_RxCpltCallback+0x224>
				prepare_nospin();
 800188e:	f7ff f91d 	bl	8000acc <prepare_nospin>
			break;
 8001892:	e0a4      	b.n	80019de <HAL_UART_RxCpltCallback+0x36e>
			else if(spin_state == 2)
 8001894:	4b2d      	ldr	r3, [pc, #180]	; (800194c <HAL_UART_RxCpltCallback+0x2dc>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2b02      	cmp	r3, #2
 800189a:	d102      	bne.n	80018a2 <HAL_UART_RxCpltCallback+0x232>
				prepare_full();
 800189c:	f7ff f92e 	bl	8000afc <prepare_full>
			break;
 80018a0:	e09d      	b.n	80019de <HAL_UART_RxCpltCallback+0x36e>
			else if (spin_state == 3)
 80018a2:	4b2a      	ldr	r3, [pc, #168]	; (800194c <HAL_UART_RxCpltCallback+0x2dc>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2b03      	cmp	r3, #3
 80018a8:	d102      	bne.n	80018b0 <HAL_UART_RxCpltCallback+0x240>
				prepare_topspin();
 80018aa:	f7ff f93f 	bl	8000b2c <prepare_topspin>
			break;
 80018ae:	e096      	b.n	80019de <HAL_UART_RxCpltCallback+0x36e>
				prepare_underspin();
 80018b0:	f7ff f954 	bl	8000b5c <prepare_underspin>
			break;
 80018b4:	e093      	b.n	80019de <HAL_UART_RxCpltCallback+0x36e>
		case 64:
			if (!hold_64 && pan_pos > 0 && pan_done)
 80018b6:	4b27      	ldr	r3, [pc, #156]	; (8001954 <HAL_UART_RxCpltCallback+0x2e4>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	f040 808c 	bne.w	80019d8 <HAL_UART_RxCpltCallback+0x368>
 80018c0:	4b25      	ldr	r3, [pc, #148]	; (8001958 <HAL_UART_RxCpltCallback+0x2e8>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f340 8087 	ble.w	80019d8 <HAL_UART_RxCpltCallback+0x368>
 80018ca:	4b24      	ldr	r3, [pc, #144]	; (800195c <HAL_UART_RxCpltCallback+0x2ec>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f000 8082 	beq.w	80019d8 <HAL_UART_RxCpltCallback+0x368>
			{
				hold_64 = 1;
 80018d4:	4b1f      	ldr	r3, [pc, #124]	; (8001954 <HAL_UART_RxCpltCallback+0x2e4>)
 80018d6:	2201      	movs	r2, #1
 80018d8:	601a      	str	r2, [r3, #0]
				pan_done = 0;
 80018da:	4b20      	ldr	r3, [pc, #128]	; (800195c <HAL_UART_RxCpltCallback+0x2ec>)
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
				pan_pos--;
 80018e0:	4b1d      	ldr	r3, [pc, #116]	; (8001958 <HAL_UART_RxCpltCallback+0x2e8>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	3b01      	subs	r3, #1
 80018e6:	4a1c      	ldr	r2, [pc, #112]	; (8001958 <HAL_UART_RxCpltCallback+0x2e8>)
 80018e8:	6013      	str	r3, [r2, #0]
				pan_dir = 0;
 80018ea:	4b1d      	ldr	r3, [pc, #116]	; (8001960 <HAL_UART_RxCpltCallback+0x2f0>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
				TIM2->CCR2 = PAN_DOWN;
 80018f0:	4b1c      	ldr	r3, [pc, #112]	; (8001964 <HAL_UART_RxCpltCallback+0x2f4>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018f8:	639a      	str	r2, [r3, #56]	; 0x38
				FIX_TIMER_TRIGGER(&htim9);
 80018fa:	4b1b      	ldr	r3, [pc, #108]	; (8001968 <HAL_UART_RxCpltCallback+0x2f8>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f06f 0201 	mvn.w	r2, #1
 8001902:	611a      	str	r2, [r3, #16]
				HAL_TIM_Base_Start_IT(&htim9);
 8001904:	4818      	ldr	r0, [pc, #96]	; (8001968 <HAL_UART_RxCpltCallback+0x2f8>)
 8001906:	f001 fe61 	bl	80035cc <HAL_TIM_Base_Start_IT>
			}
			break;
 800190a:	e065      	b.n	80019d8 <HAL_UART_RxCpltCallback+0x368>
 800190c:	200002ec 	.word	0x200002ec
 8001910:	200003bc 	.word	0x200003bc
 8001914:	080067f0 	.word	0x080067f0
 8001918:	200003e0 	.word	0x200003e0
 800191c:	200003e4 	.word	0x200003e4
 8001920:	08006800 	.word	0x08006800
 8001924:	2000037c 	.word	0x2000037c
 8001928:	0800680c 	.word	0x0800680c
 800192c:	20000384 	.word	0x20000384
 8001930:	20000334 	.word	0x20000334
 8001934:	08006818 	.word	0x08006818
 8001938:	20000380 	.word	0x20000380
 800193c:	08006820 	.word	0x08006820
 8001940:	08006830 	.word	0x08006830
 8001944:	20000394 	.word	0x20000394
 8001948:	200003e8 	.word	0x200003e8
 800194c:	200003ec 	.word	0x200003ec
 8001950:	66666667 	.word	0x66666667
 8001954:	200003f0 	.word	0x200003f0
 8001958:	200003d4 	.word	0x200003d4
 800195c:	20000014 	.word	0x20000014
 8001960:	200003d8 	.word	0x200003d8
 8001964:	20000010 	.word	0x20000010
 8001968:	200001cc 	.word	0x200001cc
		case 256*16:
			if (!hold_128 && pan_pos < 3 && pan_done)
 800196c:	4b3b      	ldr	r3, [pc, #236]	; (8001a5c <HAL_UART_RxCpltCallback+0x3ec>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d133      	bne.n	80019dc <HAL_UART_RxCpltCallback+0x36c>
 8001974:	4b3a      	ldr	r3, [pc, #232]	; (8001a60 <HAL_UART_RxCpltCallback+0x3f0>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2b02      	cmp	r3, #2
 800197a:	dc2f      	bgt.n	80019dc <HAL_UART_RxCpltCallback+0x36c>
 800197c:	4b39      	ldr	r3, [pc, #228]	; (8001a64 <HAL_UART_RxCpltCallback+0x3f4>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d02b      	beq.n	80019dc <HAL_UART_RxCpltCallback+0x36c>
			{
				hold_128 = 1;
 8001984:	4b35      	ldr	r3, [pc, #212]	; (8001a5c <HAL_UART_RxCpltCallback+0x3ec>)
 8001986:	2201      	movs	r2, #1
 8001988:	601a      	str	r2, [r3, #0]
				pan_done = 0;
 800198a:	4b36      	ldr	r3, [pc, #216]	; (8001a64 <HAL_UART_RxCpltCallback+0x3f4>)
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
				pan_pos++;
 8001990:	4b33      	ldr	r3, [pc, #204]	; (8001a60 <HAL_UART_RxCpltCallback+0x3f0>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	3301      	adds	r3, #1
 8001996:	4a32      	ldr	r2, [pc, #200]	; (8001a60 <HAL_UART_RxCpltCallback+0x3f0>)
 8001998:	6013      	str	r3, [r2, #0]
				pan_dir = 1;
 800199a:	4b33      	ldr	r3, [pc, #204]	; (8001a68 <HAL_UART_RxCpltCallback+0x3f8>)
 800199c:	2201      	movs	r2, #1
 800199e:	601a      	str	r2, [r3, #0]
				TIM2->CCR2 = PAN_UP;
 80019a0:	4b32      	ldr	r3, [pc, #200]	; (8001a6c <HAL_UART_RxCpltCallback+0x3fc>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019a8:	639a      	str	r2, [r3, #56]	; 0x38
				FIX_TIMER_TRIGGER(&htim9);
 80019aa:	4b31      	ldr	r3, [pc, #196]	; (8001a70 <HAL_UART_RxCpltCallback+0x400>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f06f 0201 	mvn.w	r2, #1
 80019b2:	611a      	str	r2, [r3, #16]
				HAL_TIM_Base_Start_IT(&htim9);
 80019b4:	482e      	ldr	r0, [pc, #184]	; (8001a70 <HAL_UART_RxCpltCallback+0x400>)
 80019b6:	f001 fe09 	bl	80035cc <HAL_TIM_Base_Start_IT>
			}
			break;
 80019ba:	e00f      	b.n	80019dc <HAL_UART_RxCpltCallback+0x36c>
		case 256:
			auto_mode_on = 1;
 80019bc:	4b2d      	ldr	r3, [pc, #180]	; (8001a74 <HAL_UART_RxCpltCallback+0x404>)
 80019be:	2201      	movs	r2, #1
 80019c0:	601a      	str	r2, [r3, #0]
			break;
 80019c2:	e00c      	b.n	80019de <HAL_UART_RxCpltCallback+0x36e>
		case 512:
			auto_mode_on = 0;
 80019c4:	4b2b      	ldr	r3, [pc, #172]	; (8001a74 <HAL_UART_RxCpltCallback+0x404>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
			auto_move = 0;
 80019ca:	4b2b      	ldr	r3, [pc, #172]	; (8001a78 <HAL_UART_RxCpltCallback+0x408>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
			auto_steps = 0;
 80019d0:	4b2a      	ldr	r3, [pc, #168]	; (8001a7c <HAL_UART_RxCpltCallback+0x40c>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
			break;
 80019d6:	e002      	b.n	80019de <HAL_UART_RxCpltCallback+0x36e>
			break;
 80019d8:	bf00      	nop
 80019da:	e000      	b.n	80019de <HAL_UART_RxCpltCallback+0x36e>
			break;
 80019dc:	bf00      	nop

		}


		if ((short_answers & 0b1111) == 0)
 80019de:	89fb      	ldrh	r3, [r7, #14]
 80019e0:	f003 030f 	and.w	r3, r3, #15
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d102      	bne.n	80019ee <HAL_UART_RxCpltCallback+0x37e>
		{
			controller_move = 0;
 80019e8:	4b25      	ldr	r3, [pc, #148]	; (8001a80 <HAL_UART_RxCpltCallback+0x410>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
		}
		if ((short_answers & 0b1111) != 0)
 80019ee:	89fb      	ldrh	r3, [r7, #14]
 80019f0:	f003 030f 	and.w	r3, r3, #15
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d008      	beq.n	8001a0a <HAL_UART_RxCpltCallback+0x39a>
		{
			controller_move = 1;
 80019f8:	4b21      	ldr	r3, [pc, #132]	; (8001a80 <HAL_UART_RxCpltCallback+0x410>)
 80019fa:	2201      	movs	r2, #1
 80019fc:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim11);
 80019fe:	4821      	ldr	r0, [pc, #132]	; (8001a84 <HAL_UART_RxCpltCallback+0x414>)
 8001a00:	f001 fde4 	bl	80035cc <HAL_TIM_Base_Start_IT>
			it_started = 1;
 8001a04:	4b20      	ldr	r3, [pc, #128]	; (8001a88 <HAL_UART_RxCpltCallback+0x418>)
 8001a06:	2201      	movs	r2, #1
 8001a08:	601a      	str	r2, [r3, #0]
		}
		if (short_answers != 64)
 8001a0a:	89fb      	ldrh	r3, [r7, #14]
 8001a0c:	2b40      	cmp	r3, #64	; 0x40
 8001a0e:	d002      	beq.n	8001a16 <HAL_UART_RxCpltCallback+0x3a6>
		{
			hold_64 = 0;
 8001a10:	4b1e      	ldr	r3, [pc, #120]	; (8001a8c <HAL_UART_RxCpltCallback+0x41c>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
		}
		if (short_answers != 256*16)
 8001a16:	89fb      	ldrh	r3, [r7, #14]
 8001a18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a1c:	d002      	beq.n	8001a24 <HAL_UART_RxCpltCallback+0x3b4>
		{
			hold_128 = 0;
 8001a1e:	4b0f      	ldr	r3, [pc, #60]	; (8001a5c <HAL_UART_RxCpltCallback+0x3ec>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
		}
		disabled = (short_answers & 0b1111) == 0;
 8001a24:	89fb      	ldrh	r3, [r7, #14]
 8001a26:	f003 030f 	and.w	r3, r3, #15
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	bf0c      	ite	eq
 8001a2e:	2301      	moveq	r3, #1
 8001a30:	2300      	movne	r3, #0
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	461a      	mov	r2, r3
 8001a36:	4b16      	ldr	r3, [pc, #88]	; (8001a90 <HAL_UART_RxCpltCallback+0x420>)
 8001a38:	601a      	str	r2, [r3, #0]
		if ((short_answers & 32) == 0)
 8001a3a:	89fb      	ldrh	r3, [r7, #14]
 8001a3c:	f003 0320 	and.w	r3, r3, #32
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d102      	bne.n	8001a4a <HAL_UART_RxCpltCallback+0x3da>
		{
			hold = 0;
 8001a44:	4b13      	ldr	r3, [pc, #76]	; (8001a94 <HAL_UART_RxCpltCallback+0x424>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]
		}
		 HAL_UART_Receive_IT(&huart6, &answer, 1);
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	4912      	ldr	r1, [pc, #72]	; (8001a98 <HAL_UART_RxCpltCallback+0x428>)
 8001a4e:	4813      	ldr	r0, [pc, #76]	; (8001a9c <HAL_UART_RxCpltCallback+0x42c>)
 8001a50:	f002 fec4 	bl	80047dc <HAL_UART_Receive_IT>
	}
 }
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	200003f4 	.word	0x200003f4
 8001a60:	200003d4 	.word	0x200003d4
 8001a64:	20000014 	.word	0x20000014
 8001a68:	200003d8 	.word	0x200003d8
 8001a6c:	2000000c 	.word	0x2000000c
 8001a70:	200001cc 	.word	0x200001cc
 8001a74:	200003b4 	.word	0x200003b4
 8001a78:	200003a4 	.word	0x200003a4
 8001a7c:	200003a8 	.word	0x200003a8
 8001a80:	20000390 	.word	0x20000390
 8001a84:	2000025c 	.word	0x2000025c
 8001a88:	200003b0 	.word	0x200003b0
 8001a8c:	200003f0 	.word	0x200003f0
 8001a90:	2000038c 	.word	0x2000038c
 8001a94:	200003e8 	.word	0x200003e8
 8001a98:	2000037c 	.word	0x2000037c
 8001a9c:	20000334 	.word	0x20000334

08001aa0 <capture_and_update>:
	}

	HAL_Delay(100);
}

void capture_and_update() {
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, tx_blocks_buff, 6, 1000);
 8001aa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aaa:	2206      	movs	r2, #6
 8001aac:	494f      	ldr	r1, [pc, #316]	; (8001bec <capture_and_update+0x14c>)
 8001aae:	4850      	ldr	r0, [pc, #320]	; (8001bf0 <capture_and_update+0x150>)
 8001ab0:	f002 fd72 	bl	8004598 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, rx_blocks_buff, 20, 1000);
 8001ab4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ab8:	2214      	movs	r2, #20
 8001aba:	494e      	ldr	r1, [pc, #312]	; (8001bf4 <capture_and_update+0x154>)
 8001abc:	484c      	ldr	r0, [pc, #304]	; (8001bf0 <capture_and_update+0x150>)
 8001abe:	f002 fdf6 	bl	80046ae <HAL_UART_Receive>
	HAL_Delay(5);
 8001ac2:	2005      	movs	r0, #5
 8001ac4:	f000 fd04 	bl	80024d0 <HAL_Delay>

	for(int i = 0; i< 20; i++){
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]
 8001acc:	e00a      	b.n	8001ae4 <capture_and_update+0x44>
		printf("%d   ", rx_blocks_buff[i]);
 8001ace:	4a49      	ldr	r2, [pc, #292]	; (8001bf4 <capture_and_update+0x154>)
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4847      	ldr	r0, [pc, #284]	; (8001bf8 <capture_and_update+0x158>)
 8001ada:	f003 ff4d 	bl	8005978 <iprintf>
	for(int i = 0; i< 20; i++){
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	617b      	str	r3, [r7, #20]
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	2b13      	cmp	r3, #19
 8001ae8:	ddf1      	ble.n	8001ace <capture_and_update+0x2e>
	}
	printf("\n");
 8001aea:	200a      	movs	r0, #10
 8001aec:	f003 ff56 	bl	800599c <putchar>

	const int tolerate_x = 30;   // tolerance in x direction in pixels
 8001af0:	231e      	movs	r3, #30
 8001af2:	613b      	str	r3, [r7, #16]
	const int ref_x = 157;
 8001af4:	239d      	movs	r3, #157	; 0x9d
 8001af6:	60fb      	str	r3, [r7, #12]
	const int tolerate_y = 20;   // tolerance in x direction in pixels
 8001af8:	2314      	movs	r3, #20
 8001afa:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001afc:	2200      	movs	r2, #0
 8001afe:	2120      	movs	r1, #32
 8001b00:	483e      	ldr	r0, [pc, #248]	; (8001bfc <capture_and_update+0x15c>)
 8001b02:	f001 f849 	bl	8002b98 <HAL_GPIO_WritePin>
	switch (state) {
 8001b06:	4b3e      	ldr	r3, [pc, #248]	; (8001c00 <capture_and_update+0x160>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	2b05      	cmp	r3, #5
 8001b0c:	d863      	bhi.n	8001bd6 <capture_and_update+0x136>
 8001b0e:	a201      	add	r2, pc, #4	; (adr r2, 8001b14 <capture_and_update+0x74>)
 8001b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b14:	08001b2d 	.word	0x08001b2d
 8001b18:	08001b35 	.word	0x08001b35
 8001b1c:	08001b55 	.word	0x08001b55
 8001b20:	08001b55 	.word	0x08001b55
 8001b24:	08001b55 	.word	0x08001b55
 8001b28:	08001bcd 	.word	0x08001bcd
	case IDLE:
		if (enable) {
			state = LOST;
 8001b2c:	4b34      	ldr	r3, [pc, #208]	; (8001c00 <capture_and_update+0x160>)
 8001b2e:	2201      	movs	r2, #1
 8001b30:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001b32:	e050      	b.n	8001bd6 <capture_and_update+0x136>
	case LOST:
		if ((rx_blocks_buff[0] == 175) && (rx_blocks_buff[1] == 193) && (rx_blocks_buff[2] == 33)) {
 8001b34:	4b2f      	ldr	r3, [pc, #188]	; (8001bf4 <capture_and_update+0x154>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	2baf      	cmp	r3, #175	; 0xaf
 8001b3a:	d14b      	bne.n	8001bd4 <capture_and_update+0x134>
 8001b3c:	4b2d      	ldr	r3, [pc, #180]	; (8001bf4 <capture_and_update+0x154>)
 8001b3e:	785b      	ldrb	r3, [r3, #1]
 8001b40:	2bc1      	cmp	r3, #193	; 0xc1
 8001b42:	d147      	bne.n	8001bd4 <capture_and_update+0x134>
 8001b44:	4b2b      	ldr	r3, [pc, #172]	; (8001bf4 <capture_and_update+0x154>)
 8001b46:	789b      	ldrb	r3, [r3, #2]
 8001b48:	2b21      	cmp	r3, #33	; 0x21
 8001b4a:	d143      	bne.n	8001bd4 <capture_and_update+0x134>
			state = NOT_DETECTED;
 8001b4c:	4b2c      	ldr	r3, [pc, #176]	; (8001c00 <capture_and_update+0x160>)
 8001b4e:	2202      	movs	r2, #2
 8001b50:	701a      	strb	r2, [r3, #0]
		}
		if (!enable) {
			state = IDLE;
		}
		break;
 8001b52:	e03f      	b.n	8001bd4 <capture_and_update+0x134>
	case TO_LEFT:
			if (!enable) {
				state = IDLE;
				break;
			}
			if ((rx_blocks_buff[0] == 175) && (rx_blocks_buff[1] == 193) && (rx_blocks_buff[2] == 33)) {
 8001b54:	4b27      	ldr	r3, [pc, #156]	; (8001bf4 <capture_and_update+0x154>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2baf      	cmp	r3, #175	; 0xaf
 8001b5a:	d132      	bne.n	8001bc2 <capture_and_update+0x122>
 8001b5c:	4b25      	ldr	r3, [pc, #148]	; (8001bf4 <capture_and_update+0x154>)
 8001b5e:	785b      	ldrb	r3, [r3, #1]
 8001b60:	2bc1      	cmp	r3, #193	; 0xc1
 8001b62:	d12e      	bne.n	8001bc2 <capture_and_update+0x122>
 8001b64:	4b23      	ldr	r3, [pc, #140]	; (8001bf4 <capture_and_update+0x154>)
 8001b66:	789b      	ldrb	r3, [r3, #2]
 8001b68:	2b21      	cmp	r3, #33	; 0x21
 8001b6a:	d12a      	bne.n	8001bc2 <capture_and_update+0x122>
				if (rx_blocks_buff[3] == 14) {
 8001b6c:	4b21      	ldr	r3, [pc, #132]	; (8001bf4 <capture_and_update+0x154>)
 8001b6e:	78db      	ldrb	r3, [r3, #3]
 8001b70:	2b0e      	cmp	r3, #14
 8001b72:	d122      	bne.n	8001bba <capture_and_update+0x11a>
					// detected
					int x_pos = rx_blocks_buff[8];
 8001b74:	4b1f      	ldr	r3, [pc, #124]	; (8001bf4 <capture_and_update+0x154>)
 8001b76:	7a1b      	ldrb	r3, [r3, #8]
 8001b78:	607b      	str	r3, [r7, #4]
					int y_pos = rx_blocks_buff[10];
 8001b7a:	4b1e      	ldr	r3, [pc, #120]	; (8001bf4 <capture_and_update+0x154>)
 8001b7c:	7a9b      	ldrb	r3, [r3, #10]
 8001b7e:	603b      	str	r3, [r7, #0]
					printf("target detected at (%d,%d)! \n\r", x_pos, y_pos);
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	6879      	ldr	r1, [r7, #4]
 8001b84:	481f      	ldr	r0, [pc, #124]	; (8001c04 <capture_and_update+0x164>)
 8001b86:	f003 fef7 	bl	8005978 <iprintf>
					if (x_pos > ref_x + tolerate_x) {
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	4413      	add	r3, r2
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	dd03      	ble.n	8001b9e <capture_and_update+0xfe>
						state = TO_RIGHT;
 8001b96:	4b1a      	ldr	r3, [pc, #104]	; (8001c00 <capture_and_update+0x160>)
 8001b98:	2204      	movs	r2, #4
 8001b9a:	701a      	strb	r2, [r3, #0]
				if (rx_blocks_buff[3] == 14) {
 8001b9c:	e015      	b.n	8001bca <capture_and_update+0x12a>
					} else if (x_pos < ref_x - tolerate_x) {
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	da03      	bge.n	8001bb2 <capture_and_update+0x112>
						state = TO_LEFT;
 8001baa:	4b15      	ldr	r3, [pc, #84]	; (8001c00 <capture_and_update+0x160>)
 8001bac:	2203      	movs	r2, #3
 8001bae:	701a      	strb	r2, [r3, #0]
				if (rx_blocks_buff[3] == 14) {
 8001bb0:	e00b      	b.n	8001bca <capture_and_update+0x12a>
					} else {
						state = READY;
 8001bb2:	4b13      	ldr	r3, [pc, #76]	; (8001c00 <capture_and_update+0x160>)
 8001bb4:	2205      	movs	r2, #5
 8001bb6:	701a      	strb	r2, [r3, #0]
				if (rx_blocks_buff[3] == 14) {
 8001bb8:	e007      	b.n	8001bca <capture_and_update+0x12a>
					}
				} else {
					state = NOT_DETECTED;
 8001bba:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <capture_and_update+0x160>)
 8001bbc:	2202      	movs	r2, #2
 8001bbe:	701a      	strb	r2, [r3, #0]
				if (rx_blocks_buff[3] == 14) {
 8001bc0:	e003      	b.n	8001bca <capture_and_update+0x12a>
				}
			} else {
				state = LOST;
 8001bc2:	4b0f      	ldr	r3, [pc, #60]	; (8001c00 <capture_and_update+0x160>)
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001bc8:	e005      	b.n	8001bd6 <capture_and_update+0x136>
 8001bca:	e004      	b.n	8001bd6 <capture_and_update+0x136>
	case READY:
		// set the gpio for launching the ball
		// HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
//		enable = 0;
		state = IDLE;
 8001bcc:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <capture_and_update+0x160>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	701a      	strb	r2, [r3, #0]
		break;
 8001bd2:	e000      	b.n	8001bd6 <capture_and_update+0x136>
		break;
 8001bd4:	bf00      	nop
	}

	printf("current state is %d \n\r", state);
 8001bd6:	4b0a      	ldr	r3, [pc, #40]	; (8001c00 <capture_and_update+0x160>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	4619      	mov	r1, r3
 8001bdc:	480a      	ldr	r0, [pc, #40]	; (8001c08 <capture_and_update+0x168>)
 8001bde:	f003 fecb 	bl	8005978 <iprintf>

}
 8001be2:	bf00      	nop
 8001be4:	3718      	adds	r7, #24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20000018 	.word	0x20000018
 8001bf0:	200002a4 	.word	0x200002a4
 8001bf4:	200003c0 	.word	0x200003c0
 8001bf8:	08006840 	.word	0x08006840
 8001bfc:	40020000 	.word	0x40020000
 8001c00:	200000a4 	.word	0x200000a4
 8001c04:	0800684c 	.word	0x0800684c
 8001c08:	08006884 	.word	0x08006884

08001c0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c10:	b672      	cpsid	i
}
 8001c12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c14:	e7fe      	b.n	8001c14 <Error_Handler+0x8>
	...

08001c18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	607b      	str	r3, [r7, #4]
 8001c22:	4b10      	ldr	r3, [pc, #64]	; (8001c64 <HAL_MspInit+0x4c>)
 8001c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c26:	4a0f      	ldr	r2, [pc, #60]	; (8001c64 <HAL_MspInit+0x4c>)
 8001c28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c2e:	4b0d      	ldr	r3, [pc, #52]	; (8001c64 <HAL_MspInit+0x4c>)
 8001c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c36:	607b      	str	r3, [r7, #4]
 8001c38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	603b      	str	r3, [r7, #0]
 8001c3e:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <HAL_MspInit+0x4c>)
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	4a08      	ldr	r2, [pc, #32]	; (8001c64 <HAL_MspInit+0x4c>)
 8001c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c48:	6413      	str	r3, [r2, #64]	; 0x40
 8001c4a:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <HAL_MspInit+0x4c>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c52:	603b      	str	r3, [r7, #0]
 8001c54:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8001c56:	2005      	movs	r0, #5
 8001c58:	f000 fd2e 	bl	80026b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c5c:	bf00      	nop
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40023800 	.word	0x40023800

08001c68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b08a      	sub	sp, #40	; 0x28
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c78:	d10e      	bne.n	8001c98 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c7e:	4b54      	ldr	r3, [pc, #336]	; (8001dd0 <HAL_TIM_Base_MspInit+0x168>)
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	4a53      	ldr	r2, [pc, #332]	; (8001dd0 <HAL_TIM_Base_MspInit+0x168>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	6413      	str	r3, [r2, #64]	; 0x40
 8001c8a:	4b51      	ldr	r3, [pc, #324]	; (8001dd0 <HAL_TIM_Base_MspInit+0x168>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	627b      	str	r3, [r7, #36]	; 0x24
 8001c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001c96:	e096      	b.n	8001dc6 <HAL_TIM_Base_MspInit+0x15e>
  else if(htim_base->Instance==TIM3)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a4d      	ldr	r2, [pc, #308]	; (8001dd4 <HAL_TIM_Base_MspInit+0x16c>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d10e      	bne.n	8001cc0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	623b      	str	r3, [r7, #32]
 8001ca6:	4b4a      	ldr	r3, [pc, #296]	; (8001dd0 <HAL_TIM_Base_MspInit+0x168>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	4a49      	ldr	r2, [pc, #292]	; (8001dd0 <HAL_TIM_Base_MspInit+0x168>)
 8001cac:	f043 0302 	orr.w	r3, r3, #2
 8001cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cb2:	4b47      	ldr	r3, [pc, #284]	; (8001dd0 <HAL_TIM_Base_MspInit+0x168>)
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	623b      	str	r3, [r7, #32]
 8001cbc:	6a3b      	ldr	r3, [r7, #32]
}
 8001cbe:	e082      	b.n	8001dc6 <HAL_TIM_Base_MspInit+0x15e>
  else if(htim_base->Instance==TIM4)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a44      	ldr	r2, [pc, #272]	; (8001dd8 <HAL_TIM_Base_MspInit+0x170>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d10e      	bne.n	8001ce8 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61fb      	str	r3, [r7, #28]
 8001cce:	4b40      	ldr	r3, [pc, #256]	; (8001dd0 <HAL_TIM_Base_MspInit+0x168>)
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd2:	4a3f      	ldr	r2, [pc, #252]	; (8001dd0 <HAL_TIM_Base_MspInit+0x168>)
 8001cd4:	f043 0304 	orr.w	r3, r3, #4
 8001cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cda:	4b3d      	ldr	r3, [pc, #244]	; (8001dd0 <HAL_TIM_Base_MspInit+0x168>)
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cde:	f003 0304 	and.w	r3, r3, #4
 8001ce2:	61fb      	str	r3, [r7, #28]
 8001ce4:	69fb      	ldr	r3, [r7, #28]
}
 8001ce6:	e06e      	b.n	8001dc6 <HAL_TIM_Base_MspInit+0x15e>
  else if(htim_base->Instance==TIM5)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a3b      	ldr	r2, [pc, #236]	; (8001ddc <HAL_TIM_Base_MspInit+0x174>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d116      	bne.n	8001d20 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61bb      	str	r3, [r7, #24]
 8001cf6:	4b36      	ldr	r3, [pc, #216]	; (8001dd0 <HAL_TIM_Base_MspInit+0x168>)
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfa:	4a35      	ldr	r2, [pc, #212]	; (8001dd0 <HAL_TIM_Base_MspInit+0x168>)
 8001cfc:	f043 0308 	orr.w	r3, r3, #8
 8001d00:	6413      	str	r3, [r2, #64]	; 0x40
 8001d02:	4b33      	ldr	r3, [pc, #204]	; (8001dd0 <HAL_TIM_Base_MspInit+0x168>)
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	f003 0308 	and.w	r3, r3, #8
 8001d0a:	61bb      	str	r3, [r7, #24]
 8001d0c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001d0e:	2200      	movs	r2, #0
 8001d10:	2100      	movs	r1, #0
 8001d12:	2032      	movs	r0, #50	; 0x32
 8001d14:	f000 fcdb 	bl	80026ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001d18:	2032      	movs	r0, #50	; 0x32
 8001d1a:	f000 fcf4 	bl	8002706 <HAL_NVIC_EnableIRQ>
}
 8001d1e:	e052      	b.n	8001dc6 <HAL_TIM_Base_MspInit+0x15e>
  else if(htim_base->Instance==TIM9)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a2e      	ldr	r2, [pc, #184]	; (8001de0 <HAL_TIM_Base_MspInit+0x178>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d116      	bne.n	8001d58 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	617b      	str	r3, [r7, #20]
 8001d2e:	4b28      	ldr	r3, [pc, #160]	; (8001dd0 <HAL_TIM_Base_MspInit+0x168>)
 8001d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d32:	4a27      	ldr	r2, [pc, #156]	; (8001dd0 <HAL_TIM_Base_MspInit+0x168>)
 8001d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d38:	6453      	str	r3, [r2, #68]	; 0x44
 8001d3a:	4b25      	ldr	r3, [pc, #148]	; (8001dd0 <HAL_TIM_Base_MspInit+0x168>)
 8001d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d42:	617b      	str	r3, [r7, #20]
 8001d44:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001d46:	2200      	movs	r2, #0
 8001d48:	2100      	movs	r1, #0
 8001d4a:	2018      	movs	r0, #24
 8001d4c:	f000 fcbf 	bl	80026ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001d50:	2018      	movs	r0, #24
 8001d52:	f000 fcd8 	bl	8002706 <HAL_NVIC_EnableIRQ>
}
 8001d56:	e036      	b.n	8001dc6 <HAL_TIM_Base_MspInit+0x15e>
  else if(htim_base->Instance==TIM10)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a21      	ldr	r2, [pc, #132]	; (8001de4 <HAL_TIM_Base_MspInit+0x17c>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d116      	bne.n	8001d90 <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	613b      	str	r3, [r7, #16]
 8001d66:	4b1a      	ldr	r3, [pc, #104]	; (8001dd0 <HAL_TIM_Base_MspInit+0x168>)
 8001d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6a:	4a19      	ldr	r2, [pc, #100]	; (8001dd0 <HAL_TIM_Base_MspInit+0x168>)
 8001d6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d70:	6453      	str	r3, [r2, #68]	; 0x44
 8001d72:	4b17      	ldr	r3, [pc, #92]	; (8001dd0 <HAL_TIM_Base_MspInit+0x168>)
 8001d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7a:	613b      	str	r3, [r7, #16]
 8001d7c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	2100      	movs	r1, #0
 8001d82:	2019      	movs	r0, #25
 8001d84:	f000 fca3 	bl	80026ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001d88:	2019      	movs	r0, #25
 8001d8a:	f000 fcbc 	bl	8002706 <HAL_NVIC_EnableIRQ>
}
 8001d8e:	e01a      	b.n	8001dc6 <HAL_TIM_Base_MspInit+0x15e>
  else if(htim_base->Instance==TIM11)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a14      	ldr	r2, [pc, #80]	; (8001de8 <HAL_TIM_Base_MspInit+0x180>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d115      	bne.n	8001dc6 <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <HAL_TIM_Base_MspInit+0x168>)
 8001da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da2:	4a0b      	ldr	r2, [pc, #44]	; (8001dd0 <HAL_TIM_Base_MspInit+0x168>)
 8001da4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001da8:	6453      	str	r3, [r2, #68]	; 0x44
 8001daa:	4b09      	ldr	r3, [pc, #36]	; (8001dd0 <HAL_TIM_Base_MspInit+0x168>)
 8001dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001db6:	2200      	movs	r2, #0
 8001db8:	2100      	movs	r1, #0
 8001dba:	201a      	movs	r0, #26
 8001dbc:	f000 fc87 	bl	80026ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001dc0:	201a      	movs	r0, #26
 8001dc2:	f000 fca0 	bl	8002706 <HAL_NVIC_EnableIRQ>
}
 8001dc6:	bf00      	nop
 8001dc8:	3728      	adds	r7, #40	; 0x28
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	40000400 	.word	0x40000400
 8001dd8:	40000800 	.word	0x40000800
 8001ddc:	40000c00 	.word	0x40000c00
 8001de0:	40014000 	.word	0x40014000
 8001de4:	40014400 	.word	0x40014400
 8001de8:	40014800 	.word	0x40014800

08001dec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b08c      	sub	sp, #48	; 0x30
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df4:	f107 031c 	add.w	r3, r7, #28
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	605a      	str	r2, [r3, #4]
 8001dfe:	609a      	str	r2, [r3, #8]
 8001e00:	60da      	str	r2, [r3, #12]
 8001e02:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e0c:	d11f      	bne.n	8001e4e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61bb      	str	r3, [r7, #24]
 8001e12:	4b52      	ldr	r3, [pc, #328]	; (8001f5c <HAL_TIM_MspPostInit+0x170>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	4a51      	ldr	r2, [pc, #324]	; (8001f5c <HAL_TIM_MspPostInit+0x170>)
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1e:	4b4f      	ldr	r3, [pc, #316]	; (8001f5c <HAL_TIM_MspPostInit+0x170>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	61bb      	str	r3, [r7, #24]
 8001e28:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8001e2a:	f248 0302 	movw	r3, #32770	; 0x8002
 8001e2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e30:	2302      	movs	r3, #2
 8001e32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e34:	2300      	movs	r3, #0
 8001e36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e40:	f107 031c 	add.w	r3, r7, #28
 8001e44:	4619      	mov	r1, r3
 8001e46:	4846      	ldr	r0, [pc, #280]	; (8001f60 <HAL_TIM_MspPostInit+0x174>)
 8001e48:	f000 fd0a 	bl	8002860 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001e4c:	e082      	b.n	8001f54 <HAL_TIM_MspPostInit+0x168>
  else if(htim->Instance==TIM3)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a44      	ldr	r2, [pc, #272]	; (8001f64 <HAL_TIM_MspPostInit+0x178>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d15a      	bne.n	8001f0e <HAL_TIM_MspPostInit+0x122>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]
 8001e5c:	4b3f      	ldr	r3, [pc, #252]	; (8001f5c <HAL_TIM_MspPostInit+0x170>)
 8001e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e60:	4a3e      	ldr	r2, [pc, #248]	; (8001f5c <HAL_TIM_MspPostInit+0x170>)
 8001e62:	f043 0301 	orr.w	r3, r3, #1
 8001e66:	6313      	str	r3, [r2, #48]	; 0x30
 8001e68:	4b3c      	ldr	r3, [pc, #240]	; (8001f5c <HAL_TIM_MspPostInit+0x170>)
 8001e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	617b      	str	r3, [r7, #20]
 8001e72:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e74:	2300      	movs	r3, #0
 8001e76:	613b      	str	r3, [r7, #16]
 8001e78:	4b38      	ldr	r3, [pc, #224]	; (8001f5c <HAL_TIM_MspPostInit+0x170>)
 8001e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7c:	4a37      	ldr	r2, [pc, #220]	; (8001f5c <HAL_TIM_MspPostInit+0x170>)
 8001e7e:	f043 0302 	orr.w	r3, r3, #2
 8001e82:	6313      	str	r3, [r2, #48]	; 0x30
 8001e84:	4b35      	ldr	r3, [pc, #212]	; (8001f5c <HAL_TIM_MspPostInit+0x170>)
 8001e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e88:	f003 0302 	and.w	r3, r3, #2
 8001e8c:	613b      	str	r3, [r7, #16]
 8001e8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e90:	2300      	movs	r3, #0
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	4b31      	ldr	r3, [pc, #196]	; (8001f5c <HAL_TIM_MspPostInit+0x170>)
 8001e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e98:	4a30      	ldr	r2, [pc, #192]	; (8001f5c <HAL_TIM_MspPostInit+0x170>)
 8001e9a:	f043 0304 	orr.w	r3, r3, #4
 8001e9e:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea0:	4b2e      	ldr	r3, [pc, #184]	; (8001f5c <HAL_TIM_MspPostInit+0x170>)
 8001ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001eac:	2340      	movs	r3, #64	; 0x40
 8001eae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec0:	f107 031c 	add.w	r3, r7, #28
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4826      	ldr	r0, [pc, #152]	; (8001f60 <HAL_TIM_MspPostInit+0x174>)
 8001ec8:	f000 fcca 	bl	8002860 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001edc:	2302      	movs	r3, #2
 8001ede:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee0:	f107 031c 	add.w	r3, r7, #28
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4820      	ldr	r0, [pc, #128]	; (8001f68 <HAL_TIM_MspPostInit+0x17c>)
 8001ee8:	f000 fcba 	bl	8002860 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001eec:	2380      	movs	r3, #128	; 0x80
 8001eee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001efc:	2302      	movs	r3, #2
 8001efe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f00:	f107 031c 	add.w	r3, r7, #28
 8001f04:	4619      	mov	r1, r3
 8001f06:	4819      	ldr	r0, [pc, #100]	; (8001f6c <HAL_TIM_MspPostInit+0x180>)
 8001f08:	f000 fcaa 	bl	8002860 <HAL_GPIO_Init>
}
 8001f0c:	e022      	b.n	8001f54 <HAL_TIM_MspPostInit+0x168>
  else if(htim->Instance==TIM4)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a17      	ldr	r2, [pc, #92]	; (8001f70 <HAL_TIM_MspPostInit+0x184>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d11d      	bne.n	8001f54 <HAL_TIM_MspPostInit+0x168>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60bb      	str	r3, [r7, #8]
 8001f1c:	4b0f      	ldr	r3, [pc, #60]	; (8001f5c <HAL_TIM_MspPostInit+0x170>)
 8001f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f20:	4a0e      	ldr	r2, [pc, #56]	; (8001f5c <HAL_TIM_MspPostInit+0x170>)
 8001f22:	f043 0302 	orr.w	r3, r3, #2
 8001f26:	6313      	str	r3, [r2, #48]	; 0x30
 8001f28:	4b0c      	ldr	r3, [pc, #48]	; (8001f5c <HAL_TIM_MspPostInit+0x170>)
 8001f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	60bb      	str	r3, [r7, #8]
 8001f32:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f34:	2340      	movs	r3, #64	; 0x40
 8001f36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f38:	2302      	movs	r3, #2
 8001f3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f40:	2300      	movs	r3, #0
 8001f42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f44:	2302      	movs	r3, #2
 8001f46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f48:	f107 031c 	add.w	r3, r7, #28
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4806      	ldr	r0, [pc, #24]	; (8001f68 <HAL_TIM_MspPostInit+0x17c>)
 8001f50:	f000 fc86 	bl	8002860 <HAL_GPIO_Init>
}
 8001f54:	bf00      	nop
 8001f56:	3730      	adds	r7, #48	; 0x30
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40023800 	.word	0x40023800
 8001f60:	40020000 	.word	0x40020000
 8001f64:	40000400 	.word	0x40000400
 8001f68:	40020400 	.word	0x40020400
 8001f6c:	40020800 	.word	0x40020800
 8001f70:	40000800 	.word	0x40000800

08001f74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08e      	sub	sp, #56	; 0x38
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a63      	ldr	r2, [pc, #396]	; (8002120 <HAL_UART_MspInit+0x1ac>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d12d      	bne.n	8001ff2 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	623b      	str	r3, [r7, #32]
 8001f9a:	4b62      	ldr	r3, [pc, #392]	; (8002124 <HAL_UART_MspInit+0x1b0>)
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9e:	4a61      	ldr	r2, [pc, #388]	; (8002124 <HAL_UART_MspInit+0x1b0>)
 8001fa0:	f043 0310 	orr.w	r3, r3, #16
 8001fa4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fa6:	4b5f      	ldr	r3, [pc, #380]	; (8002124 <HAL_UART_MspInit+0x1b0>)
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001faa:	f003 0310 	and.w	r3, r3, #16
 8001fae:	623b      	str	r3, [r7, #32]
 8001fb0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61fb      	str	r3, [r7, #28]
 8001fb6:	4b5b      	ldr	r3, [pc, #364]	; (8002124 <HAL_UART_MspInit+0x1b0>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	4a5a      	ldr	r2, [pc, #360]	; (8002124 <HAL_UART_MspInit+0x1b0>)
 8001fbc:	f043 0301 	orr.w	r3, r3, #1
 8001fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc2:	4b58      	ldr	r3, [pc, #352]	; (8002124 <HAL_UART_MspInit+0x1b0>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	61fb      	str	r3, [r7, #28]
 8001fcc:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001fce:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001fd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fe0:	2307      	movs	r3, #7
 8001fe2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fe8:	4619      	mov	r1, r3
 8001fea:	484f      	ldr	r0, [pc, #316]	; (8002128 <HAL_UART_MspInit+0x1b4>)
 8001fec:	f000 fc38 	bl	8002860 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001ff0:	e091      	b.n	8002116 <HAL_UART_MspInit+0x1a2>
  else if(huart->Instance==USART2)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a4d      	ldr	r2, [pc, #308]	; (800212c <HAL_UART_MspInit+0x1b8>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d134      	bne.n	8002066 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	61bb      	str	r3, [r7, #24]
 8002000:	4b48      	ldr	r3, [pc, #288]	; (8002124 <HAL_UART_MspInit+0x1b0>)
 8002002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002004:	4a47      	ldr	r2, [pc, #284]	; (8002124 <HAL_UART_MspInit+0x1b0>)
 8002006:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800200a:	6413      	str	r3, [r2, #64]	; 0x40
 800200c:	4b45      	ldr	r3, [pc, #276]	; (8002124 <HAL_UART_MspInit+0x1b0>)
 800200e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002014:	61bb      	str	r3, [r7, #24]
 8002016:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002018:	2300      	movs	r3, #0
 800201a:	617b      	str	r3, [r7, #20]
 800201c:	4b41      	ldr	r3, [pc, #260]	; (8002124 <HAL_UART_MspInit+0x1b0>)
 800201e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002020:	4a40      	ldr	r2, [pc, #256]	; (8002124 <HAL_UART_MspInit+0x1b0>)
 8002022:	f043 0301 	orr.w	r3, r3, #1
 8002026:	6313      	str	r3, [r2, #48]	; 0x30
 8002028:	4b3e      	ldr	r3, [pc, #248]	; (8002124 <HAL_UART_MspInit+0x1b0>)
 800202a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	617b      	str	r3, [r7, #20]
 8002032:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002034:	230c      	movs	r3, #12
 8002036:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002038:	2302      	movs	r3, #2
 800203a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203c:	2300      	movs	r3, #0
 800203e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002040:	2303      	movs	r3, #3
 8002042:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002044:	2307      	movs	r3, #7
 8002046:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002048:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800204c:	4619      	mov	r1, r3
 800204e:	4836      	ldr	r0, [pc, #216]	; (8002128 <HAL_UART_MspInit+0x1b4>)
 8002050:	f000 fc06 	bl	8002860 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002054:	2200      	movs	r2, #0
 8002056:	2100      	movs	r1, #0
 8002058:	2026      	movs	r0, #38	; 0x26
 800205a:	f000 fb38 	bl	80026ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800205e:	2026      	movs	r0, #38	; 0x26
 8002060:	f000 fb51 	bl	8002706 <HAL_NVIC_EnableIRQ>
}
 8002064:	e057      	b.n	8002116 <HAL_UART_MspInit+0x1a2>
  else if(huart->Instance==USART6)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a31      	ldr	r2, [pc, #196]	; (8002130 <HAL_UART_MspInit+0x1bc>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d152      	bne.n	8002116 <HAL_UART_MspInit+0x1a2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002070:	2300      	movs	r3, #0
 8002072:	613b      	str	r3, [r7, #16]
 8002074:	4b2b      	ldr	r3, [pc, #172]	; (8002124 <HAL_UART_MspInit+0x1b0>)
 8002076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002078:	4a2a      	ldr	r2, [pc, #168]	; (8002124 <HAL_UART_MspInit+0x1b0>)
 800207a:	f043 0320 	orr.w	r3, r3, #32
 800207e:	6453      	str	r3, [r2, #68]	; 0x44
 8002080:	4b28      	ldr	r3, [pc, #160]	; (8002124 <HAL_UART_MspInit+0x1b0>)
 8002082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002084:	f003 0320 	and.w	r3, r3, #32
 8002088:	613b      	str	r3, [r7, #16]
 800208a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800208c:	2300      	movs	r3, #0
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	4b24      	ldr	r3, [pc, #144]	; (8002124 <HAL_UART_MspInit+0x1b0>)
 8002092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002094:	4a23      	ldr	r2, [pc, #140]	; (8002124 <HAL_UART_MspInit+0x1b0>)
 8002096:	f043 0304 	orr.w	r3, r3, #4
 800209a:	6313      	str	r3, [r2, #48]	; 0x30
 800209c:	4b21      	ldr	r3, [pc, #132]	; (8002124 <HAL_UART_MspInit+0x1b0>)
 800209e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a0:	f003 0304 	and.w	r3, r3, #4
 80020a4:	60fb      	str	r3, [r7, #12]
 80020a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a8:	2300      	movs	r3, #0
 80020aa:	60bb      	str	r3, [r7, #8]
 80020ac:	4b1d      	ldr	r3, [pc, #116]	; (8002124 <HAL_UART_MspInit+0x1b0>)
 80020ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b0:	4a1c      	ldr	r2, [pc, #112]	; (8002124 <HAL_UART_MspInit+0x1b0>)
 80020b2:	f043 0301 	orr.w	r3, r3, #1
 80020b6:	6313      	str	r3, [r2, #48]	; 0x30
 80020b8:	4b1a      	ldr	r3, [pc, #104]	; (8002124 <HAL_UART_MspInit+0x1b0>)
 80020ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	60bb      	str	r3, [r7, #8]
 80020c2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80020c4:	2340      	movs	r3, #64	; 0x40
 80020c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c8:	2302      	movs	r3, #2
 80020ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d0:	2303      	movs	r3, #3
 80020d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80020d4:	2308      	movs	r3, #8
 80020d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020dc:	4619      	mov	r1, r3
 80020de:	4815      	ldr	r0, [pc, #84]	; (8002134 <HAL_UART_MspInit+0x1c0>)
 80020e0:	f000 fbbe 	bl	8002860 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80020e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ea:	2302      	movs	r3, #2
 80020ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ee:	2300      	movs	r3, #0
 80020f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f2:	2303      	movs	r3, #3
 80020f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80020f6:	2308      	movs	r3, #8
 80020f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020fe:	4619      	mov	r1, r3
 8002100:	4809      	ldr	r0, [pc, #36]	; (8002128 <HAL_UART_MspInit+0x1b4>)
 8002102:	f000 fbad 	bl	8002860 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002106:	2200      	movs	r2, #0
 8002108:	2100      	movs	r1, #0
 800210a:	2047      	movs	r0, #71	; 0x47
 800210c:	f000 fadf 	bl	80026ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002110:	2047      	movs	r0, #71	; 0x47
 8002112:	f000 faf8 	bl	8002706 <HAL_NVIC_EnableIRQ>
}
 8002116:	bf00      	nop
 8002118:	3738      	adds	r7, #56	; 0x38
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40011000 	.word	0x40011000
 8002124:	40023800 	.word	0x40023800
 8002128:	40020000 	.word	0x40020000
 800212c:	40004400 	.word	0x40004400
 8002130:	40011400 	.word	0x40011400
 8002134:	40020800 	.word	0x40020800

08002138 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800213c:	e7fe      	b.n	800213c <NMI_Handler+0x4>

0800213e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800213e:	b480      	push	{r7}
 8002140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002142:	e7fe      	b.n	8002142 <HardFault_Handler+0x4>

08002144 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002148:	e7fe      	b.n	8002148 <MemManage_Handler+0x4>

0800214a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800214a:	b480      	push	{r7}
 800214c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800214e:	e7fe      	b.n	800214e <BusFault_Handler+0x4>

08002150 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002154:	e7fe      	b.n	8002154 <UsageFault_Handler+0x4>

08002156 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002156:	b480      	push	{r7}
 8002158:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800215a:	bf00      	nop
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002168:	bf00      	nop
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002172:	b480      	push	{r7}
 8002174:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002176:	bf00      	nop
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002184:	f000 f984 	bl	8002490 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002188:	bf00      	nop
 800218a:	bd80      	pop	{r7, pc}

0800218c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8002190:	4802      	ldr	r0, [pc, #8]	; (800219c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002192:	f001 fbb5 	bl	8003900 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002196:	bf00      	nop
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	200001cc 	.word	0x200001cc

080021a0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80021a4:	4802      	ldr	r0, [pc, #8]	; (80021b0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80021a6:	f001 fbab 	bl	8003900 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80021aa:	bf00      	nop
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	20000214 	.word	0x20000214

080021b4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80021b8:	4802      	ldr	r0, [pc, #8]	; (80021c4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80021ba:	f001 fba1 	bl	8003900 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80021be:	bf00      	nop
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	2000025c 	.word	0x2000025c

080021c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80021cc:	4802      	ldr	r0, [pc, #8]	; (80021d8 <USART2_IRQHandler+0x10>)
 80021ce:	f002 fb2b 	bl	8004828 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80021d2:	bf00      	nop
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	200002ec 	.word	0x200002ec

080021dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80021e0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80021e4:	f000 fcf2 	bl	8002bcc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80021e8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80021ec:	f000 fcee 	bl	8002bcc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80021f0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80021f4:	f000 fcea 	bl	8002bcc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80021f8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80021fc:	f000 fce6 	bl	8002bcc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002200:	bf00      	nop
 8002202:	bd80      	pop	{r7, pc}

08002204 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002208:	4802      	ldr	r0, [pc, #8]	; (8002214 <TIM5_IRQHandler+0x10>)
 800220a:	f001 fb79 	bl	8003900 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800220e:	bf00      	nop
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	20000184 	.word	0x20000184

08002218 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800221c:	4802      	ldr	r0, [pc, #8]	; (8002228 <USART6_IRQHandler+0x10>)
 800221e:	f002 fb03 	bl	8004828 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002222:	bf00      	nop
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	20000334 	.word	0x20000334

0800222c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002238:	2300      	movs	r3, #0
 800223a:	617b      	str	r3, [r7, #20]
 800223c:	e00a      	b.n	8002254 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800223e:	f3af 8000 	nop.w
 8002242:	4601      	mov	r1, r0
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	1c5a      	adds	r2, r3, #1
 8002248:	60ba      	str	r2, [r7, #8]
 800224a:	b2ca      	uxtb	r2, r1
 800224c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	3301      	adds	r3, #1
 8002252:	617b      	str	r3, [r7, #20]
 8002254:	697a      	ldr	r2, [r7, #20]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	429a      	cmp	r2, r3
 800225a:	dbf0      	blt.n	800223e <_read+0x12>
  }

  return len;
 800225c:	687b      	ldr	r3, [r7, #4]
}
 800225e:	4618      	mov	r0, r3
 8002260:	3718      	adds	r7, #24
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b086      	sub	sp, #24
 800226a:	af00      	add	r7, sp, #0
 800226c:	60f8      	str	r0, [r7, #12]
 800226e:	60b9      	str	r1, [r7, #8]
 8002270:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002272:	2300      	movs	r3, #0
 8002274:	617b      	str	r3, [r7, #20]
 8002276:	e009      	b.n	800228c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	1c5a      	adds	r2, r3, #1
 800227c:	60ba      	str	r2, [r7, #8]
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff f9e3 	bl	800164c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	3301      	adds	r3, #1
 800228a:	617b      	str	r3, [r7, #20]
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	429a      	cmp	r2, r3
 8002292:	dbf1      	blt.n	8002278 <_write+0x12>
  }
  return len;
 8002294:	687b      	ldr	r3, [r7, #4]
}
 8002296:	4618      	mov	r0, r3
 8002298:	3718      	adds	r7, #24
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <_close>:

int _close(int file)
{
 800229e:	b480      	push	{r7}
 80022a0:	b083      	sub	sp, #12
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
 80022be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022c6:	605a      	str	r2, [r3, #4]
  return 0;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr

080022d6 <_isatty>:

int _isatty(int file)
{
 80022d6:	b480      	push	{r7}
 80022d8:	b083      	sub	sp, #12
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022de:	2301      	movs	r3, #1
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3714      	adds	r7, #20
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
	...

08002308 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002310:	4a14      	ldr	r2, [pc, #80]	; (8002364 <_sbrk+0x5c>)
 8002312:	4b15      	ldr	r3, [pc, #84]	; (8002368 <_sbrk+0x60>)
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800231c:	4b13      	ldr	r3, [pc, #76]	; (800236c <_sbrk+0x64>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d102      	bne.n	800232a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002324:	4b11      	ldr	r3, [pc, #68]	; (800236c <_sbrk+0x64>)
 8002326:	4a12      	ldr	r2, [pc, #72]	; (8002370 <_sbrk+0x68>)
 8002328:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800232a:	4b10      	ldr	r3, [pc, #64]	; (800236c <_sbrk+0x64>)
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4413      	add	r3, r2
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	429a      	cmp	r2, r3
 8002336:	d207      	bcs.n	8002348 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002338:	f003 fcba 	bl	8005cb0 <__errno>
 800233c:	4603      	mov	r3, r0
 800233e:	220c      	movs	r2, #12
 8002340:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002342:	f04f 33ff 	mov.w	r3, #4294967295
 8002346:	e009      	b.n	800235c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002348:	4b08      	ldr	r3, [pc, #32]	; (800236c <_sbrk+0x64>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800234e:	4b07      	ldr	r3, [pc, #28]	; (800236c <_sbrk+0x64>)
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4413      	add	r3, r2
 8002356:	4a05      	ldr	r2, [pc, #20]	; (800236c <_sbrk+0x64>)
 8002358:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800235a:	68fb      	ldr	r3, [r7, #12]
}
 800235c:	4618      	mov	r0, r3
 800235e:	3718      	adds	r7, #24
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	20018000 	.word	0x20018000
 8002368:	00000400 	.word	0x00000400
 800236c:	200003f8 	.word	0x200003f8
 8002370:	20000550 	.word	0x20000550

08002374 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002378:	4b06      	ldr	r3, [pc, #24]	; (8002394 <SystemInit+0x20>)
 800237a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800237e:	4a05      	ldr	r2, [pc, #20]	; (8002394 <SystemInit+0x20>)
 8002380:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002384:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */

}
 8002388:	bf00      	nop
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	e000ed00 	.word	0xe000ed00

08002398 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
                                                                                               ldr   sp, =_estack    		 /* set stack pointer */
 8002398:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800239c:	f7ff ffea 	bl	8002374 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023a0:	480c      	ldr	r0, [pc, #48]	; (80023d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023a2:	490d      	ldr	r1, [pc, #52]	; (80023d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023a4:	4a0d      	ldr	r2, [pc, #52]	; (80023dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023a8:	e002      	b.n	80023b0 <LoopCopyDataInit>

080023aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023ae:	3304      	adds	r3, #4

080023b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023b4:	d3f9      	bcc.n	80023aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023b6:	4a0a      	ldr	r2, [pc, #40]	; (80023e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023b8:	4c0a      	ldr	r4, [pc, #40]	; (80023e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80023ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023bc:	e001      	b.n	80023c2 <LoopFillZerobss>

080023be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023c0:	3204      	adds	r2, #4

080023c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023c4:	d3fb      	bcc.n	80023be <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80023c6:	f003 fc79 	bl	8005cbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023ca:	f7fe fceb 	bl	8000da4 <main>
  bx  lr    
 80023ce:	4770      	bx	lr
                                                                                               ldr   sp, =_estack    		 /* set stack pointer */
 80023d0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80023d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023d8:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80023dc:	080069f8 	.word	0x080069f8
  ldr r2, =_sbss
 80023e0:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80023e4:	2000054c 	.word	0x2000054c

080023e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023e8:	e7fe      	b.n	80023e8 <ADC_IRQHandler>
	...

080023ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023f0:	4b0e      	ldr	r3, [pc, #56]	; (800242c <HAL_Init+0x40>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a0d      	ldr	r2, [pc, #52]	; (800242c <HAL_Init+0x40>)
 80023f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023fc:	4b0b      	ldr	r3, [pc, #44]	; (800242c <HAL_Init+0x40>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a0a      	ldr	r2, [pc, #40]	; (800242c <HAL_Init+0x40>)
 8002402:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002406:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002408:	4b08      	ldr	r3, [pc, #32]	; (800242c <HAL_Init+0x40>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a07      	ldr	r2, [pc, #28]	; (800242c <HAL_Init+0x40>)
 800240e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002412:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002414:	2003      	movs	r0, #3
 8002416:	f000 f94f 	bl	80026b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800241a:	2000      	movs	r0, #0
 800241c:	f000 f808 	bl	8002430 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002420:	f7ff fbfa 	bl	8001c18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	40023c00 	.word	0x40023c00

08002430 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002438:	4b12      	ldr	r3, [pc, #72]	; (8002484 <HAL_InitTick+0x54>)
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	4b12      	ldr	r3, [pc, #72]	; (8002488 <HAL_InitTick+0x58>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	4619      	mov	r1, r3
 8002442:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002446:	fbb3 f3f1 	udiv	r3, r3, r1
 800244a:	fbb2 f3f3 	udiv	r3, r2, r3
 800244e:	4618      	mov	r0, r3
 8002450:	f000 f967 	bl	8002722 <HAL_SYSTICK_Config>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e00e      	b.n	800247c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2b0f      	cmp	r3, #15
 8002462:	d80a      	bhi.n	800247a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002464:	2200      	movs	r2, #0
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	f04f 30ff 	mov.w	r0, #4294967295
 800246c:	f000 f92f 	bl	80026ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002470:	4a06      	ldr	r2, [pc, #24]	; (800248c <HAL_InitTick+0x5c>)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002476:	2300      	movs	r3, #0
 8002478:	e000      	b.n	800247c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
}
 800247c:	4618      	mov	r0, r3
 800247e:	3708      	adds	r7, #8
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	20000020 	.word	0x20000020
 8002488:	20000028 	.word	0x20000028
 800248c:	20000024 	.word	0x20000024

08002490 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002494:	4b06      	ldr	r3, [pc, #24]	; (80024b0 <HAL_IncTick+0x20>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	461a      	mov	r2, r3
 800249a:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <HAL_IncTick+0x24>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4413      	add	r3, r2
 80024a0:	4a04      	ldr	r2, [pc, #16]	; (80024b4 <HAL_IncTick+0x24>)
 80024a2:	6013      	str	r3, [r2, #0]
}
 80024a4:	bf00      	nop
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	20000028 	.word	0x20000028
 80024b4:	200003fc 	.word	0x200003fc

080024b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  return uwTick;
 80024bc:	4b03      	ldr	r3, [pc, #12]	; (80024cc <HAL_GetTick+0x14>)
 80024be:	681b      	ldr	r3, [r3, #0]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	200003fc 	.word	0x200003fc

080024d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024d8:	f7ff ffee 	bl	80024b8 <HAL_GetTick>
 80024dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e8:	d005      	beq.n	80024f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024ea:	4b0a      	ldr	r3, [pc, #40]	; (8002514 <HAL_Delay+0x44>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	461a      	mov	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	4413      	add	r3, r2
 80024f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024f6:	bf00      	nop
 80024f8:	f7ff ffde 	bl	80024b8 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	429a      	cmp	r2, r3
 8002506:	d8f7      	bhi.n	80024f8 <HAL_Delay+0x28>
  {
  }
}
 8002508:	bf00      	nop
 800250a:	bf00      	nop
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	20000028 	.word	0x20000028

08002518 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f003 0307 	and.w	r3, r3, #7
 8002526:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002528:	4b0c      	ldr	r3, [pc, #48]	; (800255c <__NVIC_SetPriorityGrouping+0x44>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800252e:	68ba      	ldr	r2, [r7, #8]
 8002530:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002534:	4013      	ands	r3, r2
 8002536:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002540:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002544:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002548:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800254a:	4a04      	ldr	r2, [pc, #16]	; (800255c <__NVIC_SetPriorityGrouping+0x44>)
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	60d3      	str	r3, [r2, #12]
}
 8002550:	bf00      	nop
 8002552:	3714      	adds	r7, #20
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr
 800255c:	e000ed00 	.word	0xe000ed00

08002560 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002564:	4b04      	ldr	r3, [pc, #16]	; (8002578 <__NVIC_GetPriorityGrouping+0x18>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	0a1b      	lsrs	r3, r3, #8
 800256a:	f003 0307 	and.w	r3, r3, #7
}
 800256e:	4618      	mov	r0, r3
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	e000ed00 	.word	0xe000ed00

0800257c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	4603      	mov	r3, r0
 8002584:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258a:	2b00      	cmp	r3, #0
 800258c:	db0b      	blt.n	80025a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800258e:	79fb      	ldrb	r3, [r7, #7]
 8002590:	f003 021f 	and.w	r2, r3, #31
 8002594:	4907      	ldr	r1, [pc, #28]	; (80025b4 <__NVIC_EnableIRQ+0x38>)
 8002596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259a:	095b      	lsrs	r3, r3, #5
 800259c:	2001      	movs	r0, #1
 800259e:	fa00 f202 	lsl.w	r2, r0, r2
 80025a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025a6:	bf00      	nop
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	e000e100 	.word	0xe000e100

080025b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4603      	mov	r3, r0
 80025c0:	6039      	str	r1, [r7, #0]
 80025c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	db0a      	blt.n	80025e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	b2da      	uxtb	r2, r3
 80025d0:	490c      	ldr	r1, [pc, #48]	; (8002604 <__NVIC_SetPriority+0x4c>)
 80025d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d6:	0112      	lsls	r2, r2, #4
 80025d8:	b2d2      	uxtb	r2, r2
 80025da:	440b      	add	r3, r1
 80025dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025e0:	e00a      	b.n	80025f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	b2da      	uxtb	r2, r3
 80025e6:	4908      	ldr	r1, [pc, #32]	; (8002608 <__NVIC_SetPriority+0x50>)
 80025e8:	79fb      	ldrb	r3, [r7, #7]
 80025ea:	f003 030f 	and.w	r3, r3, #15
 80025ee:	3b04      	subs	r3, #4
 80025f0:	0112      	lsls	r2, r2, #4
 80025f2:	b2d2      	uxtb	r2, r2
 80025f4:	440b      	add	r3, r1
 80025f6:	761a      	strb	r2, [r3, #24]
}
 80025f8:	bf00      	nop
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr
 8002604:	e000e100 	.word	0xe000e100
 8002608:	e000ed00 	.word	0xe000ed00

0800260c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800260c:	b480      	push	{r7}
 800260e:	b089      	sub	sp, #36	; 0x24
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f003 0307 	and.w	r3, r3, #7
 800261e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	f1c3 0307 	rsb	r3, r3, #7
 8002626:	2b04      	cmp	r3, #4
 8002628:	bf28      	it	cs
 800262a:	2304      	movcs	r3, #4
 800262c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	3304      	adds	r3, #4
 8002632:	2b06      	cmp	r3, #6
 8002634:	d902      	bls.n	800263c <NVIC_EncodePriority+0x30>
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	3b03      	subs	r3, #3
 800263a:	e000      	b.n	800263e <NVIC_EncodePriority+0x32>
 800263c:	2300      	movs	r3, #0
 800263e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002640:	f04f 32ff 	mov.w	r2, #4294967295
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	43da      	mvns	r2, r3
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	401a      	ands	r2, r3
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002654:	f04f 31ff 	mov.w	r1, #4294967295
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	fa01 f303 	lsl.w	r3, r1, r3
 800265e:	43d9      	mvns	r1, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002664:	4313      	orrs	r3, r2
         );
}
 8002666:	4618      	mov	r0, r3
 8002668:	3724      	adds	r7, #36	; 0x24
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
	...

08002674 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	3b01      	subs	r3, #1
 8002680:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002684:	d301      	bcc.n	800268a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002686:	2301      	movs	r3, #1
 8002688:	e00f      	b.n	80026aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800268a:	4a0a      	ldr	r2, [pc, #40]	; (80026b4 <SysTick_Config+0x40>)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	3b01      	subs	r3, #1
 8002690:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002692:	210f      	movs	r1, #15
 8002694:	f04f 30ff 	mov.w	r0, #4294967295
 8002698:	f7ff ff8e 	bl	80025b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800269c:	4b05      	ldr	r3, [pc, #20]	; (80026b4 <SysTick_Config+0x40>)
 800269e:	2200      	movs	r2, #0
 80026a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026a2:	4b04      	ldr	r3, [pc, #16]	; (80026b4 <SysTick_Config+0x40>)
 80026a4:	2207      	movs	r2, #7
 80026a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	e000e010 	.word	0xe000e010

080026b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f7ff ff29 	bl	8002518 <__NVIC_SetPriorityGrouping>
}
 80026c6:	bf00      	nop
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b086      	sub	sp, #24
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	4603      	mov	r3, r0
 80026d6:	60b9      	str	r1, [r7, #8]
 80026d8:	607a      	str	r2, [r7, #4]
 80026da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026dc:	2300      	movs	r3, #0
 80026de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026e0:	f7ff ff3e 	bl	8002560 <__NVIC_GetPriorityGrouping>
 80026e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	68b9      	ldr	r1, [r7, #8]
 80026ea:	6978      	ldr	r0, [r7, #20]
 80026ec:	f7ff ff8e 	bl	800260c <NVIC_EncodePriority>
 80026f0:	4602      	mov	r2, r0
 80026f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026f6:	4611      	mov	r1, r2
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff ff5d 	bl	80025b8 <__NVIC_SetPriority>
}
 80026fe:	bf00      	nop
 8002700:	3718      	adds	r7, #24
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b082      	sub	sp, #8
 800270a:	af00      	add	r7, sp, #0
 800270c:	4603      	mov	r3, r0
 800270e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff ff31 	bl	800257c <__NVIC_EnableIRQ>
}
 800271a:	bf00      	nop
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b082      	sub	sp, #8
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f7ff ffa2 	bl	8002674 <SysTick_Config>
 8002730:	4603      	mov	r3, r0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b084      	sub	sp, #16
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002746:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002748:	f7ff feb6 	bl	80024b8 <HAL_GetTick>
 800274c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d008      	beq.n	800276c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2280      	movs	r2, #128	; 0x80
 800275e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e052      	b.n	8002812 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f022 0216 	bic.w	r2, r2, #22
 800277a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	695a      	ldr	r2, [r3, #20]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800278a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002790:	2b00      	cmp	r3, #0
 8002792:	d103      	bne.n	800279c <HAL_DMA_Abort+0x62>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002798:	2b00      	cmp	r3, #0
 800279a:	d007      	beq.n	80027ac <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f022 0208 	bic.w	r2, r2, #8
 80027aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f022 0201 	bic.w	r2, r2, #1
 80027ba:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027bc:	e013      	b.n	80027e6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027be:	f7ff fe7b 	bl	80024b8 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b05      	cmp	r3, #5
 80027ca:	d90c      	bls.n	80027e6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2220      	movs	r2, #32
 80027d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2203      	movs	r2, #3
 80027d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e015      	b.n	8002812 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d1e4      	bne.n	80027be <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f8:	223f      	movs	r2, #63	; 0x3f
 80027fa:	409a      	lsls	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800281a:	b480      	push	{r7}
 800281c:	b083      	sub	sp, #12
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d004      	beq.n	8002838 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2280      	movs	r2, #128	; 0x80
 8002832:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e00c      	b.n	8002852 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2205      	movs	r2, #5
 800283c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 0201 	bic.w	r2, r2, #1
 800284e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
	...

08002860 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002860:	b480      	push	{r7}
 8002862:	b089      	sub	sp, #36	; 0x24
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800286a:	2300      	movs	r3, #0
 800286c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800286e:	2300      	movs	r3, #0
 8002870:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002872:	2300      	movs	r3, #0
 8002874:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002876:	2300      	movs	r3, #0
 8002878:	61fb      	str	r3, [r7, #28]
 800287a:	e159      	b.n	8002b30 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800287c:	2201      	movs	r2, #1
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	4013      	ands	r3, r2
 800288e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	429a      	cmp	r2, r3
 8002896:	f040 8148 	bne.w	8002b2a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f003 0303 	and.w	r3, r3, #3
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d005      	beq.n	80028b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d130      	bne.n	8002914 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	2203      	movs	r2, #3
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	43db      	mvns	r3, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4013      	ands	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	68da      	ldr	r2, [r3, #12]
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	4313      	orrs	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028e8:	2201      	movs	r2, #1
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	43db      	mvns	r3, r3
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	4013      	ands	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	091b      	lsrs	r3, r3, #4
 80028fe:	f003 0201 	and.w	r2, r3, #1
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	4313      	orrs	r3, r2
 800290c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f003 0303 	and.w	r3, r3, #3
 800291c:	2b03      	cmp	r3, #3
 800291e:	d017      	beq.n	8002950 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	2203      	movs	r2, #3
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	43db      	mvns	r3, r3
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	4013      	ands	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	4313      	orrs	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f003 0303 	and.w	r3, r3, #3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d123      	bne.n	80029a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	08da      	lsrs	r2, r3, #3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	3208      	adds	r2, #8
 8002964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002968:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	f003 0307 	and.w	r3, r3, #7
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	220f      	movs	r2, #15
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	43db      	mvns	r3, r3
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	4013      	ands	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	691a      	ldr	r2, [r3, #16]
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	f003 0307 	and.w	r3, r3, #7
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	4313      	orrs	r3, r2
 8002994:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	08da      	lsrs	r2, r3, #3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	3208      	adds	r2, #8
 800299e:	69b9      	ldr	r1, [r7, #24]
 80029a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	2203      	movs	r2, #3
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	43db      	mvns	r3, r3
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	4013      	ands	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f003 0203 	and.w	r2, r3, #3
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 80a2 	beq.w	8002b2a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029e6:	2300      	movs	r3, #0
 80029e8:	60fb      	str	r3, [r7, #12]
 80029ea:	4b57      	ldr	r3, [pc, #348]	; (8002b48 <HAL_GPIO_Init+0x2e8>)
 80029ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ee:	4a56      	ldr	r2, [pc, #344]	; (8002b48 <HAL_GPIO_Init+0x2e8>)
 80029f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029f4:	6453      	str	r3, [r2, #68]	; 0x44
 80029f6:	4b54      	ldr	r3, [pc, #336]	; (8002b48 <HAL_GPIO_Init+0x2e8>)
 80029f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a02:	4a52      	ldr	r2, [pc, #328]	; (8002b4c <HAL_GPIO_Init+0x2ec>)
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	089b      	lsrs	r3, r3, #2
 8002a08:	3302      	adds	r3, #2
 8002a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	f003 0303 	and.w	r3, r3, #3
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	220f      	movs	r2, #15
 8002a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1e:	43db      	mvns	r3, r3
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	4013      	ands	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a49      	ldr	r2, [pc, #292]	; (8002b50 <HAL_GPIO_Init+0x2f0>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d019      	beq.n	8002a62 <HAL_GPIO_Init+0x202>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a48      	ldr	r2, [pc, #288]	; (8002b54 <HAL_GPIO_Init+0x2f4>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d013      	beq.n	8002a5e <HAL_GPIO_Init+0x1fe>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a47      	ldr	r2, [pc, #284]	; (8002b58 <HAL_GPIO_Init+0x2f8>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d00d      	beq.n	8002a5a <HAL_GPIO_Init+0x1fa>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a46      	ldr	r2, [pc, #280]	; (8002b5c <HAL_GPIO_Init+0x2fc>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d007      	beq.n	8002a56 <HAL_GPIO_Init+0x1f6>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a45      	ldr	r2, [pc, #276]	; (8002b60 <HAL_GPIO_Init+0x300>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d101      	bne.n	8002a52 <HAL_GPIO_Init+0x1f2>
 8002a4e:	2304      	movs	r3, #4
 8002a50:	e008      	b.n	8002a64 <HAL_GPIO_Init+0x204>
 8002a52:	2307      	movs	r3, #7
 8002a54:	e006      	b.n	8002a64 <HAL_GPIO_Init+0x204>
 8002a56:	2303      	movs	r3, #3
 8002a58:	e004      	b.n	8002a64 <HAL_GPIO_Init+0x204>
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	e002      	b.n	8002a64 <HAL_GPIO_Init+0x204>
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e000      	b.n	8002a64 <HAL_GPIO_Init+0x204>
 8002a62:	2300      	movs	r3, #0
 8002a64:	69fa      	ldr	r2, [r7, #28]
 8002a66:	f002 0203 	and.w	r2, r2, #3
 8002a6a:	0092      	lsls	r2, r2, #2
 8002a6c:	4093      	lsls	r3, r2
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a74:	4935      	ldr	r1, [pc, #212]	; (8002b4c <HAL_GPIO_Init+0x2ec>)
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	089b      	lsrs	r3, r3, #2
 8002a7a:	3302      	adds	r3, #2
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a82:	4b38      	ldr	r3, [pc, #224]	; (8002b64 <HAL_GPIO_Init+0x304>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	43db      	mvns	r3, r3
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d003      	beq.n	8002aa6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002aa6:	4a2f      	ldr	r2, [pc, #188]	; (8002b64 <HAL_GPIO_Init+0x304>)
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002aac:	4b2d      	ldr	r3, [pc, #180]	; (8002b64 <HAL_GPIO_Init+0x304>)
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	43db      	mvns	r3, r3
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d003      	beq.n	8002ad0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ad0:	4a24      	ldr	r2, [pc, #144]	; (8002b64 <HAL_GPIO_Init+0x304>)
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ad6:	4b23      	ldr	r3, [pc, #140]	; (8002b64 <HAL_GPIO_Init+0x304>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002afa:	4a1a      	ldr	r2, [pc, #104]	; (8002b64 <HAL_GPIO_Init+0x304>)
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b00:	4b18      	ldr	r3, [pc, #96]	; (8002b64 <HAL_GPIO_Init+0x304>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d003      	beq.n	8002b24 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b24:	4a0f      	ldr	r2, [pc, #60]	; (8002b64 <HAL_GPIO_Init+0x304>)
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	61fb      	str	r3, [r7, #28]
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	2b0f      	cmp	r3, #15
 8002b34:	f67f aea2 	bls.w	800287c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b38:	bf00      	nop
 8002b3a:	bf00      	nop
 8002b3c:	3724      	adds	r7, #36	; 0x24
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	40023800 	.word	0x40023800
 8002b4c:	40013800 	.word	0x40013800
 8002b50:	40020000 	.word	0x40020000
 8002b54:	40020400 	.word	0x40020400
 8002b58:	40020800 	.word	0x40020800
 8002b5c:	40020c00 	.word	0x40020c00
 8002b60:	40021000 	.word	0x40021000
 8002b64:	40013c00 	.word	0x40013c00

08002b68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	460b      	mov	r3, r1
 8002b72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	691a      	ldr	r2, [r3, #16]
 8002b78:	887b      	ldrh	r3, [r7, #2]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d002      	beq.n	8002b86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b80:	2301      	movs	r3, #1
 8002b82:	73fb      	strb	r3, [r7, #15]
 8002b84:	e001      	b.n	8002b8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b86:	2300      	movs	r3, #0
 8002b88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3714      	adds	r7, #20
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	807b      	strh	r3, [r7, #2]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ba8:	787b      	ldrb	r3, [r7, #1]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bae:	887a      	ldrh	r2, [r7, #2]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bb4:	e003      	b.n	8002bbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bb6:	887b      	ldrh	r3, [r7, #2]
 8002bb8:	041a      	lsls	r2, r3, #16
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	619a      	str	r2, [r3, #24]
}
 8002bbe:	bf00      	nop
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
	...

08002bcc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002bd6:	4b08      	ldr	r3, [pc, #32]	; (8002bf8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bd8:	695a      	ldr	r2, [r3, #20]
 8002bda:	88fb      	ldrh	r3, [r7, #6]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d006      	beq.n	8002bf0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002be2:	4a05      	ldr	r2, [pc, #20]	; (8002bf8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002be4:	88fb      	ldrh	r3, [r7, #6]
 8002be6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002be8:	88fb      	ldrh	r3, [r7, #6]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7fd fcc6 	bl	800057c <HAL_GPIO_EXTI_Callback>
  }
}
 8002bf0:	bf00      	nop
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	40013c00 	.word	0x40013c00

08002bfc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e267      	b.n	80030de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d075      	beq.n	8002d06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c1a:	4b88      	ldr	r3, [pc, #544]	; (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 030c 	and.w	r3, r3, #12
 8002c22:	2b04      	cmp	r3, #4
 8002c24:	d00c      	beq.n	8002c40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c26:	4b85      	ldr	r3, [pc, #532]	; (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c2e:	2b08      	cmp	r3, #8
 8002c30:	d112      	bne.n	8002c58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c32:	4b82      	ldr	r3, [pc, #520]	; (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c3e:	d10b      	bne.n	8002c58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c40:	4b7e      	ldr	r3, [pc, #504]	; (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d05b      	beq.n	8002d04 <HAL_RCC_OscConfig+0x108>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d157      	bne.n	8002d04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e242      	b.n	80030de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c60:	d106      	bne.n	8002c70 <HAL_RCC_OscConfig+0x74>
 8002c62:	4b76      	ldr	r3, [pc, #472]	; (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a75      	ldr	r2, [pc, #468]	; (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c6c:	6013      	str	r3, [r2, #0]
 8002c6e:	e01d      	b.n	8002cac <HAL_RCC_OscConfig+0xb0>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c78:	d10c      	bne.n	8002c94 <HAL_RCC_OscConfig+0x98>
 8002c7a:	4b70      	ldr	r3, [pc, #448]	; (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a6f      	ldr	r2, [pc, #444]	; (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002c80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c84:	6013      	str	r3, [r2, #0]
 8002c86:	4b6d      	ldr	r3, [pc, #436]	; (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a6c      	ldr	r2, [pc, #432]	; (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002c8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c90:	6013      	str	r3, [r2, #0]
 8002c92:	e00b      	b.n	8002cac <HAL_RCC_OscConfig+0xb0>
 8002c94:	4b69      	ldr	r3, [pc, #420]	; (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a68      	ldr	r2, [pc, #416]	; (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002c9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c9e:	6013      	str	r3, [r2, #0]
 8002ca0:	4b66      	ldr	r3, [pc, #408]	; (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a65      	ldr	r2, [pc, #404]	; (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002ca6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002caa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d013      	beq.n	8002cdc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb4:	f7ff fc00 	bl	80024b8 <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cbc:	f7ff fbfc 	bl	80024b8 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b64      	cmp	r3, #100	; 0x64
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e207      	b.n	80030de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cce:	4b5b      	ldr	r3, [pc, #364]	; (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d0f0      	beq.n	8002cbc <HAL_RCC_OscConfig+0xc0>
 8002cda:	e014      	b.n	8002d06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cdc:	f7ff fbec 	bl	80024b8 <HAL_GetTick>
 8002ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ce2:	e008      	b.n	8002cf6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ce4:	f7ff fbe8 	bl	80024b8 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b64      	cmp	r3, #100	; 0x64
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e1f3      	b.n	80030de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cf6:	4b51      	ldr	r3, [pc, #324]	; (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1f0      	bne.n	8002ce4 <HAL_RCC_OscConfig+0xe8>
 8002d02:	e000      	b.n	8002d06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d063      	beq.n	8002dda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d12:	4b4a      	ldr	r3, [pc, #296]	; (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f003 030c 	and.w	r3, r3, #12
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00b      	beq.n	8002d36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d1e:	4b47      	ldr	r3, [pc, #284]	; (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d26:	2b08      	cmp	r3, #8
 8002d28:	d11c      	bne.n	8002d64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d2a:	4b44      	ldr	r3, [pc, #272]	; (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d116      	bne.n	8002d64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d36:	4b41      	ldr	r3, [pc, #260]	; (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d005      	beq.n	8002d4e <HAL_RCC_OscConfig+0x152>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d001      	beq.n	8002d4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e1c7      	b.n	80030de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d4e:	4b3b      	ldr	r3, [pc, #236]	; (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	4937      	ldr	r1, [pc, #220]	; (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d62:	e03a      	b.n	8002dda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d020      	beq.n	8002dae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d6c:	4b34      	ldr	r3, [pc, #208]	; (8002e40 <HAL_RCC_OscConfig+0x244>)
 8002d6e:	2201      	movs	r2, #1
 8002d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d72:	f7ff fba1 	bl	80024b8 <HAL_GetTick>
 8002d76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d78:	e008      	b.n	8002d8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d7a:	f7ff fb9d 	bl	80024b8 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d901      	bls.n	8002d8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e1a8      	b.n	80030de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d8c:	4b2b      	ldr	r3, [pc, #172]	; (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d0f0      	beq.n	8002d7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d98:	4b28      	ldr	r3, [pc, #160]	; (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	00db      	lsls	r3, r3, #3
 8002da6:	4925      	ldr	r1, [pc, #148]	; (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	600b      	str	r3, [r1, #0]
 8002dac:	e015      	b.n	8002dda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dae:	4b24      	ldr	r3, [pc, #144]	; (8002e40 <HAL_RCC_OscConfig+0x244>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db4:	f7ff fb80 	bl	80024b8 <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dbc:	f7ff fb7c 	bl	80024b8 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e187      	b.n	80030de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dce:	4b1b      	ldr	r3, [pc, #108]	; (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1f0      	bne.n	8002dbc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0308 	and.w	r3, r3, #8
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d036      	beq.n	8002e54 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d016      	beq.n	8002e1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dee:	4b15      	ldr	r3, [pc, #84]	; (8002e44 <HAL_RCC_OscConfig+0x248>)
 8002df0:	2201      	movs	r2, #1
 8002df2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df4:	f7ff fb60 	bl	80024b8 <HAL_GetTick>
 8002df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dfc:	f7ff fb5c 	bl	80024b8 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e167      	b.n	80030de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e0e:	4b0b      	ldr	r3, [pc, #44]	; (8002e3c <HAL_RCC_OscConfig+0x240>)
 8002e10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d0f0      	beq.n	8002dfc <HAL_RCC_OscConfig+0x200>
 8002e1a:	e01b      	b.n	8002e54 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e1c:	4b09      	ldr	r3, [pc, #36]	; (8002e44 <HAL_RCC_OscConfig+0x248>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e22:	f7ff fb49 	bl	80024b8 <HAL_GetTick>
 8002e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e28:	e00e      	b.n	8002e48 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e2a:	f7ff fb45 	bl	80024b8 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d907      	bls.n	8002e48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e150      	b.n	80030de <HAL_RCC_OscConfig+0x4e2>
 8002e3c:	40023800 	.word	0x40023800
 8002e40:	42470000 	.word	0x42470000
 8002e44:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e48:	4b88      	ldr	r3, [pc, #544]	; (800306c <HAL_RCC_OscConfig+0x470>)
 8002e4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1ea      	bne.n	8002e2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0304 	and.w	r3, r3, #4
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f000 8097 	beq.w	8002f90 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e62:	2300      	movs	r3, #0
 8002e64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e66:	4b81      	ldr	r3, [pc, #516]	; (800306c <HAL_RCC_OscConfig+0x470>)
 8002e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d10f      	bne.n	8002e92 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e72:	2300      	movs	r3, #0
 8002e74:	60bb      	str	r3, [r7, #8]
 8002e76:	4b7d      	ldr	r3, [pc, #500]	; (800306c <HAL_RCC_OscConfig+0x470>)
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	4a7c      	ldr	r2, [pc, #496]	; (800306c <HAL_RCC_OscConfig+0x470>)
 8002e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e80:	6413      	str	r3, [r2, #64]	; 0x40
 8002e82:	4b7a      	ldr	r3, [pc, #488]	; (800306c <HAL_RCC_OscConfig+0x470>)
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e8a:	60bb      	str	r3, [r7, #8]
 8002e8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e92:	4b77      	ldr	r3, [pc, #476]	; (8003070 <HAL_RCC_OscConfig+0x474>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d118      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e9e:	4b74      	ldr	r3, [pc, #464]	; (8003070 <HAL_RCC_OscConfig+0x474>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a73      	ldr	r2, [pc, #460]	; (8003070 <HAL_RCC_OscConfig+0x474>)
 8002ea4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ea8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eaa:	f7ff fb05 	bl	80024b8 <HAL_GetTick>
 8002eae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb0:	e008      	b.n	8002ec4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eb2:	f7ff fb01 	bl	80024b8 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e10c      	b.n	80030de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec4:	4b6a      	ldr	r3, [pc, #424]	; (8003070 <HAL_RCC_OscConfig+0x474>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d0f0      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d106      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x2ea>
 8002ed8:	4b64      	ldr	r3, [pc, #400]	; (800306c <HAL_RCC_OscConfig+0x470>)
 8002eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002edc:	4a63      	ldr	r2, [pc, #396]	; (800306c <HAL_RCC_OscConfig+0x470>)
 8002ede:	f043 0301 	orr.w	r3, r3, #1
 8002ee2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ee4:	e01c      	b.n	8002f20 <HAL_RCC_OscConfig+0x324>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	2b05      	cmp	r3, #5
 8002eec:	d10c      	bne.n	8002f08 <HAL_RCC_OscConfig+0x30c>
 8002eee:	4b5f      	ldr	r3, [pc, #380]	; (800306c <HAL_RCC_OscConfig+0x470>)
 8002ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef2:	4a5e      	ldr	r2, [pc, #376]	; (800306c <HAL_RCC_OscConfig+0x470>)
 8002ef4:	f043 0304 	orr.w	r3, r3, #4
 8002ef8:	6713      	str	r3, [r2, #112]	; 0x70
 8002efa:	4b5c      	ldr	r3, [pc, #368]	; (800306c <HAL_RCC_OscConfig+0x470>)
 8002efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efe:	4a5b      	ldr	r2, [pc, #364]	; (800306c <HAL_RCC_OscConfig+0x470>)
 8002f00:	f043 0301 	orr.w	r3, r3, #1
 8002f04:	6713      	str	r3, [r2, #112]	; 0x70
 8002f06:	e00b      	b.n	8002f20 <HAL_RCC_OscConfig+0x324>
 8002f08:	4b58      	ldr	r3, [pc, #352]	; (800306c <HAL_RCC_OscConfig+0x470>)
 8002f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0c:	4a57      	ldr	r2, [pc, #348]	; (800306c <HAL_RCC_OscConfig+0x470>)
 8002f0e:	f023 0301 	bic.w	r3, r3, #1
 8002f12:	6713      	str	r3, [r2, #112]	; 0x70
 8002f14:	4b55      	ldr	r3, [pc, #340]	; (800306c <HAL_RCC_OscConfig+0x470>)
 8002f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f18:	4a54      	ldr	r2, [pc, #336]	; (800306c <HAL_RCC_OscConfig+0x470>)
 8002f1a:	f023 0304 	bic.w	r3, r3, #4
 8002f1e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d015      	beq.n	8002f54 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f28:	f7ff fac6 	bl	80024b8 <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f2e:	e00a      	b.n	8002f46 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f30:	f7ff fac2 	bl	80024b8 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e0cb      	b.n	80030de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f46:	4b49      	ldr	r3, [pc, #292]	; (800306c <HAL_RCC_OscConfig+0x470>)
 8002f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d0ee      	beq.n	8002f30 <HAL_RCC_OscConfig+0x334>
 8002f52:	e014      	b.n	8002f7e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f54:	f7ff fab0 	bl	80024b8 <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f5a:	e00a      	b.n	8002f72 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f5c:	f7ff faac 	bl	80024b8 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e0b5      	b.n	80030de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f72:	4b3e      	ldr	r3, [pc, #248]	; (800306c <HAL_RCC_OscConfig+0x470>)
 8002f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1ee      	bne.n	8002f5c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f7e:	7dfb      	ldrb	r3, [r7, #23]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d105      	bne.n	8002f90 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f84:	4b39      	ldr	r3, [pc, #228]	; (800306c <HAL_RCC_OscConfig+0x470>)
 8002f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f88:	4a38      	ldr	r2, [pc, #224]	; (800306c <HAL_RCC_OscConfig+0x470>)
 8002f8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f8e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	f000 80a1 	beq.w	80030dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f9a:	4b34      	ldr	r3, [pc, #208]	; (800306c <HAL_RCC_OscConfig+0x470>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f003 030c 	and.w	r3, r3, #12
 8002fa2:	2b08      	cmp	r3, #8
 8002fa4:	d05c      	beq.n	8003060 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d141      	bne.n	8003032 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fae:	4b31      	ldr	r3, [pc, #196]	; (8003074 <HAL_RCC_OscConfig+0x478>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb4:	f7ff fa80 	bl	80024b8 <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fbc:	f7ff fa7c 	bl	80024b8 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e087      	b.n	80030de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fce:	4b27      	ldr	r3, [pc, #156]	; (800306c <HAL_RCC_OscConfig+0x470>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1f0      	bne.n	8002fbc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	69da      	ldr	r2, [r3, #28]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe8:	019b      	lsls	r3, r3, #6
 8002fea:	431a      	orrs	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff0:	085b      	lsrs	r3, r3, #1
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	041b      	lsls	r3, r3, #16
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffc:	061b      	lsls	r3, r3, #24
 8002ffe:	491b      	ldr	r1, [pc, #108]	; (800306c <HAL_RCC_OscConfig+0x470>)
 8003000:	4313      	orrs	r3, r2
 8003002:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003004:	4b1b      	ldr	r3, [pc, #108]	; (8003074 <HAL_RCC_OscConfig+0x478>)
 8003006:	2201      	movs	r2, #1
 8003008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800300a:	f7ff fa55 	bl	80024b8 <HAL_GetTick>
 800300e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003010:	e008      	b.n	8003024 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003012:	f7ff fa51 	bl	80024b8 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e05c      	b.n	80030de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003024:	4b11      	ldr	r3, [pc, #68]	; (800306c <HAL_RCC_OscConfig+0x470>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d0f0      	beq.n	8003012 <HAL_RCC_OscConfig+0x416>
 8003030:	e054      	b.n	80030dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003032:	4b10      	ldr	r3, [pc, #64]	; (8003074 <HAL_RCC_OscConfig+0x478>)
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003038:	f7ff fa3e 	bl	80024b8 <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003040:	f7ff fa3a 	bl	80024b8 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e045      	b.n	80030de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003052:	4b06      	ldr	r3, [pc, #24]	; (800306c <HAL_RCC_OscConfig+0x470>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1f0      	bne.n	8003040 <HAL_RCC_OscConfig+0x444>
 800305e:	e03d      	b.n	80030dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d107      	bne.n	8003078 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e038      	b.n	80030de <HAL_RCC_OscConfig+0x4e2>
 800306c:	40023800 	.word	0x40023800
 8003070:	40007000 	.word	0x40007000
 8003074:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003078:	4b1b      	ldr	r3, [pc, #108]	; (80030e8 <HAL_RCC_OscConfig+0x4ec>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d028      	beq.n	80030d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003090:	429a      	cmp	r2, r3
 8003092:	d121      	bne.n	80030d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800309e:	429a      	cmp	r2, r3
 80030a0:	d11a      	bne.n	80030d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030a8:	4013      	ands	r3, r2
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d111      	bne.n	80030d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030be:	085b      	lsrs	r3, r3, #1
 80030c0:	3b01      	subs	r3, #1
 80030c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d107      	bne.n	80030d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d001      	beq.n	80030dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e000      	b.n	80030de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3718      	adds	r7, #24
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	40023800 	.word	0x40023800

080030ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d101      	bne.n	8003100 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e0cc      	b.n	800329a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003100:	4b68      	ldr	r3, [pc, #416]	; (80032a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0307 	and.w	r3, r3, #7
 8003108:	683a      	ldr	r2, [r7, #0]
 800310a:	429a      	cmp	r2, r3
 800310c:	d90c      	bls.n	8003128 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800310e:	4b65      	ldr	r3, [pc, #404]	; (80032a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003110:	683a      	ldr	r2, [r7, #0]
 8003112:	b2d2      	uxtb	r2, r2
 8003114:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003116:	4b63      	ldr	r3, [pc, #396]	; (80032a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0307 	and.w	r3, r3, #7
 800311e:	683a      	ldr	r2, [r7, #0]
 8003120:	429a      	cmp	r2, r3
 8003122:	d001      	beq.n	8003128 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e0b8      	b.n	800329a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d020      	beq.n	8003176 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0304 	and.w	r3, r3, #4
 800313c:	2b00      	cmp	r3, #0
 800313e:	d005      	beq.n	800314c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003140:	4b59      	ldr	r3, [pc, #356]	; (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	4a58      	ldr	r2, [pc, #352]	; (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003146:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800314a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0308 	and.w	r3, r3, #8
 8003154:	2b00      	cmp	r3, #0
 8003156:	d005      	beq.n	8003164 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003158:	4b53      	ldr	r3, [pc, #332]	; (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	4a52      	ldr	r2, [pc, #328]	; (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 800315e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003162:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003164:	4b50      	ldr	r3, [pc, #320]	; (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	494d      	ldr	r1, [pc, #308]	; (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003172:	4313      	orrs	r3, r2
 8003174:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	2b00      	cmp	r3, #0
 8003180:	d044      	beq.n	800320c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d107      	bne.n	800319a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800318a:	4b47      	ldr	r3, [pc, #284]	; (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d119      	bne.n	80031ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e07f      	b.n	800329a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d003      	beq.n	80031aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031a6:	2b03      	cmp	r3, #3
 80031a8:	d107      	bne.n	80031ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031aa:	4b3f      	ldr	r3, [pc, #252]	; (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d109      	bne.n	80031ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e06f      	b.n	800329a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ba:	4b3b      	ldr	r3, [pc, #236]	; (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e067      	b.n	800329a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031ca:	4b37      	ldr	r3, [pc, #220]	; (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f023 0203 	bic.w	r2, r3, #3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	4934      	ldr	r1, [pc, #208]	; (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031dc:	f7ff f96c 	bl	80024b8 <HAL_GetTick>
 80031e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031e2:	e00a      	b.n	80031fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031e4:	f7ff f968 	bl	80024b8 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e04f      	b.n	800329a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031fa:	4b2b      	ldr	r3, [pc, #172]	; (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f003 020c 	and.w	r2, r3, #12
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	429a      	cmp	r2, r3
 800320a:	d1eb      	bne.n	80031e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800320c:	4b25      	ldr	r3, [pc, #148]	; (80032a4 <HAL_RCC_ClockConfig+0x1b8>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0307 	and.w	r3, r3, #7
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	429a      	cmp	r2, r3
 8003218:	d20c      	bcs.n	8003234 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800321a:	4b22      	ldr	r3, [pc, #136]	; (80032a4 <HAL_RCC_ClockConfig+0x1b8>)
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	b2d2      	uxtb	r2, r2
 8003220:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003222:	4b20      	ldr	r3, [pc, #128]	; (80032a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0307 	and.w	r3, r3, #7
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	429a      	cmp	r2, r3
 800322e:	d001      	beq.n	8003234 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e032      	b.n	800329a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0304 	and.w	r3, r3, #4
 800323c:	2b00      	cmp	r3, #0
 800323e:	d008      	beq.n	8003252 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003240:	4b19      	ldr	r3, [pc, #100]	; (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	4916      	ldr	r1, [pc, #88]	; (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 800324e:	4313      	orrs	r3, r2
 8003250:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0308 	and.w	r3, r3, #8
 800325a:	2b00      	cmp	r3, #0
 800325c:	d009      	beq.n	8003272 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800325e:	4b12      	ldr	r3, [pc, #72]	; (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	490e      	ldr	r1, [pc, #56]	; (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 800326e:	4313      	orrs	r3, r2
 8003270:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003272:	f000 f821 	bl	80032b8 <HAL_RCC_GetSysClockFreq>
 8003276:	4602      	mov	r2, r0
 8003278:	4b0b      	ldr	r3, [pc, #44]	; (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	091b      	lsrs	r3, r3, #4
 800327e:	f003 030f 	and.w	r3, r3, #15
 8003282:	490a      	ldr	r1, [pc, #40]	; (80032ac <HAL_RCC_ClockConfig+0x1c0>)
 8003284:	5ccb      	ldrb	r3, [r1, r3]
 8003286:	fa22 f303 	lsr.w	r3, r2, r3
 800328a:	4a09      	ldr	r2, [pc, #36]	; (80032b0 <HAL_RCC_ClockConfig+0x1c4>)
 800328c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800328e:	4b09      	ldr	r3, [pc, #36]	; (80032b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f7ff f8cc 	bl	8002430 <HAL_InitTick>

  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	40023c00 	.word	0x40023c00
 80032a8:	40023800 	.word	0x40023800
 80032ac:	0800689c 	.word	0x0800689c
 80032b0:	20000020 	.word	0x20000020
 80032b4:	20000024 	.word	0x20000024

080032b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032bc:	b094      	sub	sp, #80	; 0x50
 80032be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032c0:	2300      	movs	r3, #0
 80032c2:	647b      	str	r3, [r7, #68]	; 0x44
 80032c4:	2300      	movs	r3, #0
 80032c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032c8:	2300      	movs	r3, #0
 80032ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80032cc:	2300      	movs	r3, #0
 80032ce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032d0:	4b79      	ldr	r3, [pc, #484]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f003 030c 	and.w	r3, r3, #12
 80032d8:	2b08      	cmp	r3, #8
 80032da:	d00d      	beq.n	80032f8 <HAL_RCC_GetSysClockFreq+0x40>
 80032dc:	2b08      	cmp	r3, #8
 80032de:	f200 80e1 	bhi.w	80034a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d002      	beq.n	80032ec <HAL_RCC_GetSysClockFreq+0x34>
 80032e6:	2b04      	cmp	r3, #4
 80032e8:	d003      	beq.n	80032f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80032ea:	e0db      	b.n	80034a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032ec:	4b73      	ldr	r3, [pc, #460]	; (80034bc <HAL_RCC_GetSysClockFreq+0x204>)
 80032ee:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80032f0:	e0db      	b.n	80034aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032f2:	4b73      	ldr	r3, [pc, #460]	; (80034c0 <HAL_RCC_GetSysClockFreq+0x208>)
 80032f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032f6:	e0d8      	b.n	80034aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032f8:	4b6f      	ldr	r3, [pc, #444]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003300:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003302:	4b6d      	ldr	r3, [pc, #436]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d063      	beq.n	80033d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800330e:	4b6a      	ldr	r3, [pc, #424]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	099b      	lsrs	r3, r3, #6
 8003314:	2200      	movs	r2, #0
 8003316:	63bb      	str	r3, [r7, #56]	; 0x38
 8003318:	63fa      	str	r2, [r7, #60]	; 0x3c
 800331a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800331c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003320:	633b      	str	r3, [r7, #48]	; 0x30
 8003322:	2300      	movs	r3, #0
 8003324:	637b      	str	r3, [r7, #52]	; 0x34
 8003326:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800332a:	4622      	mov	r2, r4
 800332c:	462b      	mov	r3, r5
 800332e:	f04f 0000 	mov.w	r0, #0
 8003332:	f04f 0100 	mov.w	r1, #0
 8003336:	0159      	lsls	r1, r3, #5
 8003338:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800333c:	0150      	lsls	r0, r2, #5
 800333e:	4602      	mov	r2, r0
 8003340:	460b      	mov	r3, r1
 8003342:	4621      	mov	r1, r4
 8003344:	1a51      	subs	r1, r2, r1
 8003346:	6139      	str	r1, [r7, #16]
 8003348:	4629      	mov	r1, r5
 800334a:	eb63 0301 	sbc.w	r3, r3, r1
 800334e:	617b      	str	r3, [r7, #20]
 8003350:	f04f 0200 	mov.w	r2, #0
 8003354:	f04f 0300 	mov.w	r3, #0
 8003358:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800335c:	4659      	mov	r1, fp
 800335e:	018b      	lsls	r3, r1, #6
 8003360:	4651      	mov	r1, sl
 8003362:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003366:	4651      	mov	r1, sl
 8003368:	018a      	lsls	r2, r1, #6
 800336a:	4651      	mov	r1, sl
 800336c:	ebb2 0801 	subs.w	r8, r2, r1
 8003370:	4659      	mov	r1, fp
 8003372:	eb63 0901 	sbc.w	r9, r3, r1
 8003376:	f04f 0200 	mov.w	r2, #0
 800337a:	f04f 0300 	mov.w	r3, #0
 800337e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003382:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003386:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800338a:	4690      	mov	r8, r2
 800338c:	4699      	mov	r9, r3
 800338e:	4623      	mov	r3, r4
 8003390:	eb18 0303 	adds.w	r3, r8, r3
 8003394:	60bb      	str	r3, [r7, #8]
 8003396:	462b      	mov	r3, r5
 8003398:	eb49 0303 	adc.w	r3, r9, r3
 800339c:	60fb      	str	r3, [r7, #12]
 800339e:	f04f 0200 	mov.w	r2, #0
 80033a2:	f04f 0300 	mov.w	r3, #0
 80033a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80033aa:	4629      	mov	r1, r5
 80033ac:	024b      	lsls	r3, r1, #9
 80033ae:	4621      	mov	r1, r4
 80033b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80033b4:	4621      	mov	r1, r4
 80033b6:	024a      	lsls	r2, r1, #9
 80033b8:	4610      	mov	r0, r2
 80033ba:	4619      	mov	r1, r3
 80033bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033be:	2200      	movs	r2, #0
 80033c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80033c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80033c8:	f7fc ff5a 	bl	8000280 <__aeabi_uldivmod>
 80033cc:	4602      	mov	r2, r0
 80033ce:	460b      	mov	r3, r1
 80033d0:	4613      	mov	r3, r2
 80033d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033d4:	e058      	b.n	8003488 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033d6:	4b38      	ldr	r3, [pc, #224]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	099b      	lsrs	r3, r3, #6
 80033dc:	2200      	movs	r2, #0
 80033de:	4618      	mov	r0, r3
 80033e0:	4611      	mov	r1, r2
 80033e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80033e6:	623b      	str	r3, [r7, #32]
 80033e8:	2300      	movs	r3, #0
 80033ea:	627b      	str	r3, [r7, #36]	; 0x24
 80033ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80033f0:	4642      	mov	r2, r8
 80033f2:	464b      	mov	r3, r9
 80033f4:	f04f 0000 	mov.w	r0, #0
 80033f8:	f04f 0100 	mov.w	r1, #0
 80033fc:	0159      	lsls	r1, r3, #5
 80033fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003402:	0150      	lsls	r0, r2, #5
 8003404:	4602      	mov	r2, r0
 8003406:	460b      	mov	r3, r1
 8003408:	4641      	mov	r1, r8
 800340a:	ebb2 0a01 	subs.w	sl, r2, r1
 800340e:	4649      	mov	r1, r9
 8003410:	eb63 0b01 	sbc.w	fp, r3, r1
 8003414:	f04f 0200 	mov.w	r2, #0
 8003418:	f04f 0300 	mov.w	r3, #0
 800341c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003420:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003424:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003428:	ebb2 040a 	subs.w	r4, r2, sl
 800342c:	eb63 050b 	sbc.w	r5, r3, fp
 8003430:	f04f 0200 	mov.w	r2, #0
 8003434:	f04f 0300 	mov.w	r3, #0
 8003438:	00eb      	lsls	r3, r5, #3
 800343a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800343e:	00e2      	lsls	r2, r4, #3
 8003440:	4614      	mov	r4, r2
 8003442:	461d      	mov	r5, r3
 8003444:	4643      	mov	r3, r8
 8003446:	18e3      	adds	r3, r4, r3
 8003448:	603b      	str	r3, [r7, #0]
 800344a:	464b      	mov	r3, r9
 800344c:	eb45 0303 	adc.w	r3, r5, r3
 8003450:	607b      	str	r3, [r7, #4]
 8003452:	f04f 0200 	mov.w	r2, #0
 8003456:	f04f 0300 	mov.w	r3, #0
 800345a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800345e:	4629      	mov	r1, r5
 8003460:	028b      	lsls	r3, r1, #10
 8003462:	4621      	mov	r1, r4
 8003464:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003468:	4621      	mov	r1, r4
 800346a:	028a      	lsls	r2, r1, #10
 800346c:	4610      	mov	r0, r2
 800346e:	4619      	mov	r1, r3
 8003470:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003472:	2200      	movs	r2, #0
 8003474:	61bb      	str	r3, [r7, #24]
 8003476:	61fa      	str	r2, [r7, #28]
 8003478:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800347c:	f7fc ff00 	bl	8000280 <__aeabi_uldivmod>
 8003480:	4602      	mov	r2, r0
 8003482:	460b      	mov	r3, r1
 8003484:	4613      	mov	r3, r2
 8003486:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003488:	4b0b      	ldr	r3, [pc, #44]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	0c1b      	lsrs	r3, r3, #16
 800348e:	f003 0303 	and.w	r3, r3, #3
 8003492:	3301      	adds	r3, #1
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003498:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800349a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800349c:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034a2:	e002      	b.n	80034aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034a4:	4b05      	ldr	r3, [pc, #20]	; (80034bc <HAL_RCC_GetSysClockFreq+0x204>)
 80034a6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3750      	adds	r7, #80	; 0x50
 80034b0:	46bd      	mov	sp, r7
 80034b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034b6:	bf00      	nop
 80034b8:	40023800 	.word	0x40023800
 80034bc:	00f42400 	.word	0x00f42400
 80034c0:	007a1200 	.word	0x007a1200

080034c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034c8:	4b03      	ldr	r3, [pc, #12]	; (80034d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80034ca:	681b      	ldr	r3, [r3, #0]
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	20000020 	.word	0x20000020

080034dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034e0:	f7ff fff0 	bl	80034c4 <HAL_RCC_GetHCLKFreq>
 80034e4:	4602      	mov	r2, r0
 80034e6:	4b05      	ldr	r3, [pc, #20]	; (80034fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	0a9b      	lsrs	r3, r3, #10
 80034ec:	f003 0307 	and.w	r3, r3, #7
 80034f0:	4903      	ldr	r1, [pc, #12]	; (8003500 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034f2:	5ccb      	ldrb	r3, [r1, r3]
 80034f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	40023800 	.word	0x40023800
 8003500:	080068ac 	.word	0x080068ac

08003504 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003508:	f7ff ffdc 	bl	80034c4 <HAL_RCC_GetHCLKFreq>
 800350c:	4602      	mov	r2, r0
 800350e:	4b05      	ldr	r3, [pc, #20]	; (8003524 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	0b5b      	lsrs	r3, r3, #13
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	4903      	ldr	r1, [pc, #12]	; (8003528 <HAL_RCC_GetPCLK2Freq+0x24>)
 800351a:	5ccb      	ldrb	r3, [r1, r3]
 800351c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003520:	4618      	mov	r0, r3
 8003522:	bd80      	pop	{r7, pc}
 8003524:	40023800 	.word	0x40023800
 8003528:	080068ac 	.word	0x080068ac

0800352c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e041      	b.n	80035c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d106      	bne.n	8003558 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f7fe fb88 	bl	8001c68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2202      	movs	r2, #2
 800355c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	3304      	adds	r3, #4
 8003568:	4619      	mov	r1, r3
 800356a:	4610      	mov	r0, r2
 800356c:	f000 fc6a 	bl	8003e44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3708      	adds	r7, #8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
	...

080035cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d001      	beq.n	80035e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e044      	b.n	800366e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2202      	movs	r2, #2
 80035e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68da      	ldr	r2, [r3, #12]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f042 0201 	orr.w	r2, r2, #1
 80035fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a1e      	ldr	r2, [pc, #120]	; (800367c <HAL_TIM_Base_Start_IT+0xb0>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d018      	beq.n	8003638 <HAL_TIM_Base_Start_IT+0x6c>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800360e:	d013      	beq.n	8003638 <HAL_TIM_Base_Start_IT+0x6c>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a1a      	ldr	r2, [pc, #104]	; (8003680 <HAL_TIM_Base_Start_IT+0xb4>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d00e      	beq.n	8003638 <HAL_TIM_Base_Start_IT+0x6c>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a19      	ldr	r2, [pc, #100]	; (8003684 <HAL_TIM_Base_Start_IT+0xb8>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d009      	beq.n	8003638 <HAL_TIM_Base_Start_IT+0x6c>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a17      	ldr	r2, [pc, #92]	; (8003688 <HAL_TIM_Base_Start_IT+0xbc>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d004      	beq.n	8003638 <HAL_TIM_Base_Start_IT+0x6c>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a16      	ldr	r2, [pc, #88]	; (800368c <HAL_TIM_Base_Start_IT+0xc0>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d111      	bne.n	800365c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f003 0307 	and.w	r3, r3, #7
 8003642:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2b06      	cmp	r3, #6
 8003648:	d010      	beq.n	800366c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f042 0201 	orr.w	r2, r2, #1
 8003658:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800365a:	e007      	b.n	800366c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f042 0201 	orr.w	r2, r2, #1
 800366a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3714      	adds	r7, #20
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	40010000 	.word	0x40010000
 8003680:	40000400 	.word	0x40000400
 8003684:	40000800 	.word	0x40000800
 8003688:	40000c00 	.word	0x40000c00
 800368c:	40014000 	.word	0x40014000

08003690 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68da      	ldr	r2, [r3, #12]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f022 0201 	bic.w	r2, r2, #1
 80036a6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	6a1a      	ldr	r2, [r3, #32]
 80036ae:	f241 1311 	movw	r3, #4369	; 0x1111
 80036b2:	4013      	ands	r3, r2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d10f      	bne.n	80036d8 <HAL_TIM_Base_Stop_IT+0x48>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	6a1a      	ldr	r2, [r3, #32]
 80036be:	f240 4344 	movw	r3, #1092	; 0x444
 80036c2:	4013      	ands	r3, r2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d107      	bne.n	80036d8 <HAL_TIM_Base_Stop_IT+0x48>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f022 0201 	bic.w	r2, r2, #1
 80036d6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr

080036ee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b082      	sub	sp, #8
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d101      	bne.n	8003700 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e041      	b.n	8003784 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b00      	cmp	r3, #0
 800370a:	d106      	bne.n	800371a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 f839 	bl	800378c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2202      	movs	r2, #2
 800371e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	3304      	adds	r3, #4
 800372a:	4619      	mov	r1, r3
 800372c:	4610      	mov	r0, r2
 800372e:	f000 fb89 	bl	8003e44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	3708      	adds	r7, #8
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d109      	bne.n	80037c4 <HAL_TIM_PWM_Start+0x24>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	bf14      	ite	ne
 80037bc:	2301      	movne	r3, #1
 80037be:	2300      	moveq	r3, #0
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	e022      	b.n	800380a <HAL_TIM_PWM_Start+0x6a>
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	2b04      	cmp	r3, #4
 80037c8:	d109      	bne.n	80037de <HAL_TIM_PWM_Start+0x3e>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	bf14      	ite	ne
 80037d6:	2301      	movne	r3, #1
 80037d8:	2300      	moveq	r3, #0
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	e015      	b.n	800380a <HAL_TIM_PWM_Start+0x6a>
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	2b08      	cmp	r3, #8
 80037e2:	d109      	bne.n	80037f8 <HAL_TIM_PWM_Start+0x58>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	bf14      	ite	ne
 80037f0:	2301      	movne	r3, #1
 80037f2:	2300      	moveq	r3, #0
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	e008      	b.n	800380a <HAL_TIM_PWM_Start+0x6a>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	2b01      	cmp	r3, #1
 8003802:	bf14      	ite	ne
 8003804:	2301      	movne	r3, #1
 8003806:	2300      	moveq	r3, #0
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e068      	b.n	80038e4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d104      	bne.n	8003822 <HAL_TIM_PWM_Start+0x82>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2202      	movs	r2, #2
 800381c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003820:	e013      	b.n	800384a <HAL_TIM_PWM_Start+0xaa>
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	2b04      	cmp	r3, #4
 8003826:	d104      	bne.n	8003832 <HAL_TIM_PWM_Start+0x92>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2202      	movs	r2, #2
 800382c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003830:	e00b      	b.n	800384a <HAL_TIM_PWM_Start+0xaa>
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	2b08      	cmp	r3, #8
 8003836:	d104      	bne.n	8003842 <HAL_TIM_PWM_Start+0xa2>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2202      	movs	r2, #2
 800383c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003840:	e003      	b.n	800384a <HAL_TIM_PWM_Start+0xaa>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2202      	movs	r2, #2
 8003846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2201      	movs	r2, #1
 8003850:	6839      	ldr	r1, [r7, #0]
 8003852:	4618      	mov	r0, r3
 8003854:	f000 fda8 	bl	80043a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a23      	ldr	r2, [pc, #140]	; (80038ec <HAL_TIM_PWM_Start+0x14c>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d107      	bne.n	8003872 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003870:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a1d      	ldr	r2, [pc, #116]	; (80038ec <HAL_TIM_PWM_Start+0x14c>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d018      	beq.n	80038ae <HAL_TIM_PWM_Start+0x10e>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003884:	d013      	beq.n	80038ae <HAL_TIM_PWM_Start+0x10e>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a19      	ldr	r2, [pc, #100]	; (80038f0 <HAL_TIM_PWM_Start+0x150>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d00e      	beq.n	80038ae <HAL_TIM_PWM_Start+0x10e>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a17      	ldr	r2, [pc, #92]	; (80038f4 <HAL_TIM_PWM_Start+0x154>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d009      	beq.n	80038ae <HAL_TIM_PWM_Start+0x10e>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a16      	ldr	r2, [pc, #88]	; (80038f8 <HAL_TIM_PWM_Start+0x158>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d004      	beq.n	80038ae <HAL_TIM_PWM_Start+0x10e>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a14      	ldr	r2, [pc, #80]	; (80038fc <HAL_TIM_PWM_Start+0x15c>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d111      	bne.n	80038d2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f003 0307 	and.w	r3, r3, #7
 80038b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2b06      	cmp	r3, #6
 80038be:	d010      	beq.n	80038e2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f042 0201 	orr.w	r2, r2, #1
 80038ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038d0:	e007      	b.n	80038e2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f042 0201 	orr.w	r2, r2, #1
 80038e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3710      	adds	r7, #16
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	40010000 	.word	0x40010000
 80038f0:	40000400 	.word	0x40000400
 80038f4:	40000800 	.word	0x40000800
 80038f8:	40000c00 	.word	0x40000c00
 80038fc:	40014000 	.word	0x40014000

08003900 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d020      	beq.n	8003964 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f003 0302 	and.w	r3, r3, #2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d01b      	beq.n	8003964 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f06f 0202 	mvn.w	r2, #2
 8003934:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2201      	movs	r2, #1
 800393a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	f003 0303 	and.w	r3, r3, #3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 fa5b 	bl	8003e06 <HAL_TIM_IC_CaptureCallback>
 8003950:	e005      	b.n	800395e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 fa4d 	bl	8003df2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 fa5e 	bl	8003e1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	f003 0304 	and.w	r3, r3, #4
 800396a:	2b00      	cmp	r3, #0
 800396c:	d020      	beq.n	80039b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f003 0304 	and.w	r3, r3, #4
 8003974:	2b00      	cmp	r3, #0
 8003976:	d01b      	beq.n	80039b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f06f 0204 	mvn.w	r2, #4
 8003980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2202      	movs	r2, #2
 8003986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003992:	2b00      	cmp	r3, #0
 8003994:	d003      	beq.n	800399e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 fa35 	bl	8003e06 <HAL_TIM_IC_CaptureCallback>
 800399c:	e005      	b.n	80039aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 fa27 	bl	8003df2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f000 fa38 	bl	8003e1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	f003 0308 	and.w	r3, r3, #8
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d020      	beq.n	80039fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f003 0308 	and.w	r3, r3, #8
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d01b      	beq.n	80039fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f06f 0208 	mvn.w	r2, #8
 80039cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2204      	movs	r2, #4
 80039d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	69db      	ldr	r3, [r3, #28]
 80039da:	f003 0303 	and.w	r3, r3, #3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d003      	beq.n	80039ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 fa0f 	bl	8003e06 <HAL_TIM_IC_CaptureCallback>
 80039e8:	e005      	b.n	80039f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 fa01 	bl	8003df2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f000 fa12 	bl	8003e1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	f003 0310 	and.w	r3, r3, #16
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d020      	beq.n	8003a48 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f003 0310 	and.w	r3, r3, #16
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d01b      	beq.n	8003a48 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f06f 0210 	mvn.w	r2, #16
 8003a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2208      	movs	r2, #8
 8003a1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	69db      	ldr	r3, [r3, #28]
 8003a26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d003      	beq.n	8003a36 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 f9e9 	bl	8003e06 <HAL_TIM_IC_CaptureCallback>
 8003a34:	e005      	b.n	8003a42 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f9db 	bl	8003df2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 f9ec 	bl	8003e1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00c      	beq.n	8003a6c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f003 0301 	and.w	r3, r3, #1
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d007      	beq.n	8003a6c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f06f 0201 	mvn.w	r2, #1
 8003a64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7fc fe92 	bl	8000790 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00c      	beq.n	8003a90 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d007      	beq.n	8003a90 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 fd2a 	bl	80044e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00c      	beq.n	8003ab4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d007      	beq.n	8003ab4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 f9bd 	bl	8003e2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	f003 0320 	and.w	r3, r3, #32
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00c      	beq.n	8003ad8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f003 0320 	and.w	r3, r3, #32
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d007      	beq.n	8003ad8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f06f 0220 	mvn.w	r2, #32
 8003ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 fcfc 	bl	80044d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ad8:	bf00      	nop
 8003ada:	3710      	adds	r7, #16
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003aec:	2300      	movs	r3, #0
 8003aee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d101      	bne.n	8003afe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003afa:	2302      	movs	r3, #2
 8003afc:	e0ae      	b.n	8003c5c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2201      	movs	r2, #1
 8003b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2b0c      	cmp	r3, #12
 8003b0a:	f200 809f 	bhi.w	8003c4c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003b0e:	a201      	add	r2, pc, #4	; (adr r2, 8003b14 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b14:	08003b49 	.word	0x08003b49
 8003b18:	08003c4d 	.word	0x08003c4d
 8003b1c:	08003c4d 	.word	0x08003c4d
 8003b20:	08003c4d 	.word	0x08003c4d
 8003b24:	08003b89 	.word	0x08003b89
 8003b28:	08003c4d 	.word	0x08003c4d
 8003b2c:	08003c4d 	.word	0x08003c4d
 8003b30:	08003c4d 	.word	0x08003c4d
 8003b34:	08003bcb 	.word	0x08003bcb
 8003b38:	08003c4d 	.word	0x08003c4d
 8003b3c:	08003c4d 	.word	0x08003c4d
 8003b40:	08003c4d 	.word	0x08003c4d
 8003b44:	08003c0b 	.word	0x08003c0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68b9      	ldr	r1, [r7, #8]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f000 fa04 	bl	8003f5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	699a      	ldr	r2, [r3, #24]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f042 0208 	orr.w	r2, r2, #8
 8003b62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	699a      	ldr	r2, [r3, #24]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f022 0204 	bic.w	r2, r2, #4
 8003b72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	6999      	ldr	r1, [r3, #24]
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	691a      	ldr	r2, [r3, #16]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	619a      	str	r2, [r3, #24]
      break;
 8003b86:	e064      	b.n	8003c52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68b9      	ldr	r1, [r7, #8]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f000 fa4a 	bl	8004028 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	699a      	ldr	r2, [r3, #24]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ba2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	699a      	ldr	r2, [r3, #24]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	6999      	ldr	r1, [r3, #24]
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	021a      	lsls	r2, r3, #8
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	619a      	str	r2, [r3, #24]
      break;
 8003bc8:	e043      	b.n	8003c52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68b9      	ldr	r1, [r7, #8]
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f000 fa95 	bl	8004100 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	69da      	ldr	r2, [r3, #28]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f042 0208 	orr.w	r2, r2, #8
 8003be4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	69da      	ldr	r2, [r3, #28]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f022 0204 	bic.w	r2, r2, #4
 8003bf4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	69d9      	ldr	r1, [r3, #28]
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	691a      	ldr	r2, [r3, #16]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	430a      	orrs	r2, r1
 8003c06:	61da      	str	r2, [r3, #28]
      break;
 8003c08:	e023      	b.n	8003c52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68b9      	ldr	r1, [r7, #8]
 8003c10:	4618      	mov	r0, r3
 8003c12:	f000 fadf 	bl	80041d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	69da      	ldr	r2, [r3, #28]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	69da      	ldr	r2, [r3, #28]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	69d9      	ldr	r1, [r3, #28]
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	021a      	lsls	r2, r3, #8
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	61da      	str	r2, [r3, #28]
      break;
 8003c4a:	e002      	b.n	8003c52 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	75fb      	strb	r3, [r7, #23]
      break;
 8003c50:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3718      	adds	r7, #24
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d101      	bne.n	8003c80 <HAL_TIM_ConfigClockSource+0x1c>
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	e0b4      	b.n	8003dea <HAL_TIM_ConfigClockSource+0x186>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2202      	movs	r2, #2
 8003c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ca6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68ba      	ldr	r2, [r7, #8]
 8003cae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cb8:	d03e      	beq.n	8003d38 <HAL_TIM_ConfigClockSource+0xd4>
 8003cba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cbe:	f200 8087 	bhi.w	8003dd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003cc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cc6:	f000 8086 	beq.w	8003dd6 <HAL_TIM_ConfigClockSource+0x172>
 8003cca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cce:	d87f      	bhi.n	8003dd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003cd0:	2b70      	cmp	r3, #112	; 0x70
 8003cd2:	d01a      	beq.n	8003d0a <HAL_TIM_ConfigClockSource+0xa6>
 8003cd4:	2b70      	cmp	r3, #112	; 0x70
 8003cd6:	d87b      	bhi.n	8003dd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003cd8:	2b60      	cmp	r3, #96	; 0x60
 8003cda:	d050      	beq.n	8003d7e <HAL_TIM_ConfigClockSource+0x11a>
 8003cdc:	2b60      	cmp	r3, #96	; 0x60
 8003cde:	d877      	bhi.n	8003dd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ce0:	2b50      	cmp	r3, #80	; 0x50
 8003ce2:	d03c      	beq.n	8003d5e <HAL_TIM_ConfigClockSource+0xfa>
 8003ce4:	2b50      	cmp	r3, #80	; 0x50
 8003ce6:	d873      	bhi.n	8003dd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ce8:	2b40      	cmp	r3, #64	; 0x40
 8003cea:	d058      	beq.n	8003d9e <HAL_TIM_ConfigClockSource+0x13a>
 8003cec:	2b40      	cmp	r3, #64	; 0x40
 8003cee:	d86f      	bhi.n	8003dd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003cf0:	2b30      	cmp	r3, #48	; 0x30
 8003cf2:	d064      	beq.n	8003dbe <HAL_TIM_ConfigClockSource+0x15a>
 8003cf4:	2b30      	cmp	r3, #48	; 0x30
 8003cf6:	d86b      	bhi.n	8003dd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003cf8:	2b20      	cmp	r3, #32
 8003cfa:	d060      	beq.n	8003dbe <HAL_TIM_ConfigClockSource+0x15a>
 8003cfc:	2b20      	cmp	r3, #32
 8003cfe:	d867      	bhi.n	8003dd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d05c      	beq.n	8003dbe <HAL_TIM_ConfigClockSource+0x15a>
 8003d04:	2b10      	cmp	r3, #16
 8003d06:	d05a      	beq.n	8003dbe <HAL_TIM_ConfigClockSource+0x15a>
 8003d08:	e062      	b.n	8003dd0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d1a:	f000 fb25 	bl	8004368 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68ba      	ldr	r2, [r7, #8]
 8003d34:	609a      	str	r2, [r3, #8]
      break;
 8003d36:	e04f      	b.n	8003dd8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d48:	f000 fb0e 	bl	8004368 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	689a      	ldr	r2, [r3, #8]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d5a:	609a      	str	r2, [r3, #8]
      break;
 8003d5c:	e03c      	b.n	8003dd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	f000 fa82 	bl	8004274 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2150      	movs	r1, #80	; 0x50
 8003d76:	4618      	mov	r0, r3
 8003d78:	f000 fadb 	bl	8004332 <TIM_ITRx_SetConfig>
      break;
 8003d7c:	e02c      	b.n	8003dd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	f000 faa1 	bl	80042d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2160      	movs	r1, #96	; 0x60
 8003d96:	4618      	mov	r0, r3
 8003d98:	f000 facb 	bl	8004332 <TIM_ITRx_SetConfig>
      break;
 8003d9c:	e01c      	b.n	8003dd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003daa:	461a      	mov	r2, r3
 8003dac:	f000 fa62 	bl	8004274 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2140      	movs	r1, #64	; 0x40
 8003db6:	4618      	mov	r0, r3
 8003db8:	f000 fabb 	bl	8004332 <TIM_ITRx_SetConfig>
      break;
 8003dbc:	e00c      	b.n	8003dd8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	4610      	mov	r0, r2
 8003dca:	f000 fab2 	bl	8004332 <TIM_ITRx_SetConfig>
      break;
 8003dce:	e003      	b.n	8003dd8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	73fb      	strb	r3, [r7, #15]
      break;
 8003dd4:	e000      	b.n	8003dd8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003dd6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003df2:	b480      	push	{r7}
 8003df4:	b083      	sub	sp, #12
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003dfa:	bf00      	nop
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b083      	sub	sp, #12
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e0e:	bf00      	nop
 8003e10:	370c      	adds	r7, #12
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr

08003e1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	b083      	sub	sp, #12
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e22:	bf00      	nop
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b083      	sub	sp, #12
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e36:	bf00      	nop
 8003e38:	370c      	adds	r7, #12
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
	...

08003e44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a3a      	ldr	r2, [pc, #232]	; (8003f40 <TIM_Base_SetConfig+0xfc>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d00f      	beq.n	8003e7c <TIM_Base_SetConfig+0x38>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e62:	d00b      	beq.n	8003e7c <TIM_Base_SetConfig+0x38>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a37      	ldr	r2, [pc, #220]	; (8003f44 <TIM_Base_SetConfig+0x100>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d007      	beq.n	8003e7c <TIM_Base_SetConfig+0x38>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a36      	ldr	r2, [pc, #216]	; (8003f48 <TIM_Base_SetConfig+0x104>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d003      	beq.n	8003e7c <TIM_Base_SetConfig+0x38>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a35      	ldr	r2, [pc, #212]	; (8003f4c <TIM_Base_SetConfig+0x108>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d108      	bne.n	8003e8e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a2b      	ldr	r2, [pc, #172]	; (8003f40 <TIM_Base_SetConfig+0xfc>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d01b      	beq.n	8003ece <TIM_Base_SetConfig+0x8a>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e9c:	d017      	beq.n	8003ece <TIM_Base_SetConfig+0x8a>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a28      	ldr	r2, [pc, #160]	; (8003f44 <TIM_Base_SetConfig+0x100>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d013      	beq.n	8003ece <TIM_Base_SetConfig+0x8a>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a27      	ldr	r2, [pc, #156]	; (8003f48 <TIM_Base_SetConfig+0x104>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d00f      	beq.n	8003ece <TIM_Base_SetConfig+0x8a>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a26      	ldr	r2, [pc, #152]	; (8003f4c <TIM_Base_SetConfig+0x108>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d00b      	beq.n	8003ece <TIM_Base_SetConfig+0x8a>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a25      	ldr	r2, [pc, #148]	; (8003f50 <TIM_Base_SetConfig+0x10c>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d007      	beq.n	8003ece <TIM_Base_SetConfig+0x8a>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a24      	ldr	r2, [pc, #144]	; (8003f54 <TIM_Base_SetConfig+0x110>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d003      	beq.n	8003ece <TIM_Base_SetConfig+0x8a>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a23      	ldr	r2, [pc, #140]	; (8003f58 <TIM_Base_SetConfig+0x114>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d108      	bne.n	8003ee0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ed4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	689a      	ldr	r2, [r3, #8]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a0e      	ldr	r2, [pc, #56]	; (8003f40 <TIM_Base_SetConfig+0xfc>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d103      	bne.n	8003f14 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	691a      	ldr	r2, [r3, #16]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d105      	bne.n	8003f32 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	f023 0201 	bic.w	r2, r3, #1
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	611a      	str	r2, [r3, #16]
  }
}
 8003f32:	bf00      	nop
 8003f34:	3714      	adds	r7, #20
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	40010000 	.word	0x40010000
 8003f44:	40000400 	.word	0x40000400
 8003f48:	40000800 	.word	0x40000800
 8003f4c:	40000c00 	.word	0x40000c00
 8003f50:	40014000 	.word	0x40014000
 8003f54:	40014400 	.word	0x40014400
 8003f58:	40014800 	.word	0x40014800

08003f5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b087      	sub	sp, #28
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a1b      	ldr	r3, [r3, #32]
 8003f70:	f023 0201 	bic.w	r2, r3, #1
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f023 0303 	bic.w	r3, r3, #3
 8003f92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	f023 0302 	bic.w	r3, r3, #2
 8003fa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	697a      	ldr	r2, [r7, #20]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a1c      	ldr	r2, [pc, #112]	; (8004024 <TIM_OC1_SetConfig+0xc8>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d10c      	bne.n	8003fd2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	f023 0308 	bic.w	r3, r3, #8
 8003fbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	697a      	ldr	r2, [r7, #20]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	f023 0304 	bic.w	r3, r3, #4
 8003fd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a13      	ldr	r2, [pc, #76]	; (8004024 <TIM_OC1_SetConfig+0xc8>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d111      	bne.n	8003ffe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fe0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fe8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	685a      	ldr	r2, [r3, #4]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	697a      	ldr	r2, [r7, #20]
 8004016:	621a      	str	r2, [r3, #32]
}
 8004018:	bf00      	nop
 800401a:	371c      	adds	r7, #28
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr
 8004024:	40010000 	.word	0x40010000

08004028 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004028:	b480      	push	{r7}
 800402a:	b087      	sub	sp, #28
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a1b      	ldr	r3, [r3, #32]
 8004036:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a1b      	ldr	r3, [r3, #32]
 800403c:	f023 0210 	bic.w	r2, r3, #16
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800405e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	021b      	lsls	r3, r3, #8
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	4313      	orrs	r3, r2
 800406a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	f023 0320 	bic.w	r3, r3, #32
 8004072:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	011b      	lsls	r3, r3, #4
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	4313      	orrs	r3, r2
 800407e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a1e      	ldr	r2, [pc, #120]	; (80040fc <TIM_OC2_SetConfig+0xd4>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d10d      	bne.n	80040a4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800408e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	011b      	lsls	r3, r3, #4
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	4313      	orrs	r3, r2
 800409a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040a2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a15      	ldr	r2, [pc, #84]	; (80040fc <TIM_OC2_SetConfig+0xd4>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d113      	bne.n	80040d4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	693a      	ldr	r2, [r7, #16]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	699b      	ldr	r3, [r3, #24]
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685a      	ldr	r2, [r3, #4]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	697a      	ldr	r2, [r7, #20]
 80040ec:	621a      	str	r2, [r3, #32]
}
 80040ee:	bf00      	nop
 80040f0:	371c      	adds	r7, #28
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	40010000 	.word	0x40010000

08004100 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004100:	b480      	push	{r7}
 8004102:	b087      	sub	sp, #28
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a1b      	ldr	r3, [r3, #32]
 8004114:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800412e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f023 0303 	bic.w	r3, r3, #3
 8004136:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	4313      	orrs	r3, r2
 8004140:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004148:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	021b      	lsls	r3, r3, #8
 8004150:	697a      	ldr	r2, [r7, #20]
 8004152:	4313      	orrs	r3, r2
 8004154:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a1d      	ldr	r2, [pc, #116]	; (80041d0 <TIM_OC3_SetConfig+0xd0>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d10d      	bne.n	800417a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004164:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	021b      	lsls	r3, r3, #8
 800416c:	697a      	ldr	r2, [r7, #20]
 800416e:	4313      	orrs	r3, r2
 8004170:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004178:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a14      	ldr	r2, [pc, #80]	; (80041d0 <TIM_OC3_SetConfig+0xd0>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d113      	bne.n	80041aa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004188:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004190:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	011b      	lsls	r3, r3, #4
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	4313      	orrs	r3, r2
 800419c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	011b      	lsls	r3, r3, #4
 80041a4:	693a      	ldr	r2, [r7, #16]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	685a      	ldr	r2, [r3, #4]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	697a      	ldr	r2, [r7, #20]
 80041c2:	621a      	str	r2, [r3, #32]
}
 80041c4:	bf00      	nop
 80041c6:	371c      	adds	r7, #28
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr
 80041d0:	40010000 	.word	0x40010000

080041d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b087      	sub	sp, #28
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a1b      	ldr	r3, [r3, #32]
 80041e8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	69db      	ldr	r3, [r3, #28]
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004202:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800420a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	021b      	lsls	r3, r3, #8
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	4313      	orrs	r3, r2
 8004216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800421e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	031b      	lsls	r3, r3, #12
 8004226:	693a      	ldr	r2, [r7, #16]
 8004228:	4313      	orrs	r3, r2
 800422a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a10      	ldr	r2, [pc, #64]	; (8004270 <TIM_OC4_SetConfig+0x9c>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d109      	bne.n	8004248 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800423a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	695b      	ldr	r3, [r3, #20]
 8004240:	019b      	lsls	r3, r3, #6
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	4313      	orrs	r3, r2
 8004246:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	685a      	ldr	r2, [r3, #4]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	621a      	str	r2, [r3, #32]
}
 8004262:	bf00      	nop
 8004264:	371c      	adds	r7, #28
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	40010000 	.word	0x40010000

08004274 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004274:	b480      	push	{r7}
 8004276:	b087      	sub	sp, #28
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6a1b      	ldr	r3, [r3, #32]
 8004284:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	f023 0201 	bic.w	r2, r3, #1
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800429e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	011b      	lsls	r3, r3, #4
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	f023 030a 	bic.w	r3, r3, #10
 80042b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	693a      	ldr	r2, [r7, #16]
 80042be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	621a      	str	r2, [r3, #32]
}
 80042c6:	bf00      	nop
 80042c8:	371c      	adds	r7, #28
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042d2:	b480      	push	{r7}
 80042d4:	b087      	sub	sp, #28
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	60f8      	str	r0, [r7, #12]
 80042da:	60b9      	str	r1, [r7, #8]
 80042dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6a1b      	ldr	r3, [r3, #32]
 80042e8:	f023 0210 	bic.w	r2, r3, #16
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	031b      	lsls	r3, r3, #12
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	4313      	orrs	r3, r2
 8004306:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800430e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	011b      	lsls	r3, r3, #4
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	4313      	orrs	r3, r2
 8004318:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	621a      	str	r2, [r3, #32]
}
 8004326:	bf00      	nop
 8004328:	371c      	adds	r7, #28
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr

08004332 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004332:	b480      	push	{r7}
 8004334:	b085      	sub	sp, #20
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
 800433a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004348:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800434a:	683a      	ldr	r2, [r7, #0]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	4313      	orrs	r3, r2
 8004350:	f043 0307 	orr.w	r3, r3, #7
 8004354:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	609a      	str	r2, [r3, #8]
}
 800435c:	bf00      	nop
 800435e:	3714      	adds	r7, #20
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004368:	b480      	push	{r7}
 800436a:	b087      	sub	sp, #28
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
 8004374:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004382:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	021a      	lsls	r2, r3, #8
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	431a      	orrs	r2, r3
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	4313      	orrs	r3, r2
 8004390:	697a      	ldr	r2, [r7, #20]
 8004392:	4313      	orrs	r3, r2
 8004394:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	697a      	ldr	r2, [r7, #20]
 800439a:	609a      	str	r2, [r3, #8]
}
 800439c:	bf00      	nop
 800439e:	371c      	adds	r7, #28
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b087      	sub	sp, #28
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	f003 031f 	and.w	r3, r3, #31
 80043ba:	2201      	movs	r2, #1
 80043bc:	fa02 f303 	lsl.w	r3, r2, r3
 80043c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6a1a      	ldr	r2, [r3, #32]
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	43db      	mvns	r3, r3
 80043ca:	401a      	ands	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6a1a      	ldr	r2, [r3, #32]
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	f003 031f 	and.w	r3, r3, #31
 80043da:	6879      	ldr	r1, [r7, #4]
 80043dc:	fa01 f303 	lsl.w	r3, r1, r3
 80043e0:	431a      	orrs	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	621a      	str	r2, [r3, #32]
}
 80043e6:	bf00      	nop
 80043e8:	371c      	adds	r7, #28
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
	...

080043f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b085      	sub	sp, #20
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004404:	2b01      	cmp	r3, #1
 8004406:	d101      	bne.n	800440c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004408:	2302      	movs	r3, #2
 800440a:	e050      	b.n	80044ae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2202      	movs	r2, #2
 8004418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004432:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	4313      	orrs	r3, r2
 800443c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a1c      	ldr	r2, [pc, #112]	; (80044bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d018      	beq.n	8004482 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004458:	d013      	beq.n	8004482 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a18      	ldr	r2, [pc, #96]	; (80044c0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d00e      	beq.n	8004482 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a16      	ldr	r2, [pc, #88]	; (80044c4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d009      	beq.n	8004482 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a15      	ldr	r2, [pc, #84]	; (80044c8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d004      	beq.n	8004482 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a13      	ldr	r2, [pc, #76]	; (80044cc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d10c      	bne.n	800449c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004488:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	68ba      	ldr	r2, [r7, #8]
 8004490:	4313      	orrs	r3, r2
 8004492:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68ba      	ldr	r2, [r7, #8]
 800449a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3714      	adds	r7, #20
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	40010000 	.word	0x40010000
 80044c0:	40000400 	.word	0x40000400
 80044c4:	40000800 	.word	0x40000800
 80044c8:	40000c00 	.word	0x40000c00
 80044cc:	40014000 	.word	0x40014000

080044d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044ec:	bf00      	nop
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e042      	b.n	8004590 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d106      	bne.n	8004524 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f7fd fd28 	bl	8001f74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2224      	movs	r2, #36	; 0x24
 8004528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68da      	ldr	r2, [r3, #12]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800453a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 fe55 	bl	80051ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	691a      	ldr	r2, [r3, #16]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004550:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	695a      	ldr	r2, [r3, #20]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004560:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68da      	ldr	r2, [r3, #12]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004570:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2220      	movs	r2, #32
 800457c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2220      	movs	r2, #32
 8004584:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	3708      	adds	r7, #8
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b08a      	sub	sp, #40	; 0x28
 800459c:	af02      	add	r7, sp, #8
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	603b      	str	r3, [r7, #0]
 80045a4:	4613      	mov	r3, r2
 80045a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80045a8:	2300      	movs	r3, #0
 80045aa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	2b20      	cmp	r3, #32
 80045b6:	d175      	bne.n	80046a4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d002      	beq.n	80045c4 <HAL_UART_Transmit+0x2c>
 80045be:	88fb      	ldrh	r3, [r7, #6]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d101      	bne.n	80045c8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e06e      	b.n	80046a6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2221      	movs	r2, #33	; 0x21
 80045d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045d6:	f7fd ff6f 	bl	80024b8 <HAL_GetTick>
 80045da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	88fa      	ldrh	r2, [r7, #6]
 80045e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	88fa      	ldrh	r2, [r7, #6]
 80045e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045f0:	d108      	bne.n	8004604 <HAL_UART_Transmit+0x6c>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d104      	bne.n	8004604 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80045fa:	2300      	movs	r3, #0
 80045fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	61bb      	str	r3, [r7, #24]
 8004602:	e003      	b.n	800460c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004608:	2300      	movs	r3, #0
 800460a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800460c:	e02e      	b.n	800466c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	9300      	str	r3, [sp, #0]
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	2200      	movs	r2, #0
 8004616:	2180      	movs	r1, #128	; 0x80
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f000 fbb7 	bl	8004d8c <UART_WaitOnFlagUntilTimeout>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d005      	beq.n	8004630 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2220      	movs	r2, #32
 8004628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e03a      	b.n	80046a6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d10b      	bne.n	800464e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	881b      	ldrh	r3, [r3, #0]
 800463a:	461a      	mov	r2, r3
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004644:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	3302      	adds	r3, #2
 800464a:	61bb      	str	r3, [r7, #24]
 800464c:	e007      	b.n	800465e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	781a      	ldrb	r2, [r3, #0]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	3301      	adds	r3, #1
 800465c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004662:	b29b      	uxth	r3, r3
 8004664:	3b01      	subs	r3, #1
 8004666:	b29a      	uxth	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004670:	b29b      	uxth	r3, r3
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1cb      	bne.n	800460e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	9300      	str	r3, [sp, #0]
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	2200      	movs	r2, #0
 800467e:	2140      	movs	r1, #64	; 0x40
 8004680:	68f8      	ldr	r0, [r7, #12]
 8004682:	f000 fb83 	bl	8004d8c <UART_WaitOnFlagUntilTimeout>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d005      	beq.n	8004698 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2220      	movs	r2, #32
 8004690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e006      	b.n	80046a6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2220      	movs	r2, #32
 800469c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80046a0:	2300      	movs	r3, #0
 80046a2:	e000      	b.n	80046a6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80046a4:	2302      	movs	r3, #2
  }
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3720      	adds	r7, #32
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b08a      	sub	sp, #40	; 0x28
 80046b2:	af02      	add	r7, sp, #8
 80046b4:	60f8      	str	r0, [r7, #12]
 80046b6:	60b9      	str	r1, [r7, #8]
 80046b8:	603b      	str	r3, [r7, #0]
 80046ba:	4613      	mov	r3, r2
 80046bc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80046be:	2300      	movs	r3, #0
 80046c0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	2b20      	cmp	r3, #32
 80046cc:	f040 8081 	bne.w	80047d2 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d002      	beq.n	80046dc <HAL_UART_Receive+0x2e>
 80046d6:	88fb      	ldrh	r3, [r7, #6]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d101      	bne.n	80046e0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e079      	b.n	80047d4 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2222      	movs	r2, #34	; 0x22
 80046ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046f4:	f7fd fee0 	bl	80024b8 <HAL_GetTick>
 80046f8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	88fa      	ldrh	r2, [r7, #6]
 80046fe:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	88fa      	ldrh	r2, [r7, #6]
 8004704:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800470e:	d108      	bne.n	8004722 <HAL_UART_Receive+0x74>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d104      	bne.n	8004722 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8004718:	2300      	movs	r3, #0
 800471a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	61bb      	str	r3, [r7, #24]
 8004720:	e003      	b.n	800472a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004726:	2300      	movs	r3, #0
 8004728:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800472a:	e047      	b.n	80047bc <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	9300      	str	r3, [sp, #0]
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	2200      	movs	r2, #0
 8004734:	2120      	movs	r1, #32
 8004736:	68f8      	ldr	r0, [r7, #12]
 8004738:	f000 fb28 	bl	8004d8c <UART_WaitOnFlagUntilTimeout>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d005      	beq.n	800474e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2220      	movs	r2, #32
 8004746:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e042      	b.n	80047d4 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d10c      	bne.n	800476e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	b29b      	uxth	r3, r3
 800475c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004760:	b29a      	uxth	r2, r3
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	3302      	adds	r3, #2
 800476a:	61bb      	str	r3, [r7, #24]
 800476c:	e01f      	b.n	80047ae <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004776:	d007      	beq.n	8004788 <HAL_UART_Receive+0xda>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d10a      	bne.n	8004796 <HAL_UART_Receive+0xe8>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d106      	bne.n	8004796 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	b2da      	uxtb	r2, r3
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	701a      	strb	r2, [r3, #0]
 8004794:	e008      	b.n	80047a8 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	b2db      	uxtb	r3, r3
 800479e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047a2:	b2da      	uxtb	r2, r3
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	3301      	adds	r3, #1
 80047ac:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	3b01      	subs	r3, #1
 80047b6:	b29a      	uxth	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1b2      	bne.n	800472c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2220      	movs	r2, #32
 80047ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 80047ce:	2300      	movs	r3, #0
 80047d0:	e000      	b.n	80047d4 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80047d2:	2302      	movs	r3, #2
  }
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3720      	adds	r7, #32
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	4613      	mov	r3, r2
 80047e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b20      	cmp	r3, #32
 80047f4:	d112      	bne.n	800481c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d002      	beq.n	8004802 <HAL_UART_Receive_IT+0x26>
 80047fc:	88fb      	ldrh	r3, [r7, #6]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d101      	bne.n	8004806 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e00b      	b.n	800481e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800480c:	88fb      	ldrh	r3, [r7, #6]
 800480e:	461a      	mov	r2, r3
 8004810:	68b9      	ldr	r1, [r7, #8]
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f000 fb13 	bl	8004e3e <UART_Start_Receive_IT>
 8004818:	4603      	mov	r3, r0
 800481a:	e000      	b.n	800481e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800481c:	2302      	movs	r3, #2
  }
}
 800481e:	4618      	mov	r0, r3
 8004820:	3710      	adds	r7, #16
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
	...

08004828 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b0ba      	sub	sp, #232	; 0xe8
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800484e:	2300      	movs	r3, #0
 8004850:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004854:	2300      	movs	r3, #0
 8004856:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800485a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800485e:	f003 030f 	and.w	r3, r3, #15
 8004862:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004866:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800486a:	2b00      	cmp	r3, #0
 800486c:	d10f      	bne.n	800488e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800486e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004872:	f003 0320 	and.w	r3, r3, #32
 8004876:	2b00      	cmp	r3, #0
 8004878:	d009      	beq.n	800488e <HAL_UART_IRQHandler+0x66>
 800487a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800487e:	f003 0320 	and.w	r3, r3, #32
 8004882:	2b00      	cmp	r3, #0
 8004884:	d003      	beq.n	800488e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 fbf2 	bl	8005070 <UART_Receive_IT>
      return;
 800488c:	e25b      	b.n	8004d46 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800488e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004892:	2b00      	cmp	r3, #0
 8004894:	f000 80de 	beq.w	8004a54 <HAL_UART_IRQHandler+0x22c>
 8004898:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800489c:	f003 0301 	and.w	r3, r3, #1
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d106      	bne.n	80048b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80048a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f000 80d1 	beq.w	8004a54 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80048b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00b      	beq.n	80048d6 <HAL_UART_IRQHandler+0xae>
 80048be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d005      	beq.n	80048d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ce:	f043 0201 	orr.w	r2, r3, #1
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048da:	f003 0304 	and.w	r3, r3, #4
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00b      	beq.n	80048fa <HAL_UART_IRQHandler+0xd2>
 80048e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d005      	beq.n	80048fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f2:	f043 0202 	orr.w	r2, r3, #2
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00b      	beq.n	800491e <HAL_UART_IRQHandler+0xf6>
 8004906:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	2b00      	cmp	r3, #0
 8004910:	d005      	beq.n	800491e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004916:	f043 0204 	orr.w	r2, r3, #4
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800491e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004922:	f003 0308 	and.w	r3, r3, #8
 8004926:	2b00      	cmp	r3, #0
 8004928:	d011      	beq.n	800494e <HAL_UART_IRQHandler+0x126>
 800492a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800492e:	f003 0320 	and.w	r3, r3, #32
 8004932:	2b00      	cmp	r3, #0
 8004934:	d105      	bne.n	8004942 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004936:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	2b00      	cmp	r3, #0
 8004940:	d005      	beq.n	800494e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004946:	f043 0208 	orr.w	r2, r3, #8
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004952:	2b00      	cmp	r3, #0
 8004954:	f000 81f2 	beq.w	8004d3c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004958:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800495c:	f003 0320 	and.w	r3, r3, #32
 8004960:	2b00      	cmp	r3, #0
 8004962:	d008      	beq.n	8004976 <HAL_UART_IRQHandler+0x14e>
 8004964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004968:	f003 0320 	and.w	r3, r3, #32
 800496c:	2b00      	cmp	r3, #0
 800496e:	d002      	beq.n	8004976 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 fb7d 	bl	8005070 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	695b      	ldr	r3, [r3, #20]
 800497c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004980:	2b40      	cmp	r3, #64	; 0x40
 8004982:	bf0c      	ite	eq
 8004984:	2301      	moveq	r3, #1
 8004986:	2300      	movne	r3, #0
 8004988:	b2db      	uxtb	r3, r3
 800498a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004992:	f003 0308 	and.w	r3, r3, #8
 8004996:	2b00      	cmp	r3, #0
 8004998:	d103      	bne.n	80049a2 <HAL_UART_IRQHandler+0x17a>
 800499a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d04f      	beq.n	8004a42 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 fa85 	bl	8004eb2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b2:	2b40      	cmp	r3, #64	; 0x40
 80049b4:	d141      	bne.n	8004a3a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	3314      	adds	r3, #20
 80049bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80049c4:	e853 3f00 	ldrex	r3, [r3]
 80049c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80049cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80049d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	3314      	adds	r3, #20
 80049de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80049e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80049e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80049ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80049f2:	e841 2300 	strex	r3, r2, [r1]
 80049f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80049fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1d9      	bne.n	80049b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d013      	beq.n	8004a32 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a0e:	4a7e      	ldr	r2, [pc, #504]	; (8004c08 <HAL_UART_IRQHandler+0x3e0>)
 8004a10:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a16:	4618      	mov	r0, r3
 8004a18:	f7fd feff 	bl	800281a <HAL_DMA_Abort_IT>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d016      	beq.n	8004a50 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004a2c:	4610      	mov	r0, r2
 8004a2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a30:	e00e      	b.n	8004a50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 f994 	bl	8004d60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a38:	e00a      	b.n	8004a50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 f990 	bl	8004d60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a40:	e006      	b.n	8004a50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 f98c 	bl	8004d60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004a4e:	e175      	b.n	8004d3c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a50:	bf00      	nop
    return;
 8004a52:	e173      	b.n	8004d3c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	f040 814f 	bne.w	8004cfc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a62:	f003 0310 	and.w	r3, r3, #16
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	f000 8148 	beq.w	8004cfc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004a6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a70:	f003 0310 	and.w	r3, r3, #16
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	f000 8141 	beq.w	8004cfc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	60bb      	str	r3, [r7, #8]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	60bb      	str	r3, [r7, #8]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	60bb      	str	r3, [r7, #8]
 8004a8e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a9a:	2b40      	cmp	r3, #64	; 0x40
 8004a9c:	f040 80b6 	bne.w	8004c0c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004aac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	f000 8145 	beq.w	8004d40 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004aba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	f080 813e 	bcs.w	8004d40 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004aca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ad0:	69db      	ldr	r3, [r3, #28]
 8004ad2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ad6:	f000 8088 	beq.w	8004bea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	330c      	adds	r3, #12
 8004ae0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ae8:	e853 3f00 	ldrex	r3, [r3]
 8004aec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004af0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004af4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004af8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	330c      	adds	r3, #12
 8004b02:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004b06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004b12:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004b16:	e841 2300 	strex	r3, r2, [r1]
 8004b1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004b1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1d9      	bne.n	8004ada <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	3314      	adds	r3, #20
 8004b2c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b30:	e853 3f00 	ldrex	r3, [r3]
 8004b34:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004b36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b38:	f023 0301 	bic.w	r3, r3, #1
 8004b3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	3314      	adds	r3, #20
 8004b46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004b4a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004b4e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b50:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004b52:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004b56:	e841 2300 	strex	r3, r2, [r1]
 8004b5a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004b5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1e1      	bne.n	8004b26 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	3314      	adds	r3, #20
 8004b68:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b6c:	e853 3f00 	ldrex	r3, [r3]
 8004b70:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004b72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	3314      	adds	r3, #20
 8004b82:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004b86:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004b88:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b8a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004b8c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004b8e:	e841 2300 	strex	r3, r2, [r1]
 8004b92:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004b94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d1e3      	bne.n	8004b62 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2220      	movs	r2, #32
 8004b9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	330c      	adds	r3, #12
 8004bae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bb2:	e853 3f00 	ldrex	r3, [r3]
 8004bb6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004bb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bba:	f023 0310 	bic.w	r3, r3, #16
 8004bbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	330c      	adds	r3, #12
 8004bc8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004bcc:	65ba      	str	r2, [r7, #88]	; 0x58
 8004bce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004bd2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004bd4:	e841 2300 	strex	r3, r2, [r1]
 8004bd8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004bda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1e3      	bne.n	8004ba8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be4:	4618      	mov	r0, r3
 8004be6:	f7fd fda8 	bl	800273a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2202      	movs	r2, #2
 8004bee:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	4619      	mov	r1, r3
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f000 f8b7 	bl	8004d74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c06:	e09b      	b.n	8004d40 <HAL_UART_IRQHandler+0x518>
 8004c08:	08004f79 	.word	0x08004f79
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	f000 808e 	beq.w	8004d44 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004c28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f000 8089 	beq.w	8004d44 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	330c      	adds	r3, #12
 8004c38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c3c:	e853 3f00 	ldrex	r3, [r3]
 8004c40:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	330c      	adds	r3, #12
 8004c52:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004c56:	647a      	str	r2, [r7, #68]	; 0x44
 8004c58:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c5a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c5e:	e841 2300 	strex	r3, r2, [r1]
 8004c62:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1e3      	bne.n	8004c32 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	3314      	adds	r3, #20
 8004c70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c74:	e853 3f00 	ldrex	r3, [r3]
 8004c78:	623b      	str	r3, [r7, #32]
   return(result);
 8004c7a:	6a3b      	ldr	r3, [r7, #32]
 8004c7c:	f023 0301 	bic.w	r3, r3, #1
 8004c80:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	3314      	adds	r3, #20
 8004c8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004c8e:	633a      	str	r2, [r7, #48]	; 0x30
 8004c90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c96:	e841 2300 	strex	r3, r2, [r1]
 8004c9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1e3      	bne.n	8004c6a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2220      	movs	r2, #32
 8004ca6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	330c      	adds	r3, #12
 8004cb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	e853 3f00 	ldrex	r3, [r3]
 8004cbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f023 0310 	bic.w	r3, r3, #16
 8004cc6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	330c      	adds	r3, #12
 8004cd0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004cd4:	61fa      	str	r2, [r7, #28]
 8004cd6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd8:	69b9      	ldr	r1, [r7, #24]
 8004cda:	69fa      	ldr	r2, [r7, #28]
 8004cdc:	e841 2300 	strex	r3, r2, [r1]
 8004ce0:	617b      	str	r3, [r7, #20]
   return(result);
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1e3      	bne.n	8004cb0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2202      	movs	r2, #2
 8004cec:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004cee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 f83d 	bl	8004d74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004cfa:	e023      	b.n	8004d44 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004cfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d009      	beq.n	8004d1c <HAL_UART_IRQHandler+0x4f4>
 8004d08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d003      	beq.n	8004d1c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f000 f943 	bl	8004fa0 <UART_Transmit_IT>
    return;
 8004d1a:	e014      	b.n	8004d46 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d00e      	beq.n	8004d46 <HAL_UART_IRQHandler+0x51e>
 8004d28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d008      	beq.n	8004d46 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 f983 	bl	8005040 <UART_EndTransmit_IT>
    return;
 8004d3a:	e004      	b.n	8004d46 <HAL_UART_IRQHandler+0x51e>
    return;
 8004d3c:	bf00      	nop
 8004d3e:	e002      	b.n	8004d46 <HAL_UART_IRQHandler+0x51e>
      return;
 8004d40:	bf00      	nop
 8004d42:	e000      	b.n	8004d46 <HAL_UART_IRQHandler+0x51e>
      return;
 8004d44:	bf00      	nop
  }
}
 8004d46:	37e8      	adds	r7, #232	; 0xe8
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004d54:	bf00      	nop
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004d68:	bf00      	nop
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d80:	bf00      	nop
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b086      	sub	sp, #24
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	603b      	str	r3, [r7, #0]
 8004d98:	4613      	mov	r3, r2
 8004d9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d9c:	e03b      	b.n	8004e16 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d9e:	6a3b      	ldr	r3, [r7, #32]
 8004da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da4:	d037      	beq.n	8004e16 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004da6:	f7fd fb87 	bl	80024b8 <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	6a3a      	ldr	r2, [r7, #32]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d302      	bcc.n	8004dbc <UART_WaitOnFlagUntilTimeout+0x30>
 8004db6:	6a3b      	ldr	r3, [r7, #32]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d101      	bne.n	8004dc0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e03a      	b.n	8004e36 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	f003 0304 	and.w	r3, r3, #4
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d023      	beq.n	8004e16 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	2b80      	cmp	r3, #128	; 0x80
 8004dd2:	d020      	beq.n	8004e16 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	2b40      	cmp	r3, #64	; 0x40
 8004dd8:	d01d      	beq.n	8004e16 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0308 	and.w	r3, r3, #8
 8004de4:	2b08      	cmp	r3, #8
 8004de6:	d116      	bne.n	8004e16 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004de8:	2300      	movs	r3, #0
 8004dea:	617b      	str	r3, [r7, #20]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	617b      	str	r3, [r7, #20]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	617b      	str	r3, [r7, #20]
 8004dfc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	f000 f857 	bl	8004eb2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2208      	movs	r2, #8
 8004e08:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e00f      	b.n	8004e36 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	4013      	ands	r3, r2
 8004e20:	68ba      	ldr	r2, [r7, #8]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	bf0c      	ite	eq
 8004e26:	2301      	moveq	r3, #1
 8004e28:	2300      	movne	r3, #0
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	79fb      	ldrb	r3, [r7, #7]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d0b4      	beq.n	8004d9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3718      	adds	r7, #24
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e3e:	b480      	push	{r7}
 8004e40:	b085      	sub	sp, #20
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	60f8      	str	r0, [r7, #12]
 8004e46:	60b9      	str	r1, [r7, #8]
 8004e48:	4613      	mov	r3, r2
 8004e4a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	68ba      	ldr	r2, [r7, #8]
 8004e50:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	88fa      	ldrh	r2, [r7, #6]
 8004e56:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	88fa      	ldrh	r2, [r7, #6]
 8004e5c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2200      	movs	r2, #0
 8004e62:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2222      	movs	r2, #34	; 0x22
 8004e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d007      	beq.n	8004e84 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68da      	ldr	r2, [r3, #12]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e82:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	695a      	ldr	r2, [r3, #20]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f042 0201 	orr.w	r2, r2, #1
 8004e92:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68da      	ldr	r2, [r3, #12]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f042 0220 	orr.w	r2, r2, #32
 8004ea2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3714      	adds	r7, #20
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr

08004eb2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004eb2:	b480      	push	{r7}
 8004eb4:	b095      	sub	sp, #84	; 0x54
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	330c      	adds	r3, #12
 8004ec0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ec4:	e853 3f00 	ldrex	r3, [r3]
 8004ec8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ecc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ed0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	330c      	adds	r3, #12
 8004ed8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004eda:	643a      	str	r2, [r7, #64]	; 0x40
 8004edc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ede:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ee0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ee2:	e841 2300 	strex	r3, r2, [r1]
 8004ee6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1e5      	bne.n	8004eba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	3314      	adds	r3, #20
 8004ef4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef6:	6a3b      	ldr	r3, [r7, #32]
 8004ef8:	e853 3f00 	ldrex	r3, [r3]
 8004efc:	61fb      	str	r3, [r7, #28]
   return(result);
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	f023 0301 	bic.w	r3, r3, #1
 8004f04:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	3314      	adds	r3, #20
 8004f0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f10:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f16:	e841 2300 	strex	r3, r2, [r1]
 8004f1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d1e5      	bne.n	8004eee <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d119      	bne.n	8004f5e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	330c      	adds	r3, #12
 8004f30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	e853 3f00 	ldrex	r3, [r3]
 8004f38:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	f023 0310 	bic.w	r3, r3, #16
 8004f40:	647b      	str	r3, [r7, #68]	; 0x44
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	330c      	adds	r3, #12
 8004f48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f4a:	61ba      	str	r2, [r7, #24]
 8004f4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4e:	6979      	ldr	r1, [r7, #20]
 8004f50:	69ba      	ldr	r2, [r7, #24]
 8004f52:	e841 2300 	strex	r3, r2, [r1]
 8004f56:	613b      	str	r3, [r7, #16]
   return(result);
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1e5      	bne.n	8004f2a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2220      	movs	r2, #32
 8004f62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004f6c:	bf00      	nop
 8004f6e:	3754      	adds	r7, #84	; 0x54
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f84:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f7ff fee4 	bl	8004d60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f98:	bf00      	nop
 8004f9a:	3710      	adds	r7, #16
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	2b21      	cmp	r3, #33	; 0x21
 8004fb2:	d13e      	bne.n	8005032 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fbc:	d114      	bne.n	8004fe8 <UART_Transmit_IT+0x48>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d110      	bne.n	8004fe8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	881b      	ldrh	r3, [r3, #0]
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fda:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a1b      	ldr	r3, [r3, #32]
 8004fe0:	1c9a      	adds	r2, r3, #2
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	621a      	str	r2, [r3, #32]
 8004fe6:	e008      	b.n	8004ffa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a1b      	ldr	r3, [r3, #32]
 8004fec:	1c59      	adds	r1, r3, #1
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	6211      	str	r1, [r2, #32]
 8004ff2:	781a      	ldrb	r2, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	3b01      	subs	r3, #1
 8005002:	b29b      	uxth	r3, r3
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	4619      	mov	r1, r3
 8005008:	84d1      	strh	r1, [r2, #38]	; 0x26
 800500a:	2b00      	cmp	r3, #0
 800500c:	d10f      	bne.n	800502e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68da      	ldr	r2, [r3, #12]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800501c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	68da      	ldr	r2, [r3, #12]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800502c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800502e:	2300      	movs	r3, #0
 8005030:	e000      	b.n	8005034 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005032:	2302      	movs	r3, #2
  }
}
 8005034:	4618      	mov	r0, r3
 8005036:	3714      	adds	r7, #20
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b082      	sub	sp, #8
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68da      	ldr	r2, [r3, #12]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005056:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2220      	movs	r2, #32
 800505c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f7ff fe73 	bl	8004d4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005066:	2300      	movs	r3, #0
}
 8005068:	4618      	mov	r0, r3
 800506a:	3708      	adds	r7, #8
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b08c      	sub	sp, #48	; 0x30
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800507e:	b2db      	uxtb	r3, r3
 8005080:	2b22      	cmp	r3, #34	; 0x22
 8005082:	f040 80ae 	bne.w	80051e2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800508e:	d117      	bne.n	80050c0 <UART_Receive_IT+0x50>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d113      	bne.n	80050c0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005098:	2300      	movs	r3, #0
 800509a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a0:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b8:	1c9a      	adds	r2, r3, #2
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	629a      	str	r2, [r3, #40]	; 0x28
 80050be:	e026      	b.n	800510e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80050c6:	2300      	movs	r3, #0
 80050c8:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050d2:	d007      	beq.n	80050e4 <UART_Receive_IT+0x74>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d10a      	bne.n	80050f2 <UART_Receive_IT+0x82>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	691b      	ldr	r3, [r3, #16]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d106      	bne.n	80050f2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	b2da      	uxtb	r2, r3
 80050ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ee:	701a      	strb	r2, [r3, #0]
 80050f0:	e008      	b.n	8005104 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050fe:	b2da      	uxtb	r2, r3
 8005100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005102:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005108:	1c5a      	adds	r2, r3, #1
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005112:	b29b      	uxth	r3, r3
 8005114:	3b01      	subs	r3, #1
 8005116:	b29b      	uxth	r3, r3
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	4619      	mov	r1, r3
 800511c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800511e:	2b00      	cmp	r3, #0
 8005120:	d15d      	bne.n	80051de <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68da      	ldr	r2, [r3, #12]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f022 0220 	bic.w	r2, r2, #32
 8005130:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68da      	ldr	r2, [r3, #12]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005140:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	695a      	ldr	r2, [r3, #20]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f022 0201 	bic.w	r2, r2, #1
 8005150:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2220      	movs	r2, #32
 8005156:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005164:	2b01      	cmp	r3, #1
 8005166:	d135      	bne.n	80051d4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	330c      	adds	r3, #12
 8005174:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	e853 3f00 	ldrex	r3, [r3]
 800517c:	613b      	str	r3, [r7, #16]
   return(result);
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	f023 0310 	bic.w	r3, r3, #16
 8005184:	627b      	str	r3, [r7, #36]	; 0x24
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	330c      	adds	r3, #12
 800518c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800518e:	623a      	str	r2, [r7, #32]
 8005190:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005192:	69f9      	ldr	r1, [r7, #28]
 8005194:	6a3a      	ldr	r2, [r7, #32]
 8005196:	e841 2300 	strex	r3, r2, [r1]
 800519a:	61bb      	str	r3, [r7, #24]
   return(result);
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1e5      	bne.n	800516e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0310 	and.w	r3, r3, #16
 80051ac:	2b10      	cmp	r3, #16
 80051ae:	d10a      	bne.n	80051c6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051b0:	2300      	movs	r3, #0
 80051b2:	60fb      	str	r3, [r7, #12]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	60fb      	str	r3, [r7, #12]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	60fb      	str	r3, [r7, #12]
 80051c4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80051ca:	4619      	mov	r1, r3
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f7ff fdd1 	bl	8004d74 <HAL_UARTEx_RxEventCallback>
 80051d2:	e002      	b.n	80051da <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f7fc fa4b 	bl	8001670 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80051da:	2300      	movs	r3, #0
 80051dc:	e002      	b.n	80051e4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80051de:	2300      	movs	r3, #0
 80051e0:	e000      	b.n	80051e4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80051e2:	2302      	movs	r3, #2
  }
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3730      	adds	r7, #48	; 0x30
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051f0:	b0c0      	sub	sp, #256	; 0x100
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005208:	68d9      	ldr	r1, [r3, #12]
 800520a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	ea40 0301 	orr.w	r3, r0, r1
 8005214:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800521a:	689a      	ldr	r2, [r3, #8]
 800521c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	431a      	orrs	r2, r3
 8005224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	431a      	orrs	r2, r3
 800522c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005230:	69db      	ldr	r3, [r3, #28]
 8005232:	4313      	orrs	r3, r2
 8005234:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005244:	f021 010c 	bic.w	r1, r1, #12
 8005248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005252:	430b      	orrs	r3, r1
 8005254:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	695b      	ldr	r3, [r3, #20]
 800525e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005266:	6999      	ldr	r1, [r3, #24]
 8005268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	ea40 0301 	orr.w	r3, r0, r1
 8005272:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	4b8f      	ldr	r3, [pc, #572]	; (80054b8 <UART_SetConfig+0x2cc>)
 800527c:	429a      	cmp	r2, r3
 800527e:	d005      	beq.n	800528c <UART_SetConfig+0xa0>
 8005280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	4b8d      	ldr	r3, [pc, #564]	; (80054bc <UART_SetConfig+0x2d0>)
 8005288:	429a      	cmp	r2, r3
 800528a:	d104      	bne.n	8005296 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800528c:	f7fe f93a 	bl	8003504 <HAL_RCC_GetPCLK2Freq>
 8005290:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005294:	e003      	b.n	800529e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005296:	f7fe f921 	bl	80034dc <HAL_RCC_GetPCLK1Freq>
 800529a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800529e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052a2:	69db      	ldr	r3, [r3, #28]
 80052a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052a8:	f040 810c 	bne.w	80054c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052b0:	2200      	movs	r2, #0
 80052b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80052b6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80052ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80052be:	4622      	mov	r2, r4
 80052c0:	462b      	mov	r3, r5
 80052c2:	1891      	adds	r1, r2, r2
 80052c4:	65b9      	str	r1, [r7, #88]	; 0x58
 80052c6:	415b      	adcs	r3, r3
 80052c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80052ce:	4621      	mov	r1, r4
 80052d0:	eb12 0801 	adds.w	r8, r2, r1
 80052d4:	4629      	mov	r1, r5
 80052d6:	eb43 0901 	adc.w	r9, r3, r1
 80052da:	f04f 0200 	mov.w	r2, #0
 80052de:	f04f 0300 	mov.w	r3, #0
 80052e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052ee:	4690      	mov	r8, r2
 80052f0:	4699      	mov	r9, r3
 80052f2:	4623      	mov	r3, r4
 80052f4:	eb18 0303 	adds.w	r3, r8, r3
 80052f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80052fc:	462b      	mov	r3, r5
 80052fe:	eb49 0303 	adc.w	r3, r9, r3
 8005302:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005312:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005316:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800531a:	460b      	mov	r3, r1
 800531c:	18db      	adds	r3, r3, r3
 800531e:	653b      	str	r3, [r7, #80]	; 0x50
 8005320:	4613      	mov	r3, r2
 8005322:	eb42 0303 	adc.w	r3, r2, r3
 8005326:	657b      	str	r3, [r7, #84]	; 0x54
 8005328:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800532c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005330:	f7fa ffa6 	bl	8000280 <__aeabi_uldivmod>
 8005334:	4602      	mov	r2, r0
 8005336:	460b      	mov	r3, r1
 8005338:	4b61      	ldr	r3, [pc, #388]	; (80054c0 <UART_SetConfig+0x2d4>)
 800533a:	fba3 2302 	umull	r2, r3, r3, r2
 800533e:	095b      	lsrs	r3, r3, #5
 8005340:	011c      	lsls	r4, r3, #4
 8005342:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005346:	2200      	movs	r2, #0
 8005348:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800534c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005350:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005354:	4642      	mov	r2, r8
 8005356:	464b      	mov	r3, r9
 8005358:	1891      	adds	r1, r2, r2
 800535a:	64b9      	str	r1, [r7, #72]	; 0x48
 800535c:	415b      	adcs	r3, r3
 800535e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005360:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005364:	4641      	mov	r1, r8
 8005366:	eb12 0a01 	adds.w	sl, r2, r1
 800536a:	4649      	mov	r1, r9
 800536c:	eb43 0b01 	adc.w	fp, r3, r1
 8005370:	f04f 0200 	mov.w	r2, #0
 8005374:	f04f 0300 	mov.w	r3, #0
 8005378:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800537c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005380:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005384:	4692      	mov	sl, r2
 8005386:	469b      	mov	fp, r3
 8005388:	4643      	mov	r3, r8
 800538a:	eb1a 0303 	adds.w	r3, sl, r3
 800538e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005392:	464b      	mov	r3, r9
 8005394:	eb4b 0303 	adc.w	r3, fp, r3
 8005398:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800539c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053a8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80053ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80053b0:	460b      	mov	r3, r1
 80053b2:	18db      	adds	r3, r3, r3
 80053b4:	643b      	str	r3, [r7, #64]	; 0x40
 80053b6:	4613      	mov	r3, r2
 80053b8:	eb42 0303 	adc.w	r3, r2, r3
 80053bc:	647b      	str	r3, [r7, #68]	; 0x44
 80053be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80053c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80053c6:	f7fa ff5b 	bl	8000280 <__aeabi_uldivmod>
 80053ca:	4602      	mov	r2, r0
 80053cc:	460b      	mov	r3, r1
 80053ce:	4611      	mov	r1, r2
 80053d0:	4b3b      	ldr	r3, [pc, #236]	; (80054c0 <UART_SetConfig+0x2d4>)
 80053d2:	fba3 2301 	umull	r2, r3, r3, r1
 80053d6:	095b      	lsrs	r3, r3, #5
 80053d8:	2264      	movs	r2, #100	; 0x64
 80053da:	fb02 f303 	mul.w	r3, r2, r3
 80053de:	1acb      	subs	r3, r1, r3
 80053e0:	00db      	lsls	r3, r3, #3
 80053e2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80053e6:	4b36      	ldr	r3, [pc, #216]	; (80054c0 <UART_SetConfig+0x2d4>)
 80053e8:	fba3 2302 	umull	r2, r3, r3, r2
 80053ec:	095b      	lsrs	r3, r3, #5
 80053ee:	005b      	lsls	r3, r3, #1
 80053f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80053f4:	441c      	add	r4, r3
 80053f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053fa:	2200      	movs	r2, #0
 80053fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005400:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005404:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005408:	4642      	mov	r2, r8
 800540a:	464b      	mov	r3, r9
 800540c:	1891      	adds	r1, r2, r2
 800540e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005410:	415b      	adcs	r3, r3
 8005412:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005414:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005418:	4641      	mov	r1, r8
 800541a:	1851      	adds	r1, r2, r1
 800541c:	6339      	str	r1, [r7, #48]	; 0x30
 800541e:	4649      	mov	r1, r9
 8005420:	414b      	adcs	r3, r1
 8005422:	637b      	str	r3, [r7, #52]	; 0x34
 8005424:	f04f 0200 	mov.w	r2, #0
 8005428:	f04f 0300 	mov.w	r3, #0
 800542c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005430:	4659      	mov	r1, fp
 8005432:	00cb      	lsls	r3, r1, #3
 8005434:	4651      	mov	r1, sl
 8005436:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800543a:	4651      	mov	r1, sl
 800543c:	00ca      	lsls	r2, r1, #3
 800543e:	4610      	mov	r0, r2
 8005440:	4619      	mov	r1, r3
 8005442:	4603      	mov	r3, r0
 8005444:	4642      	mov	r2, r8
 8005446:	189b      	adds	r3, r3, r2
 8005448:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800544c:	464b      	mov	r3, r9
 800544e:	460a      	mov	r2, r1
 8005450:	eb42 0303 	adc.w	r3, r2, r3
 8005454:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005464:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005468:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800546c:	460b      	mov	r3, r1
 800546e:	18db      	adds	r3, r3, r3
 8005470:	62bb      	str	r3, [r7, #40]	; 0x28
 8005472:	4613      	mov	r3, r2
 8005474:	eb42 0303 	adc.w	r3, r2, r3
 8005478:	62fb      	str	r3, [r7, #44]	; 0x2c
 800547a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800547e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005482:	f7fa fefd 	bl	8000280 <__aeabi_uldivmod>
 8005486:	4602      	mov	r2, r0
 8005488:	460b      	mov	r3, r1
 800548a:	4b0d      	ldr	r3, [pc, #52]	; (80054c0 <UART_SetConfig+0x2d4>)
 800548c:	fba3 1302 	umull	r1, r3, r3, r2
 8005490:	095b      	lsrs	r3, r3, #5
 8005492:	2164      	movs	r1, #100	; 0x64
 8005494:	fb01 f303 	mul.w	r3, r1, r3
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	00db      	lsls	r3, r3, #3
 800549c:	3332      	adds	r3, #50	; 0x32
 800549e:	4a08      	ldr	r2, [pc, #32]	; (80054c0 <UART_SetConfig+0x2d4>)
 80054a0:	fba2 2303 	umull	r2, r3, r2, r3
 80054a4:	095b      	lsrs	r3, r3, #5
 80054a6:	f003 0207 	and.w	r2, r3, #7
 80054aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4422      	add	r2, r4
 80054b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80054b4:	e106      	b.n	80056c4 <UART_SetConfig+0x4d8>
 80054b6:	bf00      	nop
 80054b8:	40011000 	.word	0x40011000
 80054bc:	40011400 	.word	0x40011400
 80054c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054c8:	2200      	movs	r2, #0
 80054ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80054ce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80054d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80054d6:	4642      	mov	r2, r8
 80054d8:	464b      	mov	r3, r9
 80054da:	1891      	adds	r1, r2, r2
 80054dc:	6239      	str	r1, [r7, #32]
 80054de:	415b      	adcs	r3, r3
 80054e0:	627b      	str	r3, [r7, #36]	; 0x24
 80054e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80054e6:	4641      	mov	r1, r8
 80054e8:	1854      	adds	r4, r2, r1
 80054ea:	4649      	mov	r1, r9
 80054ec:	eb43 0501 	adc.w	r5, r3, r1
 80054f0:	f04f 0200 	mov.w	r2, #0
 80054f4:	f04f 0300 	mov.w	r3, #0
 80054f8:	00eb      	lsls	r3, r5, #3
 80054fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054fe:	00e2      	lsls	r2, r4, #3
 8005500:	4614      	mov	r4, r2
 8005502:	461d      	mov	r5, r3
 8005504:	4643      	mov	r3, r8
 8005506:	18e3      	adds	r3, r4, r3
 8005508:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800550c:	464b      	mov	r3, r9
 800550e:	eb45 0303 	adc.w	r3, r5, r3
 8005512:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005522:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005526:	f04f 0200 	mov.w	r2, #0
 800552a:	f04f 0300 	mov.w	r3, #0
 800552e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005532:	4629      	mov	r1, r5
 8005534:	008b      	lsls	r3, r1, #2
 8005536:	4621      	mov	r1, r4
 8005538:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800553c:	4621      	mov	r1, r4
 800553e:	008a      	lsls	r2, r1, #2
 8005540:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005544:	f7fa fe9c 	bl	8000280 <__aeabi_uldivmod>
 8005548:	4602      	mov	r2, r0
 800554a:	460b      	mov	r3, r1
 800554c:	4b60      	ldr	r3, [pc, #384]	; (80056d0 <UART_SetConfig+0x4e4>)
 800554e:	fba3 2302 	umull	r2, r3, r3, r2
 8005552:	095b      	lsrs	r3, r3, #5
 8005554:	011c      	lsls	r4, r3, #4
 8005556:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800555a:	2200      	movs	r2, #0
 800555c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005560:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005564:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005568:	4642      	mov	r2, r8
 800556a:	464b      	mov	r3, r9
 800556c:	1891      	adds	r1, r2, r2
 800556e:	61b9      	str	r1, [r7, #24]
 8005570:	415b      	adcs	r3, r3
 8005572:	61fb      	str	r3, [r7, #28]
 8005574:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005578:	4641      	mov	r1, r8
 800557a:	1851      	adds	r1, r2, r1
 800557c:	6139      	str	r1, [r7, #16]
 800557e:	4649      	mov	r1, r9
 8005580:	414b      	adcs	r3, r1
 8005582:	617b      	str	r3, [r7, #20]
 8005584:	f04f 0200 	mov.w	r2, #0
 8005588:	f04f 0300 	mov.w	r3, #0
 800558c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005590:	4659      	mov	r1, fp
 8005592:	00cb      	lsls	r3, r1, #3
 8005594:	4651      	mov	r1, sl
 8005596:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800559a:	4651      	mov	r1, sl
 800559c:	00ca      	lsls	r2, r1, #3
 800559e:	4610      	mov	r0, r2
 80055a0:	4619      	mov	r1, r3
 80055a2:	4603      	mov	r3, r0
 80055a4:	4642      	mov	r2, r8
 80055a6:	189b      	adds	r3, r3, r2
 80055a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80055ac:	464b      	mov	r3, r9
 80055ae:	460a      	mov	r2, r1
 80055b0:	eb42 0303 	adc.w	r3, r2, r3
 80055b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80055b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80055c2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80055c4:	f04f 0200 	mov.w	r2, #0
 80055c8:	f04f 0300 	mov.w	r3, #0
 80055cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80055d0:	4649      	mov	r1, r9
 80055d2:	008b      	lsls	r3, r1, #2
 80055d4:	4641      	mov	r1, r8
 80055d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055da:	4641      	mov	r1, r8
 80055dc:	008a      	lsls	r2, r1, #2
 80055de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80055e2:	f7fa fe4d 	bl	8000280 <__aeabi_uldivmod>
 80055e6:	4602      	mov	r2, r0
 80055e8:	460b      	mov	r3, r1
 80055ea:	4611      	mov	r1, r2
 80055ec:	4b38      	ldr	r3, [pc, #224]	; (80056d0 <UART_SetConfig+0x4e4>)
 80055ee:	fba3 2301 	umull	r2, r3, r3, r1
 80055f2:	095b      	lsrs	r3, r3, #5
 80055f4:	2264      	movs	r2, #100	; 0x64
 80055f6:	fb02 f303 	mul.w	r3, r2, r3
 80055fa:	1acb      	subs	r3, r1, r3
 80055fc:	011b      	lsls	r3, r3, #4
 80055fe:	3332      	adds	r3, #50	; 0x32
 8005600:	4a33      	ldr	r2, [pc, #204]	; (80056d0 <UART_SetConfig+0x4e4>)
 8005602:	fba2 2303 	umull	r2, r3, r2, r3
 8005606:	095b      	lsrs	r3, r3, #5
 8005608:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800560c:	441c      	add	r4, r3
 800560e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005612:	2200      	movs	r2, #0
 8005614:	673b      	str	r3, [r7, #112]	; 0x70
 8005616:	677a      	str	r2, [r7, #116]	; 0x74
 8005618:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800561c:	4642      	mov	r2, r8
 800561e:	464b      	mov	r3, r9
 8005620:	1891      	adds	r1, r2, r2
 8005622:	60b9      	str	r1, [r7, #8]
 8005624:	415b      	adcs	r3, r3
 8005626:	60fb      	str	r3, [r7, #12]
 8005628:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800562c:	4641      	mov	r1, r8
 800562e:	1851      	adds	r1, r2, r1
 8005630:	6039      	str	r1, [r7, #0]
 8005632:	4649      	mov	r1, r9
 8005634:	414b      	adcs	r3, r1
 8005636:	607b      	str	r3, [r7, #4]
 8005638:	f04f 0200 	mov.w	r2, #0
 800563c:	f04f 0300 	mov.w	r3, #0
 8005640:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005644:	4659      	mov	r1, fp
 8005646:	00cb      	lsls	r3, r1, #3
 8005648:	4651      	mov	r1, sl
 800564a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800564e:	4651      	mov	r1, sl
 8005650:	00ca      	lsls	r2, r1, #3
 8005652:	4610      	mov	r0, r2
 8005654:	4619      	mov	r1, r3
 8005656:	4603      	mov	r3, r0
 8005658:	4642      	mov	r2, r8
 800565a:	189b      	adds	r3, r3, r2
 800565c:	66bb      	str	r3, [r7, #104]	; 0x68
 800565e:	464b      	mov	r3, r9
 8005660:	460a      	mov	r2, r1
 8005662:	eb42 0303 	adc.w	r3, r2, r3
 8005666:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	663b      	str	r3, [r7, #96]	; 0x60
 8005672:	667a      	str	r2, [r7, #100]	; 0x64
 8005674:	f04f 0200 	mov.w	r2, #0
 8005678:	f04f 0300 	mov.w	r3, #0
 800567c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005680:	4649      	mov	r1, r9
 8005682:	008b      	lsls	r3, r1, #2
 8005684:	4641      	mov	r1, r8
 8005686:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800568a:	4641      	mov	r1, r8
 800568c:	008a      	lsls	r2, r1, #2
 800568e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005692:	f7fa fdf5 	bl	8000280 <__aeabi_uldivmod>
 8005696:	4602      	mov	r2, r0
 8005698:	460b      	mov	r3, r1
 800569a:	4b0d      	ldr	r3, [pc, #52]	; (80056d0 <UART_SetConfig+0x4e4>)
 800569c:	fba3 1302 	umull	r1, r3, r3, r2
 80056a0:	095b      	lsrs	r3, r3, #5
 80056a2:	2164      	movs	r1, #100	; 0x64
 80056a4:	fb01 f303 	mul.w	r3, r1, r3
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	011b      	lsls	r3, r3, #4
 80056ac:	3332      	adds	r3, #50	; 0x32
 80056ae:	4a08      	ldr	r2, [pc, #32]	; (80056d0 <UART_SetConfig+0x4e4>)
 80056b0:	fba2 2303 	umull	r2, r3, r2, r3
 80056b4:	095b      	lsrs	r3, r3, #5
 80056b6:	f003 020f 	and.w	r2, r3, #15
 80056ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4422      	add	r2, r4
 80056c2:	609a      	str	r2, [r3, #8]
}
 80056c4:	bf00      	nop
 80056c6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80056ca:	46bd      	mov	sp, r7
 80056cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056d0:	51eb851f 	.word	0x51eb851f

080056d4 <atoi>:
 80056d4:	220a      	movs	r2, #10
 80056d6:	2100      	movs	r1, #0
 80056d8:	f000 b882 	b.w	80057e0 <strtol>

080056dc <_strtol_l.constprop.0>:
 80056dc:	2b01      	cmp	r3, #1
 80056de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056e2:	d001      	beq.n	80056e8 <_strtol_l.constprop.0+0xc>
 80056e4:	2b24      	cmp	r3, #36	; 0x24
 80056e6:	d906      	bls.n	80056f6 <_strtol_l.constprop.0+0x1a>
 80056e8:	f000 fae2 	bl	8005cb0 <__errno>
 80056ec:	2316      	movs	r3, #22
 80056ee:	6003      	str	r3, [r0, #0]
 80056f0:	2000      	movs	r0, #0
 80056f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056f6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80057dc <_strtol_l.constprop.0+0x100>
 80056fa:	460d      	mov	r5, r1
 80056fc:	462e      	mov	r6, r5
 80056fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005702:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8005706:	f017 0708 	ands.w	r7, r7, #8
 800570a:	d1f7      	bne.n	80056fc <_strtol_l.constprop.0+0x20>
 800570c:	2c2d      	cmp	r4, #45	; 0x2d
 800570e:	d132      	bne.n	8005776 <_strtol_l.constprop.0+0x9a>
 8005710:	782c      	ldrb	r4, [r5, #0]
 8005712:	2701      	movs	r7, #1
 8005714:	1cb5      	adds	r5, r6, #2
 8005716:	2b00      	cmp	r3, #0
 8005718:	d05b      	beq.n	80057d2 <_strtol_l.constprop.0+0xf6>
 800571a:	2b10      	cmp	r3, #16
 800571c:	d109      	bne.n	8005732 <_strtol_l.constprop.0+0x56>
 800571e:	2c30      	cmp	r4, #48	; 0x30
 8005720:	d107      	bne.n	8005732 <_strtol_l.constprop.0+0x56>
 8005722:	782c      	ldrb	r4, [r5, #0]
 8005724:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005728:	2c58      	cmp	r4, #88	; 0x58
 800572a:	d14d      	bne.n	80057c8 <_strtol_l.constprop.0+0xec>
 800572c:	786c      	ldrb	r4, [r5, #1]
 800572e:	2310      	movs	r3, #16
 8005730:	3502      	adds	r5, #2
 8005732:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005736:	f108 38ff 	add.w	r8, r8, #4294967295
 800573a:	f04f 0e00 	mov.w	lr, #0
 800573e:	fbb8 f9f3 	udiv	r9, r8, r3
 8005742:	4676      	mov	r6, lr
 8005744:	fb03 8a19 	mls	sl, r3, r9, r8
 8005748:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800574c:	f1bc 0f09 	cmp.w	ip, #9
 8005750:	d816      	bhi.n	8005780 <_strtol_l.constprop.0+0xa4>
 8005752:	4664      	mov	r4, ip
 8005754:	42a3      	cmp	r3, r4
 8005756:	dd24      	ble.n	80057a2 <_strtol_l.constprop.0+0xc6>
 8005758:	f1be 3fff 	cmp.w	lr, #4294967295
 800575c:	d008      	beq.n	8005770 <_strtol_l.constprop.0+0x94>
 800575e:	45b1      	cmp	r9, r6
 8005760:	d31c      	bcc.n	800579c <_strtol_l.constprop.0+0xc0>
 8005762:	d101      	bne.n	8005768 <_strtol_l.constprop.0+0x8c>
 8005764:	45a2      	cmp	sl, r4
 8005766:	db19      	blt.n	800579c <_strtol_l.constprop.0+0xc0>
 8005768:	fb06 4603 	mla	r6, r6, r3, r4
 800576c:	f04f 0e01 	mov.w	lr, #1
 8005770:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005774:	e7e8      	b.n	8005748 <_strtol_l.constprop.0+0x6c>
 8005776:	2c2b      	cmp	r4, #43	; 0x2b
 8005778:	bf04      	itt	eq
 800577a:	782c      	ldrbeq	r4, [r5, #0]
 800577c:	1cb5      	addeq	r5, r6, #2
 800577e:	e7ca      	b.n	8005716 <_strtol_l.constprop.0+0x3a>
 8005780:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005784:	f1bc 0f19 	cmp.w	ip, #25
 8005788:	d801      	bhi.n	800578e <_strtol_l.constprop.0+0xb2>
 800578a:	3c37      	subs	r4, #55	; 0x37
 800578c:	e7e2      	b.n	8005754 <_strtol_l.constprop.0+0x78>
 800578e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005792:	f1bc 0f19 	cmp.w	ip, #25
 8005796:	d804      	bhi.n	80057a2 <_strtol_l.constprop.0+0xc6>
 8005798:	3c57      	subs	r4, #87	; 0x57
 800579a:	e7db      	b.n	8005754 <_strtol_l.constprop.0+0x78>
 800579c:	f04f 3eff 	mov.w	lr, #4294967295
 80057a0:	e7e6      	b.n	8005770 <_strtol_l.constprop.0+0x94>
 80057a2:	f1be 3fff 	cmp.w	lr, #4294967295
 80057a6:	d105      	bne.n	80057b4 <_strtol_l.constprop.0+0xd8>
 80057a8:	2322      	movs	r3, #34	; 0x22
 80057aa:	6003      	str	r3, [r0, #0]
 80057ac:	4646      	mov	r6, r8
 80057ae:	b942      	cbnz	r2, 80057c2 <_strtol_l.constprop.0+0xe6>
 80057b0:	4630      	mov	r0, r6
 80057b2:	e79e      	b.n	80056f2 <_strtol_l.constprop.0+0x16>
 80057b4:	b107      	cbz	r7, 80057b8 <_strtol_l.constprop.0+0xdc>
 80057b6:	4276      	negs	r6, r6
 80057b8:	2a00      	cmp	r2, #0
 80057ba:	d0f9      	beq.n	80057b0 <_strtol_l.constprop.0+0xd4>
 80057bc:	f1be 0f00 	cmp.w	lr, #0
 80057c0:	d000      	beq.n	80057c4 <_strtol_l.constprop.0+0xe8>
 80057c2:	1e69      	subs	r1, r5, #1
 80057c4:	6011      	str	r1, [r2, #0]
 80057c6:	e7f3      	b.n	80057b0 <_strtol_l.constprop.0+0xd4>
 80057c8:	2430      	movs	r4, #48	; 0x30
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1b1      	bne.n	8005732 <_strtol_l.constprop.0+0x56>
 80057ce:	2308      	movs	r3, #8
 80057d0:	e7af      	b.n	8005732 <_strtol_l.constprop.0+0x56>
 80057d2:	2c30      	cmp	r4, #48	; 0x30
 80057d4:	d0a5      	beq.n	8005722 <_strtol_l.constprop.0+0x46>
 80057d6:	230a      	movs	r3, #10
 80057d8:	e7ab      	b.n	8005732 <_strtol_l.constprop.0+0x56>
 80057da:	bf00      	nop
 80057dc:	080068b5 	.word	0x080068b5

080057e0 <strtol>:
 80057e0:	4613      	mov	r3, r2
 80057e2:	460a      	mov	r2, r1
 80057e4:	4601      	mov	r1, r0
 80057e6:	4802      	ldr	r0, [pc, #8]	; (80057f0 <strtol+0x10>)
 80057e8:	6800      	ldr	r0, [r0, #0]
 80057ea:	f7ff bf77 	b.w	80056dc <_strtol_l.constprop.0>
 80057ee:	bf00      	nop
 80057f0:	20000084 	.word	0x20000084

080057f4 <std>:
 80057f4:	2300      	movs	r3, #0
 80057f6:	b510      	push	{r4, lr}
 80057f8:	4604      	mov	r4, r0
 80057fa:	e9c0 3300 	strd	r3, r3, [r0]
 80057fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005802:	6083      	str	r3, [r0, #8]
 8005804:	8181      	strh	r1, [r0, #12]
 8005806:	6643      	str	r3, [r0, #100]	; 0x64
 8005808:	81c2      	strh	r2, [r0, #14]
 800580a:	6183      	str	r3, [r0, #24]
 800580c:	4619      	mov	r1, r3
 800580e:	2208      	movs	r2, #8
 8005810:	305c      	adds	r0, #92	; 0x5c
 8005812:	f000 f9ff 	bl	8005c14 <memset>
 8005816:	4b0d      	ldr	r3, [pc, #52]	; (800584c <std+0x58>)
 8005818:	6263      	str	r3, [r4, #36]	; 0x24
 800581a:	4b0d      	ldr	r3, [pc, #52]	; (8005850 <std+0x5c>)
 800581c:	62a3      	str	r3, [r4, #40]	; 0x28
 800581e:	4b0d      	ldr	r3, [pc, #52]	; (8005854 <std+0x60>)
 8005820:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005822:	4b0d      	ldr	r3, [pc, #52]	; (8005858 <std+0x64>)
 8005824:	6323      	str	r3, [r4, #48]	; 0x30
 8005826:	4b0d      	ldr	r3, [pc, #52]	; (800585c <std+0x68>)
 8005828:	6224      	str	r4, [r4, #32]
 800582a:	429c      	cmp	r4, r3
 800582c:	d006      	beq.n	800583c <std+0x48>
 800582e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005832:	4294      	cmp	r4, r2
 8005834:	d002      	beq.n	800583c <std+0x48>
 8005836:	33d0      	adds	r3, #208	; 0xd0
 8005838:	429c      	cmp	r4, r3
 800583a:	d105      	bne.n	8005848 <std+0x54>
 800583c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005844:	f000 ba5e 	b.w	8005d04 <__retarget_lock_init_recursive>
 8005848:	bd10      	pop	{r4, pc}
 800584a:	bf00      	nop
 800584c:	08005a65 	.word	0x08005a65
 8005850:	08005a87 	.word	0x08005a87
 8005854:	08005abf 	.word	0x08005abf
 8005858:	08005ae3 	.word	0x08005ae3
 800585c:	20000400 	.word	0x20000400

08005860 <stdio_exit_handler>:
 8005860:	4a02      	ldr	r2, [pc, #8]	; (800586c <stdio_exit_handler+0xc>)
 8005862:	4903      	ldr	r1, [pc, #12]	; (8005870 <stdio_exit_handler+0x10>)
 8005864:	4803      	ldr	r0, [pc, #12]	; (8005874 <stdio_exit_handler+0x14>)
 8005866:	f000 b869 	b.w	800593c <_fwalk_sglue>
 800586a:	bf00      	nop
 800586c:	2000002c 	.word	0x2000002c
 8005870:	080065b1 	.word	0x080065b1
 8005874:	20000038 	.word	0x20000038

08005878 <cleanup_stdio>:
 8005878:	6841      	ldr	r1, [r0, #4]
 800587a:	4b0c      	ldr	r3, [pc, #48]	; (80058ac <cleanup_stdio+0x34>)
 800587c:	4299      	cmp	r1, r3
 800587e:	b510      	push	{r4, lr}
 8005880:	4604      	mov	r4, r0
 8005882:	d001      	beq.n	8005888 <cleanup_stdio+0x10>
 8005884:	f000 fe94 	bl	80065b0 <_fflush_r>
 8005888:	68a1      	ldr	r1, [r4, #8]
 800588a:	4b09      	ldr	r3, [pc, #36]	; (80058b0 <cleanup_stdio+0x38>)
 800588c:	4299      	cmp	r1, r3
 800588e:	d002      	beq.n	8005896 <cleanup_stdio+0x1e>
 8005890:	4620      	mov	r0, r4
 8005892:	f000 fe8d 	bl	80065b0 <_fflush_r>
 8005896:	68e1      	ldr	r1, [r4, #12]
 8005898:	4b06      	ldr	r3, [pc, #24]	; (80058b4 <cleanup_stdio+0x3c>)
 800589a:	4299      	cmp	r1, r3
 800589c:	d004      	beq.n	80058a8 <cleanup_stdio+0x30>
 800589e:	4620      	mov	r0, r4
 80058a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058a4:	f000 be84 	b.w	80065b0 <_fflush_r>
 80058a8:	bd10      	pop	{r4, pc}
 80058aa:	bf00      	nop
 80058ac:	20000400 	.word	0x20000400
 80058b0:	20000468 	.word	0x20000468
 80058b4:	200004d0 	.word	0x200004d0

080058b8 <global_stdio_init.part.0>:
 80058b8:	b510      	push	{r4, lr}
 80058ba:	4b0b      	ldr	r3, [pc, #44]	; (80058e8 <global_stdio_init.part.0+0x30>)
 80058bc:	4c0b      	ldr	r4, [pc, #44]	; (80058ec <global_stdio_init.part.0+0x34>)
 80058be:	4a0c      	ldr	r2, [pc, #48]	; (80058f0 <global_stdio_init.part.0+0x38>)
 80058c0:	601a      	str	r2, [r3, #0]
 80058c2:	4620      	mov	r0, r4
 80058c4:	2200      	movs	r2, #0
 80058c6:	2104      	movs	r1, #4
 80058c8:	f7ff ff94 	bl	80057f4 <std>
 80058cc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80058d0:	2201      	movs	r2, #1
 80058d2:	2109      	movs	r1, #9
 80058d4:	f7ff ff8e 	bl	80057f4 <std>
 80058d8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80058dc:	2202      	movs	r2, #2
 80058de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058e2:	2112      	movs	r1, #18
 80058e4:	f7ff bf86 	b.w	80057f4 <std>
 80058e8:	20000538 	.word	0x20000538
 80058ec:	20000400 	.word	0x20000400
 80058f0:	08005861 	.word	0x08005861

080058f4 <__sfp_lock_acquire>:
 80058f4:	4801      	ldr	r0, [pc, #4]	; (80058fc <__sfp_lock_acquire+0x8>)
 80058f6:	f000 ba06 	b.w	8005d06 <__retarget_lock_acquire_recursive>
 80058fa:	bf00      	nop
 80058fc:	20000541 	.word	0x20000541

08005900 <__sfp_lock_release>:
 8005900:	4801      	ldr	r0, [pc, #4]	; (8005908 <__sfp_lock_release+0x8>)
 8005902:	f000 ba01 	b.w	8005d08 <__retarget_lock_release_recursive>
 8005906:	bf00      	nop
 8005908:	20000541 	.word	0x20000541

0800590c <__sinit>:
 800590c:	b510      	push	{r4, lr}
 800590e:	4604      	mov	r4, r0
 8005910:	f7ff fff0 	bl	80058f4 <__sfp_lock_acquire>
 8005914:	6a23      	ldr	r3, [r4, #32]
 8005916:	b11b      	cbz	r3, 8005920 <__sinit+0x14>
 8005918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800591c:	f7ff bff0 	b.w	8005900 <__sfp_lock_release>
 8005920:	4b04      	ldr	r3, [pc, #16]	; (8005934 <__sinit+0x28>)
 8005922:	6223      	str	r3, [r4, #32]
 8005924:	4b04      	ldr	r3, [pc, #16]	; (8005938 <__sinit+0x2c>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1f5      	bne.n	8005918 <__sinit+0xc>
 800592c:	f7ff ffc4 	bl	80058b8 <global_stdio_init.part.0>
 8005930:	e7f2      	b.n	8005918 <__sinit+0xc>
 8005932:	bf00      	nop
 8005934:	08005879 	.word	0x08005879
 8005938:	20000538 	.word	0x20000538

0800593c <_fwalk_sglue>:
 800593c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005940:	4607      	mov	r7, r0
 8005942:	4688      	mov	r8, r1
 8005944:	4614      	mov	r4, r2
 8005946:	2600      	movs	r6, #0
 8005948:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800594c:	f1b9 0901 	subs.w	r9, r9, #1
 8005950:	d505      	bpl.n	800595e <_fwalk_sglue+0x22>
 8005952:	6824      	ldr	r4, [r4, #0]
 8005954:	2c00      	cmp	r4, #0
 8005956:	d1f7      	bne.n	8005948 <_fwalk_sglue+0xc>
 8005958:	4630      	mov	r0, r6
 800595a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800595e:	89ab      	ldrh	r3, [r5, #12]
 8005960:	2b01      	cmp	r3, #1
 8005962:	d907      	bls.n	8005974 <_fwalk_sglue+0x38>
 8005964:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005968:	3301      	adds	r3, #1
 800596a:	d003      	beq.n	8005974 <_fwalk_sglue+0x38>
 800596c:	4629      	mov	r1, r5
 800596e:	4638      	mov	r0, r7
 8005970:	47c0      	blx	r8
 8005972:	4306      	orrs	r6, r0
 8005974:	3568      	adds	r5, #104	; 0x68
 8005976:	e7e9      	b.n	800594c <_fwalk_sglue+0x10>

08005978 <iprintf>:
 8005978:	b40f      	push	{r0, r1, r2, r3}
 800597a:	b507      	push	{r0, r1, r2, lr}
 800597c:	4906      	ldr	r1, [pc, #24]	; (8005998 <iprintf+0x20>)
 800597e:	ab04      	add	r3, sp, #16
 8005980:	6808      	ldr	r0, [r1, #0]
 8005982:	f853 2b04 	ldr.w	r2, [r3], #4
 8005986:	6881      	ldr	r1, [r0, #8]
 8005988:	9301      	str	r3, [sp, #4]
 800598a:	f000 fae1 	bl	8005f50 <_vfiprintf_r>
 800598e:	b003      	add	sp, #12
 8005990:	f85d eb04 	ldr.w	lr, [sp], #4
 8005994:	b004      	add	sp, #16
 8005996:	4770      	bx	lr
 8005998:	20000084 	.word	0x20000084

0800599c <putchar>:
 800599c:	4b02      	ldr	r3, [pc, #8]	; (80059a8 <putchar+0xc>)
 800599e:	4601      	mov	r1, r0
 80059a0:	6818      	ldr	r0, [r3, #0]
 80059a2:	6882      	ldr	r2, [r0, #8]
 80059a4:	f000 be8e 	b.w	80066c4 <_putc_r>
 80059a8:	20000084 	.word	0x20000084

080059ac <_puts_r>:
 80059ac:	6a03      	ldr	r3, [r0, #32]
 80059ae:	b570      	push	{r4, r5, r6, lr}
 80059b0:	6884      	ldr	r4, [r0, #8]
 80059b2:	4605      	mov	r5, r0
 80059b4:	460e      	mov	r6, r1
 80059b6:	b90b      	cbnz	r3, 80059bc <_puts_r+0x10>
 80059b8:	f7ff ffa8 	bl	800590c <__sinit>
 80059bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80059be:	07db      	lsls	r3, r3, #31
 80059c0:	d405      	bmi.n	80059ce <_puts_r+0x22>
 80059c2:	89a3      	ldrh	r3, [r4, #12]
 80059c4:	0598      	lsls	r0, r3, #22
 80059c6:	d402      	bmi.n	80059ce <_puts_r+0x22>
 80059c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059ca:	f000 f99c 	bl	8005d06 <__retarget_lock_acquire_recursive>
 80059ce:	89a3      	ldrh	r3, [r4, #12]
 80059d0:	0719      	lsls	r1, r3, #28
 80059d2:	d513      	bpl.n	80059fc <_puts_r+0x50>
 80059d4:	6923      	ldr	r3, [r4, #16]
 80059d6:	b18b      	cbz	r3, 80059fc <_puts_r+0x50>
 80059d8:	3e01      	subs	r6, #1
 80059da:	68a3      	ldr	r3, [r4, #8]
 80059dc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80059e0:	3b01      	subs	r3, #1
 80059e2:	60a3      	str	r3, [r4, #8]
 80059e4:	b9e9      	cbnz	r1, 8005a22 <_puts_r+0x76>
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	da2e      	bge.n	8005a48 <_puts_r+0x9c>
 80059ea:	4622      	mov	r2, r4
 80059ec:	210a      	movs	r1, #10
 80059ee:	4628      	mov	r0, r5
 80059f0:	f000 f87b 	bl	8005aea <__swbuf_r>
 80059f4:	3001      	adds	r0, #1
 80059f6:	d007      	beq.n	8005a08 <_puts_r+0x5c>
 80059f8:	250a      	movs	r5, #10
 80059fa:	e007      	b.n	8005a0c <_puts_r+0x60>
 80059fc:	4621      	mov	r1, r4
 80059fe:	4628      	mov	r0, r5
 8005a00:	f000 f8b0 	bl	8005b64 <__swsetup_r>
 8005a04:	2800      	cmp	r0, #0
 8005a06:	d0e7      	beq.n	80059d8 <_puts_r+0x2c>
 8005a08:	f04f 35ff 	mov.w	r5, #4294967295
 8005a0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a0e:	07da      	lsls	r2, r3, #31
 8005a10:	d405      	bmi.n	8005a1e <_puts_r+0x72>
 8005a12:	89a3      	ldrh	r3, [r4, #12]
 8005a14:	059b      	lsls	r3, r3, #22
 8005a16:	d402      	bmi.n	8005a1e <_puts_r+0x72>
 8005a18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a1a:	f000 f975 	bl	8005d08 <__retarget_lock_release_recursive>
 8005a1e:	4628      	mov	r0, r5
 8005a20:	bd70      	pop	{r4, r5, r6, pc}
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	da04      	bge.n	8005a30 <_puts_r+0x84>
 8005a26:	69a2      	ldr	r2, [r4, #24]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	dc06      	bgt.n	8005a3a <_puts_r+0x8e>
 8005a2c:	290a      	cmp	r1, #10
 8005a2e:	d004      	beq.n	8005a3a <_puts_r+0x8e>
 8005a30:	6823      	ldr	r3, [r4, #0]
 8005a32:	1c5a      	adds	r2, r3, #1
 8005a34:	6022      	str	r2, [r4, #0]
 8005a36:	7019      	strb	r1, [r3, #0]
 8005a38:	e7cf      	b.n	80059da <_puts_r+0x2e>
 8005a3a:	4622      	mov	r2, r4
 8005a3c:	4628      	mov	r0, r5
 8005a3e:	f000 f854 	bl	8005aea <__swbuf_r>
 8005a42:	3001      	adds	r0, #1
 8005a44:	d1c9      	bne.n	80059da <_puts_r+0x2e>
 8005a46:	e7df      	b.n	8005a08 <_puts_r+0x5c>
 8005a48:	6823      	ldr	r3, [r4, #0]
 8005a4a:	250a      	movs	r5, #10
 8005a4c:	1c5a      	adds	r2, r3, #1
 8005a4e:	6022      	str	r2, [r4, #0]
 8005a50:	701d      	strb	r5, [r3, #0]
 8005a52:	e7db      	b.n	8005a0c <_puts_r+0x60>

08005a54 <puts>:
 8005a54:	4b02      	ldr	r3, [pc, #8]	; (8005a60 <puts+0xc>)
 8005a56:	4601      	mov	r1, r0
 8005a58:	6818      	ldr	r0, [r3, #0]
 8005a5a:	f7ff bfa7 	b.w	80059ac <_puts_r>
 8005a5e:	bf00      	nop
 8005a60:	20000084 	.word	0x20000084

08005a64 <__sread>:
 8005a64:	b510      	push	{r4, lr}
 8005a66:	460c      	mov	r4, r1
 8005a68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a6c:	f000 f8fc 	bl	8005c68 <_read_r>
 8005a70:	2800      	cmp	r0, #0
 8005a72:	bfab      	itete	ge
 8005a74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005a76:	89a3      	ldrhlt	r3, [r4, #12]
 8005a78:	181b      	addge	r3, r3, r0
 8005a7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005a7e:	bfac      	ite	ge
 8005a80:	6563      	strge	r3, [r4, #84]	; 0x54
 8005a82:	81a3      	strhlt	r3, [r4, #12]
 8005a84:	bd10      	pop	{r4, pc}

08005a86 <__swrite>:
 8005a86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a8a:	461f      	mov	r7, r3
 8005a8c:	898b      	ldrh	r3, [r1, #12]
 8005a8e:	05db      	lsls	r3, r3, #23
 8005a90:	4605      	mov	r5, r0
 8005a92:	460c      	mov	r4, r1
 8005a94:	4616      	mov	r6, r2
 8005a96:	d505      	bpl.n	8005aa4 <__swrite+0x1e>
 8005a98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a9c:	2302      	movs	r3, #2
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f000 f8d0 	bl	8005c44 <_lseek_r>
 8005aa4:	89a3      	ldrh	r3, [r4, #12]
 8005aa6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005aaa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005aae:	81a3      	strh	r3, [r4, #12]
 8005ab0:	4632      	mov	r2, r6
 8005ab2:	463b      	mov	r3, r7
 8005ab4:	4628      	mov	r0, r5
 8005ab6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005aba:	f000 b8e7 	b.w	8005c8c <_write_r>

08005abe <__sseek>:
 8005abe:	b510      	push	{r4, lr}
 8005ac0:	460c      	mov	r4, r1
 8005ac2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ac6:	f000 f8bd 	bl	8005c44 <_lseek_r>
 8005aca:	1c43      	adds	r3, r0, #1
 8005acc:	89a3      	ldrh	r3, [r4, #12]
 8005ace:	bf15      	itete	ne
 8005ad0:	6560      	strne	r0, [r4, #84]	; 0x54
 8005ad2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005ad6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005ada:	81a3      	strheq	r3, [r4, #12]
 8005adc:	bf18      	it	ne
 8005ade:	81a3      	strhne	r3, [r4, #12]
 8005ae0:	bd10      	pop	{r4, pc}

08005ae2 <__sclose>:
 8005ae2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ae6:	f000 b89d 	b.w	8005c24 <_close_r>

08005aea <__swbuf_r>:
 8005aea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aec:	460e      	mov	r6, r1
 8005aee:	4614      	mov	r4, r2
 8005af0:	4605      	mov	r5, r0
 8005af2:	b118      	cbz	r0, 8005afc <__swbuf_r+0x12>
 8005af4:	6a03      	ldr	r3, [r0, #32]
 8005af6:	b90b      	cbnz	r3, 8005afc <__swbuf_r+0x12>
 8005af8:	f7ff ff08 	bl	800590c <__sinit>
 8005afc:	69a3      	ldr	r3, [r4, #24]
 8005afe:	60a3      	str	r3, [r4, #8]
 8005b00:	89a3      	ldrh	r3, [r4, #12]
 8005b02:	071a      	lsls	r2, r3, #28
 8005b04:	d525      	bpl.n	8005b52 <__swbuf_r+0x68>
 8005b06:	6923      	ldr	r3, [r4, #16]
 8005b08:	b31b      	cbz	r3, 8005b52 <__swbuf_r+0x68>
 8005b0a:	6823      	ldr	r3, [r4, #0]
 8005b0c:	6922      	ldr	r2, [r4, #16]
 8005b0e:	1a98      	subs	r0, r3, r2
 8005b10:	6963      	ldr	r3, [r4, #20]
 8005b12:	b2f6      	uxtb	r6, r6
 8005b14:	4283      	cmp	r3, r0
 8005b16:	4637      	mov	r7, r6
 8005b18:	dc04      	bgt.n	8005b24 <__swbuf_r+0x3a>
 8005b1a:	4621      	mov	r1, r4
 8005b1c:	4628      	mov	r0, r5
 8005b1e:	f000 fd47 	bl	80065b0 <_fflush_r>
 8005b22:	b9e0      	cbnz	r0, 8005b5e <__swbuf_r+0x74>
 8005b24:	68a3      	ldr	r3, [r4, #8]
 8005b26:	3b01      	subs	r3, #1
 8005b28:	60a3      	str	r3, [r4, #8]
 8005b2a:	6823      	ldr	r3, [r4, #0]
 8005b2c:	1c5a      	adds	r2, r3, #1
 8005b2e:	6022      	str	r2, [r4, #0]
 8005b30:	701e      	strb	r6, [r3, #0]
 8005b32:	6962      	ldr	r2, [r4, #20]
 8005b34:	1c43      	adds	r3, r0, #1
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d004      	beq.n	8005b44 <__swbuf_r+0x5a>
 8005b3a:	89a3      	ldrh	r3, [r4, #12]
 8005b3c:	07db      	lsls	r3, r3, #31
 8005b3e:	d506      	bpl.n	8005b4e <__swbuf_r+0x64>
 8005b40:	2e0a      	cmp	r6, #10
 8005b42:	d104      	bne.n	8005b4e <__swbuf_r+0x64>
 8005b44:	4621      	mov	r1, r4
 8005b46:	4628      	mov	r0, r5
 8005b48:	f000 fd32 	bl	80065b0 <_fflush_r>
 8005b4c:	b938      	cbnz	r0, 8005b5e <__swbuf_r+0x74>
 8005b4e:	4638      	mov	r0, r7
 8005b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b52:	4621      	mov	r1, r4
 8005b54:	4628      	mov	r0, r5
 8005b56:	f000 f805 	bl	8005b64 <__swsetup_r>
 8005b5a:	2800      	cmp	r0, #0
 8005b5c:	d0d5      	beq.n	8005b0a <__swbuf_r+0x20>
 8005b5e:	f04f 37ff 	mov.w	r7, #4294967295
 8005b62:	e7f4      	b.n	8005b4e <__swbuf_r+0x64>

08005b64 <__swsetup_r>:
 8005b64:	b538      	push	{r3, r4, r5, lr}
 8005b66:	4b2a      	ldr	r3, [pc, #168]	; (8005c10 <__swsetup_r+0xac>)
 8005b68:	4605      	mov	r5, r0
 8005b6a:	6818      	ldr	r0, [r3, #0]
 8005b6c:	460c      	mov	r4, r1
 8005b6e:	b118      	cbz	r0, 8005b78 <__swsetup_r+0x14>
 8005b70:	6a03      	ldr	r3, [r0, #32]
 8005b72:	b90b      	cbnz	r3, 8005b78 <__swsetup_r+0x14>
 8005b74:	f7ff feca 	bl	800590c <__sinit>
 8005b78:	89a3      	ldrh	r3, [r4, #12]
 8005b7a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b7e:	0718      	lsls	r0, r3, #28
 8005b80:	d422      	bmi.n	8005bc8 <__swsetup_r+0x64>
 8005b82:	06d9      	lsls	r1, r3, #27
 8005b84:	d407      	bmi.n	8005b96 <__swsetup_r+0x32>
 8005b86:	2309      	movs	r3, #9
 8005b88:	602b      	str	r3, [r5, #0]
 8005b8a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005b8e:	81a3      	strh	r3, [r4, #12]
 8005b90:	f04f 30ff 	mov.w	r0, #4294967295
 8005b94:	e034      	b.n	8005c00 <__swsetup_r+0x9c>
 8005b96:	0758      	lsls	r0, r3, #29
 8005b98:	d512      	bpl.n	8005bc0 <__swsetup_r+0x5c>
 8005b9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b9c:	b141      	cbz	r1, 8005bb0 <__swsetup_r+0x4c>
 8005b9e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ba2:	4299      	cmp	r1, r3
 8005ba4:	d002      	beq.n	8005bac <__swsetup_r+0x48>
 8005ba6:	4628      	mov	r0, r5
 8005ba8:	f000 f8b0 	bl	8005d0c <_free_r>
 8005bac:	2300      	movs	r3, #0
 8005bae:	6363      	str	r3, [r4, #52]	; 0x34
 8005bb0:	89a3      	ldrh	r3, [r4, #12]
 8005bb2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005bb6:	81a3      	strh	r3, [r4, #12]
 8005bb8:	2300      	movs	r3, #0
 8005bba:	6063      	str	r3, [r4, #4]
 8005bbc:	6923      	ldr	r3, [r4, #16]
 8005bbe:	6023      	str	r3, [r4, #0]
 8005bc0:	89a3      	ldrh	r3, [r4, #12]
 8005bc2:	f043 0308 	orr.w	r3, r3, #8
 8005bc6:	81a3      	strh	r3, [r4, #12]
 8005bc8:	6923      	ldr	r3, [r4, #16]
 8005bca:	b94b      	cbnz	r3, 8005be0 <__swsetup_r+0x7c>
 8005bcc:	89a3      	ldrh	r3, [r4, #12]
 8005bce:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005bd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bd6:	d003      	beq.n	8005be0 <__swsetup_r+0x7c>
 8005bd8:	4621      	mov	r1, r4
 8005bda:	4628      	mov	r0, r5
 8005bdc:	f000 fd36 	bl	800664c <__smakebuf_r>
 8005be0:	89a0      	ldrh	r0, [r4, #12]
 8005be2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005be6:	f010 0301 	ands.w	r3, r0, #1
 8005bea:	d00a      	beq.n	8005c02 <__swsetup_r+0x9e>
 8005bec:	2300      	movs	r3, #0
 8005bee:	60a3      	str	r3, [r4, #8]
 8005bf0:	6963      	ldr	r3, [r4, #20]
 8005bf2:	425b      	negs	r3, r3
 8005bf4:	61a3      	str	r3, [r4, #24]
 8005bf6:	6923      	ldr	r3, [r4, #16]
 8005bf8:	b943      	cbnz	r3, 8005c0c <__swsetup_r+0xa8>
 8005bfa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005bfe:	d1c4      	bne.n	8005b8a <__swsetup_r+0x26>
 8005c00:	bd38      	pop	{r3, r4, r5, pc}
 8005c02:	0781      	lsls	r1, r0, #30
 8005c04:	bf58      	it	pl
 8005c06:	6963      	ldrpl	r3, [r4, #20]
 8005c08:	60a3      	str	r3, [r4, #8]
 8005c0a:	e7f4      	b.n	8005bf6 <__swsetup_r+0x92>
 8005c0c:	2000      	movs	r0, #0
 8005c0e:	e7f7      	b.n	8005c00 <__swsetup_r+0x9c>
 8005c10:	20000084 	.word	0x20000084

08005c14 <memset>:
 8005c14:	4402      	add	r2, r0
 8005c16:	4603      	mov	r3, r0
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d100      	bne.n	8005c1e <memset+0xa>
 8005c1c:	4770      	bx	lr
 8005c1e:	f803 1b01 	strb.w	r1, [r3], #1
 8005c22:	e7f9      	b.n	8005c18 <memset+0x4>

08005c24 <_close_r>:
 8005c24:	b538      	push	{r3, r4, r5, lr}
 8005c26:	4d06      	ldr	r5, [pc, #24]	; (8005c40 <_close_r+0x1c>)
 8005c28:	2300      	movs	r3, #0
 8005c2a:	4604      	mov	r4, r0
 8005c2c:	4608      	mov	r0, r1
 8005c2e:	602b      	str	r3, [r5, #0]
 8005c30:	f7fc fb35 	bl	800229e <_close>
 8005c34:	1c43      	adds	r3, r0, #1
 8005c36:	d102      	bne.n	8005c3e <_close_r+0x1a>
 8005c38:	682b      	ldr	r3, [r5, #0]
 8005c3a:	b103      	cbz	r3, 8005c3e <_close_r+0x1a>
 8005c3c:	6023      	str	r3, [r4, #0]
 8005c3e:	bd38      	pop	{r3, r4, r5, pc}
 8005c40:	2000053c 	.word	0x2000053c

08005c44 <_lseek_r>:
 8005c44:	b538      	push	{r3, r4, r5, lr}
 8005c46:	4d07      	ldr	r5, [pc, #28]	; (8005c64 <_lseek_r+0x20>)
 8005c48:	4604      	mov	r4, r0
 8005c4a:	4608      	mov	r0, r1
 8005c4c:	4611      	mov	r1, r2
 8005c4e:	2200      	movs	r2, #0
 8005c50:	602a      	str	r2, [r5, #0]
 8005c52:	461a      	mov	r2, r3
 8005c54:	f7fc fb4a 	bl	80022ec <_lseek>
 8005c58:	1c43      	adds	r3, r0, #1
 8005c5a:	d102      	bne.n	8005c62 <_lseek_r+0x1e>
 8005c5c:	682b      	ldr	r3, [r5, #0]
 8005c5e:	b103      	cbz	r3, 8005c62 <_lseek_r+0x1e>
 8005c60:	6023      	str	r3, [r4, #0]
 8005c62:	bd38      	pop	{r3, r4, r5, pc}
 8005c64:	2000053c 	.word	0x2000053c

08005c68 <_read_r>:
 8005c68:	b538      	push	{r3, r4, r5, lr}
 8005c6a:	4d07      	ldr	r5, [pc, #28]	; (8005c88 <_read_r+0x20>)
 8005c6c:	4604      	mov	r4, r0
 8005c6e:	4608      	mov	r0, r1
 8005c70:	4611      	mov	r1, r2
 8005c72:	2200      	movs	r2, #0
 8005c74:	602a      	str	r2, [r5, #0]
 8005c76:	461a      	mov	r2, r3
 8005c78:	f7fc fad8 	bl	800222c <_read>
 8005c7c:	1c43      	adds	r3, r0, #1
 8005c7e:	d102      	bne.n	8005c86 <_read_r+0x1e>
 8005c80:	682b      	ldr	r3, [r5, #0]
 8005c82:	b103      	cbz	r3, 8005c86 <_read_r+0x1e>
 8005c84:	6023      	str	r3, [r4, #0]
 8005c86:	bd38      	pop	{r3, r4, r5, pc}
 8005c88:	2000053c 	.word	0x2000053c

08005c8c <_write_r>:
 8005c8c:	b538      	push	{r3, r4, r5, lr}
 8005c8e:	4d07      	ldr	r5, [pc, #28]	; (8005cac <_write_r+0x20>)
 8005c90:	4604      	mov	r4, r0
 8005c92:	4608      	mov	r0, r1
 8005c94:	4611      	mov	r1, r2
 8005c96:	2200      	movs	r2, #0
 8005c98:	602a      	str	r2, [r5, #0]
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	f7fc fae3 	bl	8002266 <_write>
 8005ca0:	1c43      	adds	r3, r0, #1
 8005ca2:	d102      	bne.n	8005caa <_write_r+0x1e>
 8005ca4:	682b      	ldr	r3, [r5, #0]
 8005ca6:	b103      	cbz	r3, 8005caa <_write_r+0x1e>
 8005ca8:	6023      	str	r3, [r4, #0]
 8005caa:	bd38      	pop	{r3, r4, r5, pc}
 8005cac:	2000053c 	.word	0x2000053c

08005cb0 <__errno>:
 8005cb0:	4b01      	ldr	r3, [pc, #4]	; (8005cb8 <__errno+0x8>)
 8005cb2:	6818      	ldr	r0, [r3, #0]
 8005cb4:	4770      	bx	lr
 8005cb6:	bf00      	nop
 8005cb8:	20000084 	.word	0x20000084

08005cbc <__libc_init_array>:
 8005cbc:	b570      	push	{r4, r5, r6, lr}
 8005cbe:	4d0d      	ldr	r5, [pc, #52]	; (8005cf4 <__libc_init_array+0x38>)
 8005cc0:	4c0d      	ldr	r4, [pc, #52]	; (8005cf8 <__libc_init_array+0x3c>)
 8005cc2:	1b64      	subs	r4, r4, r5
 8005cc4:	10a4      	asrs	r4, r4, #2
 8005cc6:	2600      	movs	r6, #0
 8005cc8:	42a6      	cmp	r6, r4
 8005cca:	d109      	bne.n	8005ce0 <__libc_init_array+0x24>
 8005ccc:	4d0b      	ldr	r5, [pc, #44]	; (8005cfc <__libc_init_array+0x40>)
 8005cce:	4c0c      	ldr	r4, [pc, #48]	; (8005d00 <__libc_init_array+0x44>)
 8005cd0:	f000 fd5e 	bl	8006790 <_init>
 8005cd4:	1b64      	subs	r4, r4, r5
 8005cd6:	10a4      	asrs	r4, r4, #2
 8005cd8:	2600      	movs	r6, #0
 8005cda:	42a6      	cmp	r6, r4
 8005cdc:	d105      	bne.n	8005cea <__libc_init_array+0x2e>
 8005cde:	bd70      	pop	{r4, r5, r6, pc}
 8005ce0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ce4:	4798      	blx	r3
 8005ce6:	3601      	adds	r6, #1
 8005ce8:	e7ee      	b.n	8005cc8 <__libc_init_array+0xc>
 8005cea:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cee:	4798      	blx	r3
 8005cf0:	3601      	adds	r6, #1
 8005cf2:	e7f2      	b.n	8005cda <__libc_init_array+0x1e>
 8005cf4:	080069f0 	.word	0x080069f0
 8005cf8:	080069f0 	.word	0x080069f0
 8005cfc:	080069f0 	.word	0x080069f0
 8005d00:	080069f4 	.word	0x080069f4

08005d04 <__retarget_lock_init_recursive>:
 8005d04:	4770      	bx	lr

08005d06 <__retarget_lock_acquire_recursive>:
 8005d06:	4770      	bx	lr

08005d08 <__retarget_lock_release_recursive>:
 8005d08:	4770      	bx	lr
	...

08005d0c <_free_r>:
 8005d0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d0e:	2900      	cmp	r1, #0
 8005d10:	d044      	beq.n	8005d9c <_free_r+0x90>
 8005d12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d16:	9001      	str	r0, [sp, #4]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	f1a1 0404 	sub.w	r4, r1, #4
 8005d1e:	bfb8      	it	lt
 8005d20:	18e4      	addlt	r4, r4, r3
 8005d22:	f000 f8df 	bl	8005ee4 <__malloc_lock>
 8005d26:	4a1e      	ldr	r2, [pc, #120]	; (8005da0 <_free_r+0x94>)
 8005d28:	9801      	ldr	r0, [sp, #4]
 8005d2a:	6813      	ldr	r3, [r2, #0]
 8005d2c:	b933      	cbnz	r3, 8005d3c <_free_r+0x30>
 8005d2e:	6063      	str	r3, [r4, #4]
 8005d30:	6014      	str	r4, [r2, #0]
 8005d32:	b003      	add	sp, #12
 8005d34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d38:	f000 b8da 	b.w	8005ef0 <__malloc_unlock>
 8005d3c:	42a3      	cmp	r3, r4
 8005d3e:	d908      	bls.n	8005d52 <_free_r+0x46>
 8005d40:	6825      	ldr	r5, [r4, #0]
 8005d42:	1961      	adds	r1, r4, r5
 8005d44:	428b      	cmp	r3, r1
 8005d46:	bf01      	itttt	eq
 8005d48:	6819      	ldreq	r1, [r3, #0]
 8005d4a:	685b      	ldreq	r3, [r3, #4]
 8005d4c:	1949      	addeq	r1, r1, r5
 8005d4e:	6021      	streq	r1, [r4, #0]
 8005d50:	e7ed      	b.n	8005d2e <_free_r+0x22>
 8005d52:	461a      	mov	r2, r3
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	b10b      	cbz	r3, 8005d5c <_free_r+0x50>
 8005d58:	42a3      	cmp	r3, r4
 8005d5a:	d9fa      	bls.n	8005d52 <_free_r+0x46>
 8005d5c:	6811      	ldr	r1, [r2, #0]
 8005d5e:	1855      	adds	r5, r2, r1
 8005d60:	42a5      	cmp	r5, r4
 8005d62:	d10b      	bne.n	8005d7c <_free_r+0x70>
 8005d64:	6824      	ldr	r4, [r4, #0]
 8005d66:	4421      	add	r1, r4
 8005d68:	1854      	adds	r4, r2, r1
 8005d6a:	42a3      	cmp	r3, r4
 8005d6c:	6011      	str	r1, [r2, #0]
 8005d6e:	d1e0      	bne.n	8005d32 <_free_r+0x26>
 8005d70:	681c      	ldr	r4, [r3, #0]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	6053      	str	r3, [r2, #4]
 8005d76:	440c      	add	r4, r1
 8005d78:	6014      	str	r4, [r2, #0]
 8005d7a:	e7da      	b.n	8005d32 <_free_r+0x26>
 8005d7c:	d902      	bls.n	8005d84 <_free_r+0x78>
 8005d7e:	230c      	movs	r3, #12
 8005d80:	6003      	str	r3, [r0, #0]
 8005d82:	e7d6      	b.n	8005d32 <_free_r+0x26>
 8005d84:	6825      	ldr	r5, [r4, #0]
 8005d86:	1961      	adds	r1, r4, r5
 8005d88:	428b      	cmp	r3, r1
 8005d8a:	bf04      	itt	eq
 8005d8c:	6819      	ldreq	r1, [r3, #0]
 8005d8e:	685b      	ldreq	r3, [r3, #4]
 8005d90:	6063      	str	r3, [r4, #4]
 8005d92:	bf04      	itt	eq
 8005d94:	1949      	addeq	r1, r1, r5
 8005d96:	6021      	streq	r1, [r4, #0]
 8005d98:	6054      	str	r4, [r2, #4]
 8005d9a:	e7ca      	b.n	8005d32 <_free_r+0x26>
 8005d9c:	b003      	add	sp, #12
 8005d9e:	bd30      	pop	{r4, r5, pc}
 8005da0:	20000544 	.word	0x20000544

08005da4 <sbrk_aligned>:
 8005da4:	b570      	push	{r4, r5, r6, lr}
 8005da6:	4e0e      	ldr	r6, [pc, #56]	; (8005de0 <sbrk_aligned+0x3c>)
 8005da8:	460c      	mov	r4, r1
 8005daa:	6831      	ldr	r1, [r6, #0]
 8005dac:	4605      	mov	r5, r0
 8005dae:	b911      	cbnz	r1, 8005db6 <sbrk_aligned+0x12>
 8005db0:	f000 fcde 	bl	8006770 <_sbrk_r>
 8005db4:	6030      	str	r0, [r6, #0]
 8005db6:	4621      	mov	r1, r4
 8005db8:	4628      	mov	r0, r5
 8005dba:	f000 fcd9 	bl	8006770 <_sbrk_r>
 8005dbe:	1c43      	adds	r3, r0, #1
 8005dc0:	d00a      	beq.n	8005dd8 <sbrk_aligned+0x34>
 8005dc2:	1cc4      	adds	r4, r0, #3
 8005dc4:	f024 0403 	bic.w	r4, r4, #3
 8005dc8:	42a0      	cmp	r0, r4
 8005dca:	d007      	beq.n	8005ddc <sbrk_aligned+0x38>
 8005dcc:	1a21      	subs	r1, r4, r0
 8005dce:	4628      	mov	r0, r5
 8005dd0:	f000 fcce 	bl	8006770 <_sbrk_r>
 8005dd4:	3001      	adds	r0, #1
 8005dd6:	d101      	bne.n	8005ddc <sbrk_aligned+0x38>
 8005dd8:	f04f 34ff 	mov.w	r4, #4294967295
 8005ddc:	4620      	mov	r0, r4
 8005dde:	bd70      	pop	{r4, r5, r6, pc}
 8005de0:	20000548 	.word	0x20000548

08005de4 <_malloc_r>:
 8005de4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005de8:	1ccd      	adds	r5, r1, #3
 8005dea:	f025 0503 	bic.w	r5, r5, #3
 8005dee:	3508      	adds	r5, #8
 8005df0:	2d0c      	cmp	r5, #12
 8005df2:	bf38      	it	cc
 8005df4:	250c      	movcc	r5, #12
 8005df6:	2d00      	cmp	r5, #0
 8005df8:	4607      	mov	r7, r0
 8005dfa:	db01      	blt.n	8005e00 <_malloc_r+0x1c>
 8005dfc:	42a9      	cmp	r1, r5
 8005dfe:	d905      	bls.n	8005e0c <_malloc_r+0x28>
 8005e00:	230c      	movs	r3, #12
 8005e02:	603b      	str	r3, [r7, #0]
 8005e04:	2600      	movs	r6, #0
 8005e06:	4630      	mov	r0, r6
 8005e08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e0c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005ee0 <_malloc_r+0xfc>
 8005e10:	f000 f868 	bl	8005ee4 <__malloc_lock>
 8005e14:	f8d8 3000 	ldr.w	r3, [r8]
 8005e18:	461c      	mov	r4, r3
 8005e1a:	bb5c      	cbnz	r4, 8005e74 <_malloc_r+0x90>
 8005e1c:	4629      	mov	r1, r5
 8005e1e:	4638      	mov	r0, r7
 8005e20:	f7ff ffc0 	bl	8005da4 <sbrk_aligned>
 8005e24:	1c43      	adds	r3, r0, #1
 8005e26:	4604      	mov	r4, r0
 8005e28:	d155      	bne.n	8005ed6 <_malloc_r+0xf2>
 8005e2a:	f8d8 4000 	ldr.w	r4, [r8]
 8005e2e:	4626      	mov	r6, r4
 8005e30:	2e00      	cmp	r6, #0
 8005e32:	d145      	bne.n	8005ec0 <_malloc_r+0xdc>
 8005e34:	2c00      	cmp	r4, #0
 8005e36:	d048      	beq.n	8005eca <_malloc_r+0xe6>
 8005e38:	6823      	ldr	r3, [r4, #0]
 8005e3a:	4631      	mov	r1, r6
 8005e3c:	4638      	mov	r0, r7
 8005e3e:	eb04 0903 	add.w	r9, r4, r3
 8005e42:	f000 fc95 	bl	8006770 <_sbrk_r>
 8005e46:	4581      	cmp	r9, r0
 8005e48:	d13f      	bne.n	8005eca <_malloc_r+0xe6>
 8005e4a:	6821      	ldr	r1, [r4, #0]
 8005e4c:	1a6d      	subs	r5, r5, r1
 8005e4e:	4629      	mov	r1, r5
 8005e50:	4638      	mov	r0, r7
 8005e52:	f7ff ffa7 	bl	8005da4 <sbrk_aligned>
 8005e56:	3001      	adds	r0, #1
 8005e58:	d037      	beq.n	8005eca <_malloc_r+0xe6>
 8005e5a:	6823      	ldr	r3, [r4, #0]
 8005e5c:	442b      	add	r3, r5
 8005e5e:	6023      	str	r3, [r4, #0]
 8005e60:	f8d8 3000 	ldr.w	r3, [r8]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d038      	beq.n	8005eda <_malloc_r+0xf6>
 8005e68:	685a      	ldr	r2, [r3, #4]
 8005e6a:	42a2      	cmp	r2, r4
 8005e6c:	d12b      	bne.n	8005ec6 <_malloc_r+0xe2>
 8005e6e:	2200      	movs	r2, #0
 8005e70:	605a      	str	r2, [r3, #4]
 8005e72:	e00f      	b.n	8005e94 <_malloc_r+0xb0>
 8005e74:	6822      	ldr	r2, [r4, #0]
 8005e76:	1b52      	subs	r2, r2, r5
 8005e78:	d41f      	bmi.n	8005eba <_malloc_r+0xd6>
 8005e7a:	2a0b      	cmp	r2, #11
 8005e7c:	d917      	bls.n	8005eae <_malloc_r+0xca>
 8005e7e:	1961      	adds	r1, r4, r5
 8005e80:	42a3      	cmp	r3, r4
 8005e82:	6025      	str	r5, [r4, #0]
 8005e84:	bf18      	it	ne
 8005e86:	6059      	strne	r1, [r3, #4]
 8005e88:	6863      	ldr	r3, [r4, #4]
 8005e8a:	bf08      	it	eq
 8005e8c:	f8c8 1000 	streq.w	r1, [r8]
 8005e90:	5162      	str	r2, [r4, r5]
 8005e92:	604b      	str	r3, [r1, #4]
 8005e94:	4638      	mov	r0, r7
 8005e96:	f104 060b 	add.w	r6, r4, #11
 8005e9a:	f000 f829 	bl	8005ef0 <__malloc_unlock>
 8005e9e:	f026 0607 	bic.w	r6, r6, #7
 8005ea2:	1d23      	adds	r3, r4, #4
 8005ea4:	1af2      	subs	r2, r6, r3
 8005ea6:	d0ae      	beq.n	8005e06 <_malloc_r+0x22>
 8005ea8:	1b9b      	subs	r3, r3, r6
 8005eaa:	50a3      	str	r3, [r4, r2]
 8005eac:	e7ab      	b.n	8005e06 <_malloc_r+0x22>
 8005eae:	42a3      	cmp	r3, r4
 8005eb0:	6862      	ldr	r2, [r4, #4]
 8005eb2:	d1dd      	bne.n	8005e70 <_malloc_r+0x8c>
 8005eb4:	f8c8 2000 	str.w	r2, [r8]
 8005eb8:	e7ec      	b.n	8005e94 <_malloc_r+0xb0>
 8005eba:	4623      	mov	r3, r4
 8005ebc:	6864      	ldr	r4, [r4, #4]
 8005ebe:	e7ac      	b.n	8005e1a <_malloc_r+0x36>
 8005ec0:	4634      	mov	r4, r6
 8005ec2:	6876      	ldr	r6, [r6, #4]
 8005ec4:	e7b4      	b.n	8005e30 <_malloc_r+0x4c>
 8005ec6:	4613      	mov	r3, r2
 8005ec8:	e7cc      	b.n	8005e64 <_malloc_r+0x80>
 8005eca:	230c      	movs	r3, #12
 8005ecc:	603b      	str	r3, [r7, #0]
 8005ece:	4638      	mov	r0, r7
 8005ed0:	f000 f80e 	bl	8005ef0 <__malloc_unlock>
 8005ed4:	e797      	b.n	8005e06 <_malloc_r+0x22>
 8005ed6:	6025      	str	r5, [r4, #0]
 8005ed8:	e7dc      	b.n	8005e94 <_malloc_r+0xb0>
 8005eda:	605b      	str	r3, [r3, #4]
 8005edc:	deff      	udf	#255	; 0xff
 8005ede:	bf00      	nop
 8005ee0:	20000544 	.word	0x20000544

08005ee4 <__malloc_lock>:
 8005ee4:	4801      	ldr	r0, [pc, #4]	; (8005eec <__malloc_lock+0x8>)
 8005ee6:	f7ff bf0e 	b.w	8005d06 <__retarget_lock_acquire_recursive>
 8005eea:	bf00      	nop
 8005eec:	20000540 	.word	0x20000540

08005ef0 <__malloc_unlock>:
 8005ef0:	4801      	ldr	r0, [pc, #4]	; (8005ef8 <__malloc_unlock+0x8>)
 8005ef2:	f7ff bf09 	b.w	8005d08 <__retarget_lock_release_recursive>
 8005ef6:	bf00      	nop
 8005ef8:	20000540 	.word	0x20000540

08005efc <__sfputc_r>:
 8005efc:	6893      	ldr	r3, [r2, #8]
 8005efe:	3b01      	subs	r3, #1
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	b410      	push	{r4}
 8005f04:	6093      	str	r3, [r2, #8]
 8005f06:	da08      	bge.n	8005f1a <__sfputc_r+0x1e>
 8005f08:	6994      	ldr	r4, [r2, #24]
 8005f0a:	42a3      	cmp	r3, r4
 8005f0c:	db01      	blt.n	8005f12 <__sfputc_r+0x16>
 8005f0e:	290a      	cmp	r1, #10
 8005f10:	d103      	bne.n	8005f1a <__sfputc_r+0x1e>
 8005f12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f16:	f7ff bde8 	b.w	8005aea <__swbuf_r>
 8005f1a:	6813      	ldr	r3, [r2, #0]
 8005f1c:	1c58      	adds	r0, r3, #1
 8005f1e:	6010      	str	r0, [r2, #0]
 8005f20:	7019      	strb	r1, [r3, #0]
 8005f22:	4608      	mov	r0, r1
 8005f24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f28:	4770      	bx	lr

08005f2a <__sfputs_r>:
 8005f2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f2c:	4606      	mov	r6, r0
 8005f2e:	460f      	mov	r7, r1
 8005f30:	4614      	mov	r4, r2
 8005f32:	18d5      	adds	r5, r2, r3
 8005f34:	42ac      	cmp	r4, r5
 8005f36:	d101      	bne.n	8005f3c <__sfputs_r+0x12>
 8005f38:	2000      	movs	r0, #0
 8005f3a:	e007      	b.n	8005f4c <__sfputs_r+0x22>
 8005f3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f40:	463a      	mov	r2, r7
 8005f42:	4630      	mov	r0, r6
 8005f44:	f7ff ffda 	bl	8005efc <__sfputc_r>
 8005f48:	1c43      	adds	r3, r0, #1
 8005f4a:	d1f3      	bne.n	8005f34 <__sfputs_r+0xa>
 8005f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005f50 <_vfiprintf_r>:
 8005f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f54:	460d      	mov	r5, r1
 8005f56:	b09d      	sub	sp, #116	; 0x74
 8005f58:	4614      	mov	r4, r2
 8005f5a:	4698      	mov	r8, r3
 8005f5c:	4606      	mov	r6, r0
 8005f5e:	b118      	cbz	r0, 8005f68 <_vfiprintf_r+0x18>
 8005f60:	6a03      	ldr	r3, [r0, #32]
 8005f62:	b90b      	cbnz	r3, 8005f68 <_vfiprintf_r+0x18>
 8005f64:	f7ff fcd2 	bl	800590c <__sinit>
 8005f68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f6a:	07d9      	lsls	r1, r3, #31
 8005f6c:	d405      	bmi.n	8005f7a <_vfiprintf_r+0x2a>
 8005f6e:	89ab      	ldrh	r3, [r5, #12]
 8005f70:	059a      	lsls	r2, r3, #22
 8005f72:	d402      	bmi.n	8005f7a <_vfiprintf_r+0x2a>
 8005f74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f76:	f7ff fec6 	bl	8005d06 <__retarget_lock_acquire_recursive>
 8005f7a:	89ab      	ldrh	r3, [r5, #12]
 8005f7c:	071b      	lsls	r3, r3, #28
 8005f7e:	d501      	bpl.n	8005f84 <_vfiprintf_r+0x34>
 8005f80:	692b      	ldr	r3, [r5, #16]
 8005f82:	b99b      	cbnz	r3, 8005fac <_vfiprintf_r+0x5c>
 8005f84:	4629      	mov	r1, r5
 8005f86:	4630      	mov	r0, r6
 8005f88:	f7ff fdec 	bl	8005b64 <__swsetup_r>
 8005f8c:	b170      	cbz	r0, 8005fac <_vfiprintf_r+0x5c>
 8005f8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f90:	07dc      	lsls	r4, r3, #31
 8005f92:	d504      	bpl.n	8005f9e <_vfiprintf_r+0x4e>
 8005f94:	f04f 30ff 	mov.w	r0, #4294967295
 8005f98:	b01d      	add	sp, #116	; 0x74
 8005f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f9e:	89ab      	ldrh	r3, [r5, #12]
 8005fa0:	0598      	lsls	r0, r3, #22
 8005fa2:	d4f7      	bmi.n	8005f94 <_vfiprintf_r+0x44>
 8005fa4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005fa6:	f7ff feaf 	bl	8005d08 <__retarget_lock_release_recursive>
 8005faa:	e7f3      	b.n	8005f94 <_vfiprintf_r+0x44>
 8005fac:	2300      	movs	r3, #0
 8005fae:	9309      	str	r3, [sp, #36]	; 0x24
 8005fb0:	2320      	movs	r3, #32
 8005fb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005fb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8005fba:	2330      	movs	r3, #48	; 0x30
 8005fbc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006170 <_vfiprintf_r+0x220>
 8005fc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005fc4:	f04f 0901 	mov.w	r9, #1
 8005fc8:	4623      	mov	r3, r4
 8005fca:	469a      	mov	sl, r3
 8005fcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005fd0:	b10a      	cbz	r2, 8005fd6 <_vfiprintf_r+0x86>
 8005fd2:	2a25      	cmp	r2, #37	; 0x25
 8005fd4:	d1f9      	bne.n	8005fca <_vfiprintf_r+0x7a>
 8005fd6:	ebba 0b04 	subs.w	fp, sl, r4
 8005fda:	d00b      	beq.n	8005ff4 <_vfiprintf_r+0xa4>
 8005fdc:	465b      	mov	r3, fp
 8005fde:	4622      	mov	r2, r4
 8005fe0:	4629      	mov	r1, r5
 8005fe2:	4630      	mov	r0, r6
 8005fe4:	f7ff ffa1 	bl	8005f2a <__sfputs_r>
 8005fe8:	3001      	adds	r0, #1
 8005fea:	f000 80a9 	beq.w	8006140 <_vfiprintf_r+0x1f0>
 8005fee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ff0:	445a      	add	r2, fp
 8005ff2:	9209      	str	r2, [sp, #36]	; 0x24
 8005ff4:	f89a 3000 	ldrb.w	r3, [sl]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f000 80a1 	beq.w	8006140 <_vfiprintf_r+0x1f0>
 8005ffe:	2300      	movs	r3, #0
 8006000:	f04f 32ff 	mov.w	r2, #4294967295
 8006004:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006008:	f10a 0a01 	add.w	sl, sl, #1
 800600c:	9304      	str	r3, [sp, #16]
 800600e:	9307      	str	r3, [sp, #28]
 8006010:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006014:	931a      	str	r3, [sp, #104]	; 0x68
 8006016:	4654      	mov	r4, sl
 8006018:	2205      	movs	r2, #5
 800601a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800601e:	4854      	ldr	r0, [pc, #336]	; (8006170 <_vfiprintf_r+0x220>)
 8006020:	f7fa f8de 	bl	80001e0 <memchr>
 8006024:	9a04      	ldr	r2, [sp, #16]
 8006026:	b9d8      	cbnz	r0, 8006060 <_vfiprintf_r+0x110>
 8006028:	06d1      	lsls	r1, r2, #27
 800602a:	bf44      	itt	mi
 800602c:	2320      	movmi	r3, #32
 800602e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006032:	0713      	lsls	r3, r2, #28
 8006034:	bf44      	itt	mi
 8006036:	232b      	movmi	r3, #43	; 0x2b
 8006038:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800603c:	f89a 3000 	ldrb.w	r3, [sl]
 8006040:	2b2a      	cmp	r3, #42	; 0x2a
 8006042:	d015      	beq.n	8006070 <_vfiprintf_r+0x120>
 8006044:	9a07      	ldr	r2, [sp, #28]
 8006046:	4654      	mov	r4, sl
 8006048:	2000      	movs	r0, #0
 800604a:	f04f 0c0a 	mov.w	ip, #10
 800604e:	4621      	mov	r1, r4
 8006050:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006054:	3b30      	subs	r3, #48	; 0x30
 8006056:	2b09      	cmp	r3, #9
 8006058:	d94d      	bls.n	80060f6 <_vfiprintf_r+0x1a6>
 800605a:	b1b0      	cbz	r0, 800608a <_vfiprintf_r+0x13a>
 800605c:	9207      	str	r2, [sp, #28]
 800605e:	e014      	b.n	800608a <_vfiprintf_r+0x13a>
 8006060:	eba0 0308 	sub.w	r3, r0, r8
 8006064:	fa09 f303 	lsl.w	r3, r9, r3
 8006068:	4313      	orrs	r3, r2
 800606a:	9304      	str	r3, [sp, #16]
 800606c:	46a2      	mov	sl, r4
 800606e:	e7d2      	b.n	8006016 <_vfiprintf_r+0xc6>
 8006070:	9b03      	ldr	r3, [sp, #12]
 8006072:	1d19      	adds	r1, r3, #4
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	9103      	str	r1, [sp, #12]
 8006078:	2b00      	cmp	r3, #0
 800607a:	bfbb      	ittet	lt
 800607c:	425b      	neglt	r3, r3
 800607e:	f042 0202 	orrlt.w	r2, r2, #2
 8006082:	9307      	strge	r3, [sp, #28]
 8006084:	9307      	strlt	r3, [sp, #28]
 8006086:	bfb8      	it	lt
 8006088:	9204      	strlt	r2, [sp, #16]
 800608a:	7823      	ldrb	r3, [r4, #0]
 800608c:	2b2e      	cmp	r3, #46	; 0x2e
 800608e:	d10c      	bne.n	80060aa <_vfiprintf_r+0x15a>
 8006090:	7863      	ldrb	r3, [r4, #1]
 8006092:	2b2a      	cmp	r3, #42	; 0x2a
 8006094:	d134      	bne.n	8006100 <_vfiprintf_r+0x1b0>
 8006096:	9b03      	ldr	r3, [sp, #12]
 8006098:	1d1a      	adds	r2, r3, #4
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	9203      	str	r2, [sp, #12]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	bfb8      	it	lt
 80060a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80060a6:	3402      	adds	r4, #2
 80060a8:	9305      	str	r3, [sp, #20]
 80060aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006180 <_vfiprintf_r+0x230>
 80060ae:	7821      	ldrb	r1, [r4, #0]
 80060b0:	2203      	movs	r2, #3
 80060b2:	4650      	mov	r0, sl
 80060b4:	f7fa f894 	bl	80001e0 <memchr>
 80060b8:	b138      	cbz	r0, 80060ca <_vfiprintf_r+0x17a>
 80060ba:	9b04      	ldr	r3, [sp, #16]
 80060bc:	eba0 000a 	sub.w	r0, r0, sl
 80060c0:	2240      	movs	r2, #64	; 0x40
 80060c2:	4082      	lsls	r2, r0
 80060c4:	4313      	orrs	r3, r2
 80060c6:	3401      	adds	r4, #1
 80060c8:	9304      	str	r3, [sp, #16]
 80060ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060ce:	4829      	ldr	r0, [pc, #164]	; (8006174 <_vfiprintf_r+0x224>)
 80060d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80060d4:	2206      	movs	r2, #6
 80060d6:	f7fa f883 	bl	80001e0 <memchr>
 80060da:	2800      	cmp	r0, #0
 80060dc:	d03f      	beq.n	800615e <_vfiprintf_r+0x20e>
 80060de:	4b26      	ldr	r3, [pc, #152]	; (8006178 <_vfiprintf_r+0x228>)
 80060e0:	bb1b      	cbnz	r3, 800612a <_vfiprintf_r+0x1da>
 80060e2:	9b03      	ldr	r3, [sp, #12]
 80060e4:	3307      	adds	r3, #7
 80060e6:	f023 0307 	bic.w	r3, r3, #7
 80060ea:	3308      	adds	r3, #8
 80060ec:	9303      	str	r3, [sp, #12]
 80060ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060f0:	443b      	add	r3, r7
 80060f2:	9309      	str	r3, [sp, #36]	; 0x24
 80060f4:	e768      	b.n	8005fc8 <_vfiprintf_r+0x78>
 80060f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80060fa:	460c      	mov	r4, r1
 80060fc:	2001      	movs	r0, #1
 80060fe:	e7a6      	b.n	800604e <_vfiprintf_r+0xfe>
 8006100:	2300      	movs	r3, #0
 8006102:	3401      	adds	r4, #1
 8006104:	9305      	str	r3, [sp, #20]
 8006106:	4619      	mov	r1, r3
 8006108:	f04f 0c0a 	mov.w	ip, #10
 800610c:	4620      	mov	r0, r4
 800610e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006112:	3a30      	subs	r2, #48	; 0x30
 8006114:	2a09      	cmp	r2, #9
 8006116:	d903      	bls.n	8006120 <_vfiprintf_r+0x1d0>
 8006118:	2b00      	cmp	r3, #0
 800611a:	d0c6      	beq.n	80060aa <_vfiprintf_r+0x15a>
 800611c:	9105      	str	r1, [sp, #20]
 800611e:	e7c4      	b.n	80060aa <_vfiprintf_r+0x15a>
 8006120:	fb0c 2101 	mla	r1, ip, r1, r2
 8006124:	4604      	mov	r4, r0
 8006126:	2301      	movs	r3, #1
 8006128:	e7f0      	b.n	800610c <_vfiprintf_r+0x1bc>
 800612a:	ab03      	add	r3, sp, #12
 800612c:	9300      	str	r3, [sp, #0]
 800612e:	462a      	mov	r2, r5
 8006130:	4b12      	ldr	r3, [pc, #72]	; (800617c <_vfiprintf_r+0x22c>)
 8006132:	a904      	add	r1, sp, #16
 8006134:	4630      	mov	r0, r6
 8006136:	f3af 8000 	nop.w
 800613a:	4607      	mov	r7, r0
 800613c:	1c78      	adds	r0, r7, #1
 800613e:	d1d6      	bne.n	80060ee <_vfiprintf_r+0x19e>
 8006140:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006142:	07d9      	lsls	r1, r3, #31
 8006144:	d405      	bmi.n	8006152 <_vfiprintf_r+0x202>
 8006146:	89ab      	ldrh	r3, [r5, #12]
 8006148:	059a      	lsls	r2, r3, #22
 800614a:	d402      	bmi.n	8006152 <_vfiprintf_r+0x202>
 800614c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800614e:	f7ff fddb 	bl	8005d08 <__retarget_lock_release_recursive>
 8006152:	89ab      	ldrh	r3, [r5, #12]
 8006154:	065b      	lsls	r3, r3, #25
 8006156:	f53f af1d 	bmi.w	8005f94 <_vfiprintf_r+0x44>
 800615a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800615c:	e71c      	b.n	8005f98 <_vfiprintf_r+0x48>
 800615e:	ab03      	add	r3, sp, #12
 8006160:	9300      	str	r3, [sp, #0]
 8006162:	462a      	mov	r2, r5
 8006164:	4b05      	ldr	r3, [pc, #20]	; (800617c <_vfiprintf_r+0x22c>)
 8006166:	a904      	add	r1, sp, #16
 8006168:	4630      	mov	r0, r6
 800616a:	f000 f879 	bl	8006260 <_printf_i>
 800616e:	e7e4      	b.n	800613a <_vfiprintf_r+0x1ea>
 8006170:	080069b5 	.word	0x080069b5
 8006174:	080069bf 	.word	0x080069bf
 8006178:	00000000 	.word	0x00000000
 800617c:	08005f2b 	.word	0x08005f2b
 8006180:	080069bb 	.word	0x080069bb

08006184 <_printf_common>:
 8006184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006188:	4616      	mov	r6, r2
 800618a:	4699      	mov	r9, r3
 800618c:	688a      	ldr	r2, [r1, #8]
 800618e:	690b      	ldr	r3, [r1, #16]
 8006190:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006194:	4293      	cmp	r3, r2
 8006196:	bfb8      	it	lt
 8006198:	4613      	movlt	r3, r2
 800619a:	6033      	str	r3, [r6, #0]
 800619c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80061a0:	4607      	mov	r7, r0
 80061a2:	460c      	mov	r4, r1
 80061a4:	b10a      	cbz	r2, 80061aa <_printf_common+0x26>
 80061a6:	3301      	adds	r3, #1
 80061a8:	6033      	str	r3, [r6, #0]
 80061aa:	6823      	ldr	r3, [r4, #0]
 80061ac:	0699      	lsls	r1, r3, #26
 80061ae:	bf42      	ittt	mi
 80061b0:	6833      	ldrmi	r3, [r6, #0]
 80061b2:	3302      	addmi	r3, #2
 80061b4:	6033      	strmi	r3, [r6, #0]
 80061b6:	6825      	ldr	r5, [r4, #0]
 80061b8:	f015 0506 	ands.w	r5, r5, #6
 80061bc:	d106      	bne.n	80061cc <_printf_common+0x48>
 80061be:	f104 0a19 	add.w	sl, r4, #25
 80061c2:	68e3      	ldr	r3, [r4, #12]
 80061c4:	6832      	ldr	r2, [r6, #0]
 80061c6:	1a9b      	subs	r3, r3, r2
 80061c8:	42ab      	cmp	r3, r5
 80061ca:	dc26      	bgt.n	800621a <_printf_common+0x96>
 80061cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80061d0:	1e13      	subs	r3, r2, #0
 80061d2:	6822      	ldr	r2, [r4, #0]
 80061d4:	bf18      	it	ne
 80061d6:	2301      	movne	r3, #1
 80061d8:	0692      	lsls	r2, r2, #26
 80061da:	d42b      	bmi.n	8006234 <_printf_common+0xb0>
 80061dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80061e0:	4649      	mov	r1, r9
 80061e2:	4638      	mov	r0, r7
 80061e4:	47c0      	blx	r8
 80061e6:	3001      	adds	r0, #1
 80061e8:	d01e      	beq.n	8006228 <_printf_common+0xa4>
 80061ea:	6823      	ldr	r3, [r4, #0]
 80061ec:	6922      	ldr	r2, [r4, #16]
 80061ee:	f003 0306 	and.w	r3, r3, #6
 80061f2:	2b04      	cmp	r3, #4
 80061f4:	bf02      	ittt	eq
 80061f6:	68e5      	ldreq	r5, [r4, #12]
 80061f8:	6833      	ldreq	r3, [r6, #0]
 80061fa:	1aed      	subeq	r5, r5, r3
 80061fc:	68a3      	ldr	r3, [r4, #8]
 80061fe:	bf0c      	ite	eq
 8006200:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006204:	2500      	movne	r5, #0
 8006206:	4293      	cmp	r3, r2
 8006208:	bfc4      	itt	gt
 800620a:	1a9b      	subgt	r3, r3, r2
 800620c:	18ed      	addgt	r5, r5, r3
 800620e:	2600      	movs	r6, #0
 8006210:	341a      	adds	r4, #26
 8006212:	42b5      	cmp	r5, r6
 8006214:	d11a      	bne.n	800624c <_printf_common+0xc8>
 8006216:	2000      	movs	r0, #0
 8006218:	e008      	b.n	800622c <_printf_common+0xa8>
 800621a:	2301      	movs	r3, #1
 800621c:	4652      	mov	r2, sl
 800621e:	4649      	mov	r1, r9
 8006220:	4638      	mov	r0, r7
 8006222:	47c0      	blx	r8
 8006224:	3001      	adds	r0, #1
 8006226:	d103      	bne.n	8006230 <_printf_common+0xac>
 8006228:	f04f 30ff 	mov.w	r0, #4294967295
 800622c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006230:	3501      	adds	r5, #1
 8006232:	e7c6      	b.n	80061c2 <_printf_common+0x3e>
 8006234:	18e1      	adds	r1, r4, r3
 8006236:	1c5a      	adds	r2, r3, #1
 8006238:	2030      	movs	r0, #48	; 0x30
 800623a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800623e:	4422      	add	r2, r4
 8006240:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006244:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006248:	3302      	adds	r3, #2
 800624a:	e7c7      	b.n	80061dc <_printf_common+0x58>
 800624c:	2301      	movs	r3, #1
 800624e:	4622      	mov	r2, r4
 8006250:	4649      	mov	r1, r9
 8006252:	4638      	mov	r0, r7
 8006254:	47c0      	blx	r8
 8006256:	3001      	adds	r0, #1
 8006258:	d0e6      	beq.n	8006228 <_printf_common+0xa4>
 800625a:	3601      	adds	r6, #1
 800625c:	e7d9      	b.n	8006212 <_printf_common+0x8e>
	...

08006260 <_printf_i>:
 8006260:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006264:	7e0f      	ldrb	r7, [r1, #24]
 8006266:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006268:	2f78      	cmp	r7, #120	; 0x78
 800626a:	4691      	mov	r9, r2
 800626c:	4680      	mov	r8, r0
 800626e:	460c      	mov	r4, r1
 8006270:	469a      	mov	sl, r3
 8006272:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006276:	d807      	bhi.n	8006288 <_printf_i+0x28>
 8006278:	2f62      	cmp	r7, #98	; 0x62
 800627a:	d80a      	bhi.n	8006292 <_printf_i+0x32>
 800627c:	2f00      	cmp	r7, #0
 800627e:	f000 80d4 	beq.w	800642a <_printf_i+0x1ca>
 8006282:	2f58      	cmp	r7, #88	; 0x58
 8006284:	f000 80c0 	beq.w	8006408 <_printf_i+0x1a8>
 8006288:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800628c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006290:	e03a      	b.n	8006308 <_printf_i+0xa8>
 8006292:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006296:	2b15      	cmp	r3, #21
 8006298:	d8f6      	bhi.n	8006288 <_printf_i+0x28>
 800629a:	a101      	add	r1, pc, #4	; (adr r1, 80062a0 <_printf_i+0x40>)
 800629c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80062a0:	080062f9 	.word	0x080062f9
 80062a4:	0800630d 	.word	0x0800630d
 80062a8:	08006289 	.word	0x08006289
 80062ac:	08006289 	.word	0x08006289
 80062b0:	08006289 	.word	0x08006289
 80062b4:	08006289 	.word	0x08006289
 80062b8:	0800630d 	.word	0x0800630d
 80062bc:	08006289 	.word	0x08006289
 80062c0:	08006289 	.word	0x08006289
 80062c4:	08006289 	.word	0x08006289
 80062c8:	08006289 	.word	0x08006289
 80062cc:	08006411 	.word	0x08006411
 80062d0:	08006339 	.word	0x08006339
 80062d4:	080063cb 	.word	0x080063cb
 80062d8:	08006289 	.word	0x08006289
 80062dc:	08006289 	.word	0x08006289
 80062e0:	08006433 	.word	0x08006433
 80062e4:	08006289 	.word	0x08006289
 80062e8:	08006339 	.word	0x08006339
 80062ec:	08006289 	.word	0x08006289
 80062f0:	08006289 	.word	0x08006289
 80062f4:	080063d3 	.word	0x080063d3
 80062f8:	682b      	ldr	r3, [r5, #0]
 80062fa:	1d1a      	adds	r2, r3, #4
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	602a      	str	r2, [r5, #0]
 8006300:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006304:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006308:	2301      	movs	r3, #1
 800630a:	e09f      	b.n	800644c <_printf_i+0x1ec>
 800630c:	6820      	ldr	r0, [r4, #0]
 800630e:	682b      	ldr	r3, [r5, #0]
 8006310:	0607      	lsls	r7, r0, #24
 8006312:	f103 0104 	add.w	r1, r3, #4
 8006316:	6029      	str	r1, [r5, #0]
 8006318:	d501      	bpl.n	800631e <_printf_i+0xbe>
 800631a:	681e      	ldr	r6, [r3, #0]
 800631c:	e003      	b.n	8006326 <_printf_i+0xc6>
 800631e:	0646      	lsls	r6, r0, #25
 8006320:	d5fb      	bpl.n	800631a <_printf_i+0xba>
 8006322:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006326:	2e00      	cmp	r6, #0
 8006328:	da03      	bge.n	8006332 <_printf_i+0xd2>
 800632a:	232d      	movs	r3, #45	; 0x2d
 800632c:	4276      	negs	r6, r6
 800632e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006332:	485a      	ldr	r0, [pc, #360]	; (800649c <_printf_i+0x23c>)
 8006334:	230a      	movs	r3, #10
 8006336:	e012      	b.n	800635e <_printf_i+0xfe>
 8006338:	682b      	ldr	r3, [r5, #0]
 800633a:	6820      	ldr	r0, [r4, #0]
 800633c:	1d19      	adds	r1, r3, #4
 800633e:	6029      	str	r1, [r5, #0]
 8006340:	0605      	lsls	r5, r0, #24
 8006342:	d501      	bpl.n	8006348 <_printf_i+0xe8>
 8006344:	681e      	ldr	r6, [r3, #0]
 8006346:	e002      	b.n	800634e <_printf_i+0xee>
 8006348:	0641      	lsls	r1, r0, #25
 800634a:	d5fb      	bpl.n	8006344 <_printf_i+0xe4>
 800634c:	881e      	ldrh	r6, [r3, #0]
 800634e:	4853      	ldr	r0, [pc, #332]	; (800649c <_printf_i+0x23c>)
 8006350:	2f6f      	cmp	r7, #111	; 0x6f
 8006352:	bf0c      	ite	eq
 8006354:	2308      	moveq	r3, #8
 8006356:	230a      	movne	r3, #10
 8006358:	2100      	movs	r1, #0
 800635a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800635e:	6865      	ldr	r5, [r4, #4]
 8006360:	60a5      	str	r5, [r4, #8]
 8006362:	2d00      	cmp	r5, #0
 8006364:	bfa2      	ittt	ge
 8006366:	6821      	ldrge	r1, [r4, #0]
 8006368:	f021 0104 	bicge.w	r1, r1, #4
 800636c:	6021      	strge	r1, [r4, #0]
 800636e:	b90e      	cbnz	r6, 8006374 <_printf_i+0x114>
 8006370:	2d00      	cmp	r5, #0
 8006372:	d04b      	beq.n	800640c <_printf_i+0x1ac>
 8006374:	4615      	mov	r5, r2
 8006376:	fbb6 f1f3 	udiv	r1, r6, r3
 800637a:	fb03 6711 	mls	r7, r3, r1, r6
 800637e:	5dc7      	ldrb	r7, [r0, r7]
 8006380:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006384:	4637      	mov	r7, r6
 8006386:	42bb      	cmp	r3, r7
 8006388:	460e      	mov	r6, r1
 800638a:	d9f4      	bls.n	8006376 <_printf_i+0x116>
 800638c:	2b08      	cmp	r3, #8
 800638e:	d10b      	bne.n	80063a8 <_printf_i+0x148>
 8006390:	6823      	ldr	r3, [r4, #0]
 8006392:	07de      	lsls	r6, r3, #31
 8006394:	d508      	bpl.n	80063a8 <_printf_i+0x148>
 8006396:	6923      	ldr	r3, [r4, #16]
 8006398:	6861      	ldr	r1, [r4, #4]
 800639a:	4299      	cmp	r1, r3
 800639c:	bfde      	ittt	le
 800639e:	2330      	movle	r3, #48	; 0x30
 80063a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80063a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80063a8:	1b52      	subs	r2, r2, r5
 80063aa:	6122      	str	r2, [r4, #16]
 80063ac:	f8cd a000 	str.w	sl, [sp]
 80063b0:	464b      	mov	r3, r9
 80063b2:	aa03      	add	r2, sp, #12
 80063b4:	4621      	mov	r1, r4
 80063b6:	4640      	mov	r0, r8
 80063b8:	f7ff fee4 	bl	8006184 <_printf_common>
 80063bc:	3001      	adds	r0, #1
 80063be:	d14a      	bne.n	8006456 <_printf_i+0x1f6>
 80063c0:	f04f 30ff 	mov.w	r0, #4294967295
 80063c4:	b004      	add	sp, #16
 80063c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063ca:	6823      	ldr	r3, [r4, #0]
 80063cc:	f043 0320 	orr.w	r3, r3, #32
 80063d0:	6023      	str	r3, [r4, #0]
 80063d2:	4833      	ldr	r0, [pc, #204]	; (80064a0 <_printf_i+0x240>)
 80063d4:	2778      	movs	r7, #120	; 0x78
 80063d6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80063da:	6823      	ldr	r3, [r4, #0]
 80063dc:	6829      	ldr	r1, [r5, #0]
 80063de:	061f      	lsls	r7, r3, #24
 80063e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80063e4:	d402      	bmi.n	80063ec <_printf_i+0x18c>
 80063e6:	065f      	lsls	r7, r3, #25
 80063e8:	bf48      	it	mi
 80063ea:	b2b6      	uxthmi	r6, r6
 80063ec:	07df      	lsls	r7, r3, #31
 80063ee:	bf48      	it	mi
 80063f0:	f043 0320 	orrmi.w	r3, r3, #32
 80063f4:	6029      	str	r1, [r5, #0]
 80063f6:	bf48      	it	mi
 80063f8:	6023      	strmi	r3, [r4, #0]
 80063fa:	b91e      	cbnz	r6, 8006404 <_printf_i+0x1a4>
 80063fc:	6823      	ldr	r3, [r4, #0]
 80063fe:	f023 0320 	bic.w	r3, r3, #32
 8006402:	6023      	str	r3, [r4, #0]
 8006404:	2310      	movs	r3, #16
 8006406:	e7a7      	b.n	8006358 <_printf_i+0xf8>
 8006408:	4824      	ldr	r0, [pc, #144]	; (800649c <_printf_i+0x23c>)
 800640a:	e7e4      	b.n	80063d6 <_printf_i+0x176>
 800640c:	4615      	mov	r5, r2
 800640e:	e7bd      	b.n	800638c <_printf_i+0x12c>
 8006410:	682b      	ldr	r3, [r5, #0]
 8006412:	6826      	ldr	r6, [r4, #0]
 8006414:	6961      	ldr	r1, [r4, #20]
 8006416:	1d18      	adds	r0, r3, #4
 8006418:	6028      	str	r0, [r5, #0]
 800641a:	0635      	lsls	r5, r6, #24
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	d501      	bpl.n	8006424 <_printf_i+0x1c4>
 8006420:	6019      	str	r1, [r3, #0]
 8006422:	e002      	b.n	800642a <_printf_i+0x1ca>
 8006424:	0670      	lsls	r0, r6, #25
 8006426:	d5fb      	bpl.n	8006420 <_printf_i+0x1c0>
 8006428:	8019      	strh	r1, [r3, #0]
 800642a:	2300      	movs	r3, #0
 800642c:	6123      	str	r3, [r4, #16]
 800642e:	4615      	mov	r5, r2
 8006430:	e7bc      	b.n	80063ac <_printf_i+0x14c>
 8006432:	682b      	ldr	r3, [r5, #0]
 8006434:	1d1a      	adds	r2, r3, #4
 8006436:	602a      	str	r2, [r5, #0]
 8006438:	681d      	ldr	r5, [r3, #0]
 800643a:	6862      	ldr	r2, [r4, #4]
 800643c:	2100      	movs	r1, #0
 800643e:	4628      	mov	r0, r5
 8006440:	f7f9 fece 	bl	80001e0 <memchr>
 8006444:	b108      	cbz	r0, 800644a <_printf_i+0x1ea>
 8006446:	1b40      	subs	r0, r0, r5
 8006448:	6060      	str	r0, [r4, #4]
 800644a:	6863      	ldr	r3, [r4, #4]
 800644c:	6123      	str	r3, [r4, #16]
 800644e:	2300      	movs	r3, #0
 8006450:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006454:	e7aa      	b.n	80063ac <_printf_i+0x14c>
 8006456:	6923      	ldr	r3, [r4, #16]
 8006458:	462a      	mov	r2, r5
 800645a:	4649      	mov	r1, r9
 800645c:	4640      	mov	r0, r8
 800645e:	47d0      	blx	sl
 8006460:	3001      	adds	r0, #1
 8006462:	d0ad      	beq.n	80063c0 <_printf_i+0x160>
 8006464:	6823      	ldr	r3, [r4, #0]
 8006466:	079b      	lsls	r3, r3, #30
 8006468:	d413      	bmi.n	8006492 <_printf_i+0x232>
 800646a:	68e0      	ldr	r0, [r4, #12]
 800646c:	9b03      	ldr	r3, [sp, #12]
 800646e:	4298      	cmp	r0, r3
 8006470:	bfb8      	it	lt
 8006472:	4618      	movlt	r0, r3
 8006474:	e7a6      	b.n	80063c4 <_printf_i+0x164>
 8006476:	2301      	movs	r3, #1
 8006478:	4632      	mov	r2, r6
 800647a:	4649      	mov	r1, r9
 800647c:	4640      	mov	r0, r8
 800647e:	47d0      	blx	sl
 8006480:	3001      	adds	r0, #1
 8006482:	d09d      	beq.n	80063c0 <_printf_i+0x160>
 8006484:	3501      	adds	r5, #1
 8006486:	68e3      	ldr	r3, [r4, #12]
 8006488:	9903      	ldr	r1, [sp, #12]
 800648a:	1a5b      	subs	r3, r3, r1
 800648c:	42ab      	cmp	r3, r5
 800648e:	dcf2      	bgt.n	8006476 <_printf_i+0x216>
 8006490:	e7eb      	b.n	800646a <_printf_i+0x20a>
 8006492:	2500      	movs	r5, #0
 8006494:	f104 0619 	add.w	r6, r4, #25
 8006498:	e7f5      	b.n	8006486 <_printf_i+0x226>
 800649a:	bf00      	nop
 800649c:	080069c6 	.word	0x080069c6
 80064a0:	080069d7 	.word	0x080069d7

080064a4 <__sflush_r>:
 80064a4:	898a      	ldrh	r2, [r1, #12]
 80064a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064aa:	4605      	mov	r5, r0
 80064ac:	0710      	lsls	r0, r2, #28
 80064ae:	460c      	mov	r4, r1
 80064b0:	d458      	bmi.n	8006564 <__sflush_r+0xc0>
 80064b2:	684b      	ldr	r3, [r1, #4]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	dc05      	bgt.n	80064c4 <__sflush_r+0x20>
 80064b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	dc02      	bgt.n	80064c4 <__sflush_r+0x20>
 80064be:	2000      	movs	r0, #0
 80064c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80064c6:	2e00      	cmp	r6, #0
 80064c8:	d0f9      	beq.n	80064be <__sflush_r+0x1a>
 80064ca:	2300      	movs	r3, #0
 80064cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80064d0:	682f      	ldr	r7, [r5, #0]
 80064d2:	6a21      	ldr	r1, [r4, #32]
 80064d4:	602b      	str	r3, [r5, #0]
 80064d6:	d032      	beq.n	800653e <__sflush_r+0x9a>
 80064d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80064da:	89a3      	ldrh	r3, [r4, #12]
 80064dc:	075a      	lsls	r2, r3, #29
 80064de:	d505      	bpl.n	80064ec <__sflush_r+0x48>
 80064e0:	6863      	ldr	r3, [r4, #4]
 80064e2:	1ac0      	subs	r0, r0, r3
 80064e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80064e6:	b10b      	cbz	r3, 80064ec <__sflush_r+0x48>
 80064e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80064ea:	1ac0      	subs	r0, r0, r3
 80064ec:	2300      	movs	r3, #0
 80064ee:	4602      	mov	r2, r0
 80064f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80064f2:	6a21      	ldr	r1, [r4, #32]
 80064f4:	4628      	mov	r0, r5
 80064f6:	47b0      	blx	r6
 80064f8:	1c43      	adds	r3, r0, #1
 80064fa:	89a3      	ldrh	r3, [r4, #12]
 80064fc:	d106      	bne.n	800650c <__sflush_r+0x68>
 80064fe:	6829      	ldr	r1, [r5, #0]
 8006500:	291d      	cmp	r1, #29
 8006502:	d82b      	bhi.n	800655c <__sflush_r+0xb8>
 8006504:	4a29      	ldr	r2, [pc, #164]	; (80065ac <__sflush_r+0x108>)
 8006506:	410a      	asrs	r2, r1
 8006508:	07d6      	lsls	r6, r2, #31
 800650a:	d427      	bmi.n	800655c <__sflush_r+0xb8>
 800650c:	2200      	movs	r2, #0
 800650e:	6062      	str	r2, [r4, #4]
 8006510:	04d9      	lsls	r1, r3, #19
 8006512:	6922      	ldr	r2, [r4, #16]
 8006514:	6022      	str	r2, [r4, #0]
 8006516:	d504      	bpl.n	8006522 <__sflush_r+0x7e>
 8006518:	1c42      	adds	r2, r0, #1
 800651a:	d101      	bne.n	8006520 <__sflush_r+0x7c>
 800651c:	682b      	ldr	r3, [r5, #0]
 800651e:	b903      	cbnz	r3, 8006522 <__sflush_r+0x7e>
 8006520:	6560      	str	r0, [r4, #84]	; 0x54
 8006522:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006524:	602f      	str	r7, [r5, #0]
 8006526:	2900      	cmp	r1, #0
 8006528:	d0c9      	beq.n	80064be <__sflush_r+0x1a>
 800652a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800652e:	4299      	cmp	r1, r3
 8006530:	d002      	beq.n	8006538 <__sflush_r+0x94>
 8006532:	4628      	mov	r0, r5
 8006534:	f7ff fbea 	bl	8005d0c <_free_r>
 8006538:	2000      	movs	r0, #0
 800653a:	6360      	str	r0, [r4, #52]	; 0x34
 800653c:	e7c0      	b.n	80064c0 <__sflush_r+0x1c>
 800653e:	2301      	movs	r3, #1
 8006540:	4628      	mov	r0, r5
 8006542:	47b0      	blx	r6
 8006544:	1c41      	adds	r1, r0, #1
 8006546:	d1c8      	bne.n	80064da <__sflush_r+0x36>
 8006548:	682b      	ldr	r3, [r5, #0]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d0c5      	beq.n	80064da <__sflush_r+0x36>
 800654e:	2b1d      	cmp	r3, #29
 8006550:	d001      	beq.n	8006556 <__sflush_r+0xb2>
 8006552:	2b16      	cmp	r3, #22
 8006554:	d101      	bne.n	800655a <__sflush_r+0xb6>
 8006556:	602f      	str	r7, [r5, #0]
 8006558:	e7b1      	b.n	80064be <__sflush_r+0x1a>
 800655a:	89a3      	ldrh	r3, [r4, #12]
 800655c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006560:	81a3      	strh	r3, [r4, #12]
 8006562:	e7ad      	b.n	80064c0 <__sflush_r+0x1c>
 8006564:	690f      	ldr	r7, [r1, #16]
 8006566:	2f00      	cmp	r7, #0
 8006568:	d0a9      	beq.n	80064be <__sflush_r+0x1a>
 800656a:	0793      	lsls	r3, r2, #30
 800656c:	680e      	ldr	r6, [r1, #0]
 800656e:	bf08      	it	eq
 8006570:	694b      	ldreq	r3, [r1, #20]
 8006572:	600f      	str	r7, [r1, #0]
 8006574:	bf18      	it	ne
 8006576:	2300      	movne	r3, #0
 8006578:	eba6 0807 	sub.w	r8, r6, r7
 800657c:	608b      	str	r3, [r1, #8]
 800657e:	f1b8 0f00 	cmp.w	r8, #0
 8006582:	dd9c      	ble.n	80064be <__sflush_r+0x1a>
 8006584:	6a21      	ldr	r1, [r4, #32]
 8006586:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006588:	4643      	mov	r3, r8
 800658a:	463a      	mov	r2, r7
 800658c:	4628      	mov	r0, r5
 800658e:	47b0      	blx	r6
 8006590:	2800      	cmp	r0, #0
 8006592:	dc06      	bgt.n	80065a2 <__sflush_r+0xfe>
 8006594:	89a3      	ldrh	r3, [r4, #12]
 8006596:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800659a:	81a3      	strh	r3, [r4, #12]
 800659c:	f04f 30ff 	mov.w	r0, #4294967295
 80065a0:	e78e      	b.n	80064c0 <__sflush_r+0x1c>
 80065a2:	4407      	add	r7, r0
 80065a4:	eba8 0800 	sub.w	r8, r8, r0
 80065a8:	e7e9      	b.n	800657e <__sflush_r+0xda>
 80065aa:	bf00      	nop
 80065ac:	dfbffffe 	.word	0xdfbffffe

080065b0 <_fflush_r>:
 80065b0:	b538      	push	{r3, r4, r5, lr}
 80065b2:	690b      	ldr	r3, [r1, #16]
 80065b4:	4605      	mov	r5, r0
 80065b6:	460c      	mov	r4, r1
 80065b8:	b913      	cbnz	r3, 80065c0 <_fflush_r+0x10>
 80065ba:	2500      	movs	r5, #0
 80065bc:	4628      	mov	r0, r5
 80065be:	bd38      	pop	{r3, r4, r5, pc}
 80065c0:	b118      	cbz	r0, 80065ca <_fflush_r+0x1a>
 80065c2:	6a03      	ldr	r3, [r0, #32]
 80065c4:	b90b      	cbnz	r3, 80065ca <_fflush_r+0x1a>
 80065c6:	f7ff f9a1 	bl	800590c <__sinit>
 80065ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d0f3      	beq.n	80065ba <_fflush_r+0xa>
 80065d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80065d4:	07d0      	lsls	r0, r2, #31
 80065d6:	d404      	bmi.n	80065e2 <_fflush_r+0x32>
 80065d8:	0599      	lsls	r1, r3, #22
 80065da:	d402      	bmi.n	80065e2 <_fflush_r+0x32>
 80065dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065de:	f7ff fb92 	bl	8005d06 <__retarget_lock_acquire_recursive>
 80065e2:	4628      	mov	r0, r5
 80065e4:	4621      	mov	r1, r4
 80065e6:	f7ff ff5d 	bl	80064a4 <__sflush_r>
 80065ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065ec:	07da      	lsls	r2, r3, #31
 80065ee:	4605      	mov	r5, r0
 80065f0:	d4e4      	bmi.n	80065bc <_fflush_r+0xc>
 80065f2:	89a3      	ldrh	r3, [r4, #12]
 80065f4:	059b      	lsls	r3, r3, #22
 80065f6:	d4e1      	bmi.n	80065bc <_fflush_r+0xc>
 80065f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065fa:	f7ff fb85 	bl	8005d08 <__retarget_lock_release_recursive>
 80065fe:	e7dd      	b.n	80065bc <_fflush_r+0xc>

08006600 <__swhatbuf_r>:
 8006600:	b570      	push	{r4, r5, r6, lr}
 8006602:	460c      	mov	r4, r1
 8006604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006608:	2900      	cmp	r1, #0
 800660a:	b096      	sub	sp, #88	; 0x58
 800660c:	4615      	mov	r5, r2
 800660e:	461e      	mov	r6, r3
 8006610:	da0d      	bge.n	800662e <__swhatbuf_r+0x2e>
 8006612:	89a3      	ldrh	r3, [r4, #12]
 8006614:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006618:	f04f 0100 	mov.w	r1, #0
 800661c:	bf0c      	ite	eq
 800661e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006622:	2340      	movne	r3, #64	; 0x40
 8006624:	2000      	movs	r0, #0
 8006626:	6031      	str	r1, [r6, #0]
 8006628:	602b      	str	r3, [r5, #0]
 800662a:	b016      	add	sp, #88	; 0x58
 800662c:	bd70      	pop	{r4, r5, r6, pc}
 800662e:	466a      	mov	r2, sp
 8006630:	f000 f87c 	bl	800672c <_fstat_r>
 8006634:	2800      	cmp	r0, #0
 8006636:	dbec      	blt.n	8006612 <__swhatbuf_r+0x12>
 8006638:	9901      	ldr	r1, [sp, #4]
 800663a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800663e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006642:	4259      	negs	r1, r3
 8006644:	4159      	adcs	r1, r3
 8006646:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800664a:	e7eb      	b.n	8006624 <__swhatbuf_r+0x24>

0800664c <__smakebuf_r>:
 800664c:	898b      	ldrh	r3, [r1, #12]
 800664e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006650:	079d      	lsls	r5, r3, #30
 8006652:	4606      	mov	r6, r0
 8006654:	460c      	mov	r4, r1
 8006656:	d507      	bpl.n	8006668 <__smakebuf_r+0x1c>
 8006658:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800665c:	6023      	str	r3, [r4, #0]
 800665e:	6123      	str	r3, [r4, #16]
 8006660:	2301      	movs	r3, #1
 8006662:	6163      	str	r3, [r4, #20]
 8006664:	b002      	add	sp, #8
 8006666:	bd70      	pop	{r4, r5, r6, pc}
 8006668:	ab01      	add	r3, sp, #4
 800666a:	466a      	mov	r2, sp
 800666c:	f7ff ffc8 	bl	8006600 <__swhatbuf_r>
 8006670:	9900      	ldr	r1, [sp, #0]
 8006672:	4605      	mov	r5, r0
 8006674:	4630      	mov	r0, r6
 8006676:	f7ff fbb5 	bl	8005de4 <_malloc_r>
 800667a:	b948      	cbnz	r0, 8006690 <__smakebuf_r+0x44>
 800667c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006680:	059a      	lsls	r2, r3, #22
 8006682:	d4ef      	bmi.n	8006664 <__smakebuf_r+0x18>
 8006684:	f023 0303 	bic.w	r3, r3, #3
 8006688:	f043 0302 	orr.w	r3, r3, #2
 800668c:	81a3      	strh	r3, [r4, #12]
 800668e:	e7e3      	b.n	8006658 <__smakebuf_r+0xc>
 8006690:	89a3      	ldrh	r3, [r4, #12]
 8006692:	6020      	str	r0, [r4, #0]
 8006694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006698:	81a3      	strh	r3, [r4, #12]
 800669a:	9b00      	ldr	r3, [sp, #0]
 800669c:	6163      	str	r3, [r4, #20]
 800669e:	9b01      	ldr	r3, [sp, #4]
 80066a0:	6120      	str	r0, [r4, #16]
 80066a2:	b15b      	cbz	r3, 80066bc <__smakebuf_r+0x70>
 80066a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066a8:	4630      	mov	r0, r6
 80066aa:	f000 f851 	bl	8006750 <_isatty_r>
 80066ae:	b128      	cbz	r0, 80066bc <__smakebuf_r+0x70>
 80066b0:	89a3      	ldrh	r3, [r4, #12]
 80066b2:	f023 0303 	bic.w	r3, r3, #3
 80066b6:	f043 0301 	orr.w	r3, r3, #1
 80066ba:	81a3      	strh	r3, [r4, #12]
 80066bc:	89a3      	ldrh	r3, [r4, #12]
 80066be:	431d      	orrs	r5, r3
 80066c0:	81a5      	strh	r5, [r4, #12]
 80066c2:	e7cf      	b.n	8006664 <__smakebuf_r+0x18>

080066c4 <_putc_r>:
 80066c4:	b570      	push	{r4, r5, r6, lr}
 80066c6:	460d      	mov	r5, r1
 80066c8:	4614      	mov	r4, r2
 80066ca:	4606      	mov	r6, r0
 80066cc:	b118      	cbz	r0, 80066d6 <_putc_r+0x12>
 80066ce:	6a03      	ldr	r3, [r0, #32]
 80066d0:	b90b      	cbnz	r3, 80066d6 <_putc_r+0x12>
 80066d2:	f7ff f91b 	bl	800590c <__sinit>
 80066d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80066d8:	07d8      	lsls	r0, r3, #31
 80066da:	d405      	bmi.n	80066e8 <_putc_r+0x24>
 80066dc:	89a3      	ldrh	r3, [r4, #12]
 80066de:	0599      	lsls	r1, r3, #22
 80066e0:	d402      	bmi.n	80066e8 <_putc_r+0x24>
 80066e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066e4:	f7ff fb0f 	bl	8005d06 <__retarget_lock_acquire_recursive>
 80066e8:	68a3      	ldr	r3, [r4, #8]
 80066ea:	3b01      	subs	r3, #1
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	60a3      	str	r3, [r4, #8]
 80066f0:	da05      	bge.n	80066fe <_putc_r+0x3a>
 80066f2:	69a2      	ldr	r2, [r4, #24]
 80066f4:	4293      	cmp	r3, r2
 80066f6:	db12      	blt.n	800671e <_putc_r+0x5a>
 80066f8:	b2eb      	uxtb	r3, r5
 80066fa:	2b0a      	cmp	r3, #10
 80066fc:	d00f      	beq.n	800671e <_putc_r+0x5a>
 80066fe:	6823      	ldr	r3, [r4, #0]
 8006700:	1c5a      	adds	r2, r3, #1
 8006702:	6022      	str	r2, [r4, #0]
 8006704:	701d      	strb	r5, [r3, #0]
 8006706:	b2ed      	uxtb	r5, r5
 8006708:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800670a:	07da      	lsls	r2, r3, #31
 800670c:	d405      	bmi.n	800671a <_putc_r+0x56>
 800670e:	89a3      	ldrh	r3, [r4, #12]
 8006710:	059b      	lsls	r3, r3, #22
 8006712:	d402      	bmi.n	800671a <_putc_r+0x56>
 8006714:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006716:	f7ff faf7 	bl	8005d08 <__retarget_lock_release_recursive>
 800671a:	4628      	mov	r0, r5
 800671c:	bd70      	pop	{r4, r5, r6, pc}
 800671e:	4629      	mov	r1, r5
 8006720:	4622      	mov	r2, r4
 8006722:	4630      	mov	r0, r6
 8006724:	f7ff f9e1 	bl	8005aea <__swbuf_r>
 8006728:	4605      	mov	r5, r0
 800672a:	e7ed      	b.n	8006708 <_putc_r+0x44>

0800672c <_fstat_r>:
 800672c:	b538      	push	{r3, r4, r5, lr}
 800672e:	4d07      	ldr	r5, [pc, #28]	; (800674c <_fstat_r+0x20>)
 8006730:	2300      	movs	r3, #0
 8006732:	4604      	mov	r4, r0
 8006734:	4608      	mov	r0, r1
 8006736:	4611      	mov	r1, r2
 8006738:	602b      	str	r3, [r5, #0]
 800673a:	f7fb fdbc 	bl	80022b6 <_fstat>
 800673e:	1c43      	adds	r3, r0, #1
 8006740:	d102      	bne.n	8006748 <_fstat_r+0x1c>
 8006742:	682b      	ldr	r3, [r5, #0]
 8006744:	b103      	cbz	r3, 8006748 <_fstat_r+0x1c>
 8006746:	6023      	str	r3, [r4, #0]
 8006748:	bd38      	pop	{r3, r4, r5, pc}
 800674a:	bf00      	nop
 800674c:	2000053c 	.word	0x2000053c

08006750 <_isatty_r>:
 8006750:	b538      	push	{r3, r4, r5, lr}
 8006752:	4d06      	ldr	r5, [pc, #24]	; (800676c <_isatty_r+0x1c>)
 8006754:	2300      	movs	r3, #0
 8006756:	4604      	mov	r4, r0
 8006758:	4608      	mov	r0, r1
 800675a:	602b      	str	r3, [r5, #0]
 800675c:	f7fb fdbb 	bl	80022d6 <_isatty>
 8006760:	1c43      	adds	r3, r0, #1
 8006762:	d102      	bne.n	800676a <_isatty_r+0x1a>
 8006764:	682b      	ldr	r3, [r5, #0]
 8006766:	b103      	cbz	r3, 800676a <_isatty_r+0x1a>
 8006768:	6023      	str	r3, [r4, #0]
 800676a:	bd38      	pop	{r3, r4, r5, pc}
 800676c:	2000053c 	.word	0x2000053c

08006770 <_sbrk_r>:
 8006770:	b538      	push	{r3, r4, r5, lr}
 8006772:	4d06      	ldr	r5, [pc, #24]	; (800678c <_sbrk_r+0x1c>)
 8006774:	2300      	movs	r3, #0
 8006776:	4604      	mov	r4, r0
 8006778:	4608      	mov	r0, r1
 800677a:	602b      	str	r3, [r5, #0]
 800677c:	f7fb fdc4 	bl	8002308 <_sbrk>
 8006780:	1c43      	adds	r3, r0, #1
 8006782:	d102      	bne.n	800678a <_sbrk_r+0x1a>
 8006784:	682b      	ldr	r3, [r5, #0]
 8006786:	b103      	cbz	r3, 800678a <_sbrk_r+0x1a>
 8006788:	6023      	str	r3, [r4, #0]
 800678a:	bd38      	pop	{r3, r4, r5, pc}
 800678c:	2000053c 	.word	0x2000053c

08006790 <_init>:
 8006790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006792:	bf00      	nop
 8006794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006796:	bc08      	pop	{r3}
 8006798:	469e      	mov	lr, r3
 800679a:	4770      	bx	lr

0800679c <_fini>:
 800679c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800679e:	bf00      	nop
 80067a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067a2:	bc08      	pop	{r3}
 80067a4:	469e      	mov	lr, r3
 80067a6:	4770      	bx	lr
